Index: src/app/(main)/community/[communityId]/page.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// src/app/community/[communityId]/page.tsx\r\n\"use client\";\r\n\r\nimport React from \"react\";\r\nimport {UnderDevelopment} from \"@/components/under-development\"; // Assuming you have this already\r\n\r\nexport default function CommunityPage() {\r\n    return (\r\n        <div className=\"min-h-screen flex flex-col items-center justify-center\">\r\n            <UnderDevelopment\r\n                title=\"Community Feature Coming Soon!\"\r\n            />\r\n        </div>\r\n    );\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/app/(main)/community/[communityId]/page.tsx b/src/app/(main)/community/[communityId]/page.tsx
--- a/src/app/(main)/community/[communityId]/page.tsx	(revision 4c74be27f19335e5b956190fea65a1f797f84875)
+++ b/src/app/(main)/community/[communityId]/page.tsx	(date 1747009941984)
@@ -1,15 +1,327 @@
-// src/app/community/[communityId]/page.tsx
+// src/app/(main)/community/[communityId]/page.tsx
 "use client";
 
-import React from "react";
-import {UnderDevelopment} from "@/components/under-development"; // Assuming you have this already
+import React, { useEffect, useState } from "react";
+import { useParams } from "next/navigation";
+import { CommunityLayout } from "@/components/community/layout";
+import { SingleCommunityProvider, useSingleCommunityContext } from "@/context/SingleCommunityContext";
+import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
+import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
+import { Button } from "@/components/ui/button";
+import { Info, Users, MessageSquare, Pin } from "lucide-react";
+import { formatDistanceToNow } from "date-fns";
 
 export default function CommunityPage() {
+    const params = useParams();
+    const communityId = params.communityId as string;
+
     return (
-        <div className="min-h-screen flex flex-col items-center justify-center">
-            <UnderDevelopment
-                title="Community Feature Coming Soon!"
-            />
+        <SingleCommunityProvider>
+            <CommunityLayout>
+                <div className="p-6">
+                    <CommunityHome communityId={communityId} />
+                </div>
+            </CommunityLayout>
+        </SingleCommunityProvider>
+    );
+}
+
+interface CommunityHomeProps {
+    communityId: string;
+}
+
+function CommunityHome({ communityId }: CommunityHomeProps) {
+    const [pinnedMessages, setPinnedMessages] = useState<any[]>([]);
+    const [recentPosts, setRecentPosts] = useState<any[]>([]);
+    const [loading, setLoading] = useState(true);
+    const [error, setError] = useState<string | null>(null);
+    const { community } = useSingleCommunityContext();
+
+    useEffect(() => {
+        const fetchPinnedMessages = async () => {
+            try {
+                const response = await fetch(`/api/communities/${communityId}/channels/messages/pinned`);
+                if (response.ok) {
+                    const data = await response.json();
+                    setPinnedMessages(data.messages || []);
+                } else {
+                    console.error('Failed to fetch pinned messages');
+                    // Fallback to sample data if API doesn't exist yet
+                    setPinnedMessages([
+                        {
+                            id: '1',
+                            content: 'Welcome to our community! Please read the rules before posting.',
+                            author: {
+                                name: 'Admin',
+                                image: 'https://github.com/shadcn.png'
+                            },
+                            createdAt: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString()
+                        },
+                        {
+                            id: '2',
+                            content: 'We have a voice chat session this weekend. Join us!',
+                            author: {
+                                name: 'Moderator',
+                                image: ''
+                            },
+                            createdAt: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString()
+                        }
+                    ]);
+                }
+            } catch (err) {
+                console.error('Error fetching pinned messages:', err);
+                setError('Failed to load pinned messages');
+            }
+        };
+
+        const fetchRecentPosts = async () => {
+            try {
+                const response = await fetch(`/api/communities/${communityId}/posts?limit=5`);
+                if (response.ok) {
+                    const data = await response.json();
+                    setRecentPosts(data.posts || []);
+                } else {
+                    console.error('Failed to fetch recent posts');
+                    // Fallback to sample data if API doesn't exist yet
+                    setRecentPosts([
+                        {
+                            id: '1',
+                            title: 'Introducing new features',
+                            content: 'We have added several new features to our community...',
+                            author: {
+                                name: 'John Doe',
+                                image: 'https://github.com/shadcn.png'
+                            },
+                            channel: 'announcements',
+                            commentCount: 5,
+                            createdAt: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString()
+                        },
+                        {
+                            id: '2',
+                            title: 'Community event',
+                            content: 'Join us for our monthly community event...',
+                            author: {
+                                name: 'Jane Smith',
+                                image: ''
+                            },
+                            channel: 'events',
+                            commentCount: 12,
+                            createdAt: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000).toISOString()
+                        },
+                        {
+                            id: '3',
+                            title: 'Help needed with project',
+                            content: 'I need some assistance with my project...',
+                            author: {
+                                name: 'Bob Johnson',
+                                image: 'https://github.com/shadcn.png'
+                            },
+                            channel: 'help',
+                            commentCount: 8,
+                            createdAt: new Date(Date.now() - 12 * 60 * 60 * 1000).toISOString()
+                        }
+                    ]);
+                }
+            } catch (err) {
+                console.error('Error fetching recent posts:', err);
+                setError('Failed to load recent posts');
+            }
+        };
+
+        const loadData = async () => {
+            setLoading(true);
+            setError(null);
+
+            try {
+                await Promise.all([
+                    fetchPinnedMessages(),
+                    fetchRecentPosts()
+                ]);
+            } catch (err) {
+                console.error('Error loading community data:', err);
+                setError('Failed to load community data');
+            } finally {
+                setLoading(false);
+            }
+        };
+
+        if (communityId) {
+            loadData();
+        }
+    }, [communityId]);
+
+    if (loading) {
+        return (
+            <div className="space-y-4">
+                <div className="animate-pulse h-8 w-48 bg-gray-200 rounded mb-4"></div>
+                <div className="animate-pulse h-32 w-full bg-gray-200 rounded mb-6"></div>
+                <div className="animate-pulse h-8 w-48 bg-gray-200 rounded mb-4"></div>
+                <div className="animate-pulse h-24 w-full bg-gray-200 rounded mb-2"></div>
+                <div className="animate-pulse h-24 w-full bg-gray-200 rounded mb-2"></div>
+                <div className="animate-pulse h-24 w-full bg-gray-200 rounded"></div>
+            </div>
+        );
+    }
+
+    if (error) {
+        return (
+            <div className="bg-red-50 border border-red-200 rounded-lg p-4 text-red-600">
+                <p>{error}</p>
+                <Button
+                    variant="outline"
+                    size="sm"
+                    className="mt-2"
+                    onClick={() => window.location.reload()}
+                >
+                    Try Again
+                </Button>
+            </div>
+        );
+    }
+
+    return (
+        <div className="space-y-6">
+            {/* Pinned Messages */}
+            <section>
+                <h2 className="text-xl font-semibold mb-4 flex items-center">
+                    <Pin className="h-5 w-5 mr-2 text-yellow-500" />
+                    Pinned Messages
+                </h2>
+
+                {pinnedMessages.length === 0 ? (
+                    <Card>
+                        <CardContent className="p-6 text-center text-gray-500">
+                            No pinned messages
+                        </CardContent>
+                    </Card>
+                ) : (
+                    <div className="space-y-3">
+                        {pinnedMessages.map(message => (
+                            <Card key={message.id}>
+                                <CardContent className="p-4">
+                                    <div className="flex items-start">
+                                        <Avatar className="h-10 w-10 mr-3">
+                                            <AvatarImage src={message.author.image} />
+                                            <AvatarFallback>{message.author.name.substring(0, 2).toUpperCase()}</AvatarFallback>
+                                        </Avatar>
+
+                                        <div className="flex-1">
+                                            <div className="flex items-center mb-1">
+                                                <span className="font-medium text-gray-900 mr-2">{message.author.name}</span>
+                                                <span className="text-xs text-gray-500">
+                                                    {formatDistanceToNow(new Date(message.createdAt), { addSuffix: true })}
+                                                </span>
+                                            </div>
+
+                                            <p className="text-gray-800">{message.content}</p>
+                                        </div>
+                                    </div>
+                                </CardContent>
+                            </Card>
+                        ))}
+                    </div>
+                )}
+            </section>
+
+            {/* Recent Posts */}
+            <section>
+                <h2 className="text-xl font-semibold mb-4 flex items-center">
+                    <MessageSquare className="h-5 w-5 mr-2 text-blue-500" />
+                    Recent Activity
+                </h2>
+
+                {recentPosts.length === 0 ? (
+                    <Card>
+                        <CardContent className="p-6 text-center text-gray-500">
+                            No recent posts
+                        </CardContent>
+                    </Card>
+                ) : (
+                    <div className="space-y-3">
+                        {recentPosts.map(post => (
+                            <Card key={post.id} className="hover:shadow-md transition-shadow">
+                                <CardHeader className="p-4 pb-2">
+                                    <div className="flex justify-between items-start">
+                                        <div className="flex items-center">
+                                            <Avatar className="h-8 w-8 mr-2">
+                                                <AvatarImage src={post.author.image} />
+                                                <AvatarFallback>{post.author.name.substring(0, 2).toUpperCase()}</AvatarFallback>
+                                            </Avatar>
+                                            <div>
+                                                <div className="font-medium text-sm">{post.author.name}</div>
+                                                <div className="text-xs text-gray-500">
+                                                    {formatDistanceToNow(new Date(post.createdAt), { addSuffix: true })}
+                                                </div>
+                                            </div>
+                                        </div>
+
+                                        <div className="text-xs bg-gray-100 px-2 py-1 rounded-full text-gray-600">
+                                            #{post.channel}
+                                        </div>
+                                    </div>
+
+                                    <CardTitle className="text-lg mt-2">{post.title}</CardTitle>
+                                </CardHeader>
+
+                                <CardContent className="p-4 pt-0">
+                                    <CardDescription className="text-gray-700 mb-2 line-clamp-2">
+                                        {post.content}
+                                    </CardDescription>
+
+                                    <div className="flex items-center text-xs text-gray-500">
+                                        <MessageSquare className="h-3 w-3 mr-1" />
+                                        {post.commentCount} comments
+                                    </div>
+                                </CardContent>
+                            </Card>
+                        ))}
+                    </div>
+                )}
+            </section>
+
+            {/* Community Info */}
+            <section>
+                <h2 className="text-xl font-semibold mb-4 flex items-center">
+                    <Info className="h-5 w-5 mr-2 text-green-500" />
+                    About This Community
+                </h2>
+
+                <Card>
+                    <CardContent className="p-6">
+                        <div className="flex items-center mb-4">
+                            <Users className="h-5 w-5 mr-2 text-gray-500" />
+                            <span className="text-gray-700">{community?.memberCount || 0} members</span>
+                        </div>
+
+                        <div className="mb-4">
+                            <h3 className="font-medium mb-2">Community Rules</h3>
+                            {community?.rules ? (
+                                <div className="text-gray-700">{community.rules}</div>
+                            ) : (
+                                <ul className="list-disc pl-5 text-gray-700 space-y-1">
+                                    <li>Be respectful to others</li>
+                                    <li>No spam or self-promotion</li>
+                                    <li>Use appropriate channels for your posts</li>
+                                </ul>
+                            )}
+                        </div>
+
+                        <div className="mb-4">
+                            <h3 className="font-medium mb-2">Description</h3>
+                            <p className="text-gray-700">{community?.description || 'No description available'}</p>
+                        </div>
+
+                        {community && (community.isCreator || community.isModerator) && (
+                            <Button
+                                className="w-full"
+                                onClick={() => window.location.href = `/community/${communityId}/settings`}
+                            >
+                                Manage Community
+                            </Button>
+                        )}
+                    </CardContent>
+                </Card>
+            </section>
         </div>
     );
 }
Index: README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).\r\n\r\n## Getting Started\r\n\r\nFirst, run the development server:\r\n\r\n```bash\r\nnpm run dev\r\n# or\r\nyarn dev\r\n# or\r\npnpm dev\r\n# or\r\nbun dev\r\n```\r\n\r\nOpen [http://localhost:3000](http://localhost:3000) with your browser to see the result.\r\n\r\nYou can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.\r\n\r\nThis project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.\r\n\r\n## Learn More\r\n\r\nTo learn more about Next.js, take a look at the following resources:\r\n\r\n- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.\r\n- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.\r\n\r\nYou can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!\r\n\r\n## Deploy on Vercel\r\n\r\nThe easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.\r\n\r\nCheck out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/README.md b/README.md
--- a/README.md	(revision 4c74be27f19335e5b956190fea65a1f797f84875)
+++ b/README.md	(date 1747009942237)
@@ -1,36 +1,92 @@
-This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).
+# ChatterSphere
+
+ChatterSphere is a modern social media platform built with Next.js 14, TypeScript, MongoDB, and Clerk Authentication. It features a Reddit-style feed with Discord-inspired real-time channels, notifications, search functionality, and comprehensive role-based permissions.
+
+## Features
+
+- **Modern UI**: Clean, responsive design with light/dark mode support
+- **Authentication**: Secure user authentication via Clerk
+- **Post Creation**: Rich text editor with media upload support
+- **Communities**: Create and join communities with channels
+- **Real-time Features**: Notifications and messaging
+- **Role-based Access Control**: Admin, Moderator, and Member roles
+- **Responsive Design**: Works on all devices
+
+## Tech Stack
+
+- **Frontend**: Next.js 14 (App Router), TypeScript, Tailwind CSS, Framer Motion
+- **Backend**: Next.js API Routes, MongoDB with Mongoose
+- **Authentication**: Clerk
+- **Storage**: Supabase Storage
+- **Styling**: Tailwind CSS with shadcn/ui components
 
 ## Getting Started
 
-First, run the development server:
+### Prerequisites
+
+- Node.js 18+ and npm
+- MongoDB database
+- Clerk account for authentication
+- Supabase account for storage
+
+### Environment Variables
+
+Create a `.env.local` file in the root directory with the following variables:
+
+```
+# App
+NEXT_PUBLIC_APP_URL=http://localhost:3000
+
+# Clerk Authentication
+NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=your_clerk_publishable_key
+CLERK_SECRET_KEY=your_clerk_secret_key
+
+# MongoDB
+MONGODB_URI=your_mongodb_connection_string
+
+# Supabase Storage
+NEXT_PUBLIC_SUPABASE_URL=your_supabase_url
+NEXT_PUBLIC_SUPABASE_ANON_KEY=your_supabase_anon_key
+SUPABASE_SERVICE_ROLE_KEY=your_supabase_service_role_key
+```
+
+### Installation
+
+1. Clone the repository
+2. Install dependencies:
+
+```bash
+npm install
+```
+
+3. Run the development server:
 
 ```bash
 npm run dev
-# or
-yarn dev
-# or
-pnpm dev
-# or
-bun dev
 ```
 
-Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.
-
-You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.
+4. Open [http://localhost:3000](http://localhost:3000) in your browser
 
-This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.
+### Build for Production
 
-## Learn More
+```bash
+npm run build
+npm run start
+```
 
-To learn more about Next.js, take a look at the following resources:
+## Project Structure
 
-- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
-- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.
+- `src/app`: Next.js App Router pages and layouts
+- `src/components`: Reusable UI components
+- `src/lib`: Utility functions and shared logic
+- `src/models`: Mongoose models for MongoDB
+- `src/context`: React context providers
+- `src/hooks`: Custom React hooks
 
-You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!
+## Contributing
 
-## Deploy on Vercel
+Contributions are welcome! Please feel free to submit a Pull Request.
 
-The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.
+## License
 
-Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.
+This project is licensed under the MIT License.
Index: src/types.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// User types\r\nexport interface User {\r\n  id: string;\r\n  clerkId: string;\r\n  username: string;\r\n  name: string;\r\n  email: string;\r\n  bio?: string;\r\n  image?: string;\r\n  following: string[];\r\n  followers: string[];\r\n  communities: string[];\r\n  followingCount: number;\r\n  followerCount: number;\r\n  communityCount: number;\r\n  isFollowing: boolean;\r\n  createdAt: string;\r\n  updatedAt: string;\r\n}\r\n\r\n// Post types\r\nexport interface Post {\r\n  id: string;\r\n  author: {\r\n    _id: string;\r\n    username: string;\r\n    name: string;\r\n    image?: string;\r\n  };\r\n  content: string;\r\n  community?: {\r\n    _id: string;\r\n    name: string;\r\n    image?: string;\r\n  };\r\n  upvoteCount: number;\r\n  downvoteCount: number;\r\n  voteCount: number;\r\n  commentCount: number;\r\n  isUpvoted: boolean;\r\n  isDownvoted: boolean;\r\n  createdAt: string;\r\n  updatedAt: string;\r\n}\r\n\r\n// Comment types\r\nexport interface Comment {\r\n  id: string;\r\n  author: {\r\n    _id: string;\r\n    username: string;\r\n    name: string;\r\n    image?: string;\r\n  };\r\n  post: string;\r\n  content: string;\r\n  upvoteCount: number;\r\n  downvoteCount: number;\r\n  voteCount: number;\r\n  parentComment?: string;\r\n  createdAt: string;\r\n  updatedAt: string;\r\n}\r\n\r\n// Community types\r\nexport interface Community {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  image?: string;\r\n  creator: {\r\n    _id: string;\r\n    username: string;\r\n    name: string;\r\n    image?: string;\r\n  };\r\n  memberCount: number;\r\n  postCount: number;\r\n  isMember: boolean;\r\n  isModerator: boolean;\r\n  isCreator: boolean;\r\n  createdAt: string;\r\n  updatedAt: string;\r\n}\r\n\r\n// Pagination types\r\nexport interface Pagination {\r\n  page: number;\r\n  limit: number;\r\n  totalItems: number;\r\n  hasMore: boolean;\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/types.ts b/src/types.ts
--- a/src/types.ts	(revision 4c74be27f19335e5b956190fea65a1f797f84875)
+++ b/src/types.ts	(date 1747009942472)
@@ -1,4 +1,20 @@
+// =========================================================================
+//  types.ts — Enhanced Shared Type Definitions for ChatterSphere Community
+// =========================================================================
+
+// Reusable minimal user reference
+import {Permission} from "@/models/Role";
+
+export interface UserRef {
+  id: string;
+  username: string;
+  name: string;
+  image?: string;
+}
+
+// =========================================================================
 // User types
+// =========================================================================
 export interface User {
   id: string;
   clerkId: string;
@@ -14,22 +30,19 @@
   followerCount: number;
   communityCount: number;
   isFollowing: boolean;
-  createdAt: string;
-  updatedAt: string;
+  createdAt: Date;
+  updatedAt: Date;
 }
 
+// =========================================================================
 // Post types
+// =========================================================================
 export interface Post {
   id: string;
-  author: {
-    _id: string;
-    username: string;
-    name: string;
-    image?: string;
-  };
+  author: UserRef;
   content: string;
   community?: {
-    _id: string;
+    id: string;
     name: string;
     image?: string;
   };
@@ -39,51 +52,110 @@
   commentCount: number;
   isUpvoted: boolean;
   isDownvoted: boolean;
-  createdAt: string;
-  updatedAt: string;
+  createdAt: Date;
+  updatedAt: Date;
 }
 
+// =========================================================================
 // Comment types
+// =========================================================================
 export interface Comment {
   id: string;
-  author: {
-    _id: string;
-    username: string;
-    name: string;
-    image?: string;
-  };
-  post: string;
+  author: UserRef;
+  postId: string;
   content: string;
   upvoteCount: number;
   downvoteCount: number;
   voteCount: number;
-  parentComment?: string;
-  createdAt: string;
-  updatedAt: string;
+  parentCommentId?: string;
+  createdAt: Date;
+  updatedAt: Date;
 }
 
+// =========================================================================
 // Community types
+// =========================================================================
 export interface Community {
   id: string;
   name: string;
+  slug: string;
   description: string;
   image?: string;
-  creator: {
-    _id: string;
-    username: string;
-    name: string;
-    image?: string;
-  };
+  creator: UserRef;
   memberCount: number;
   postCount: number;
+  channelCount: number;
+  roleCount: number;
+  channels?: Channel[];
+  roles?: Role[];
+  rules?: string;
   isMember: boolean;
   isModerator: boolean;
   isCreator: boolean;
-  createdAt: string;
-  updatedAt: string;
+  createdAt: Date;
+  updatedAt: Date;
+}
+
+// =========================================================================
+// Channel types
+// =========================================================================
+export interface Channel {
+  id: string;
+  name: string;
+  slug: string;
+  type: 'text' | 'voice';
+  description?: string;
+  communityId: string;
+  position: number;
+  isPrivate: boolean;
+  allowedRoles?: string[];
+  messageCount: number;
+  createdAt: Date;
+  updatedAt: Date;
+}
+
+// =========================================================================
+// Role types
+// =========================================================================
+export interface Role {
+  id: string;
+  name: string;
+  color: string;
+  communityId: string;
+  permissions: Permission[];
+  position: number;
+  isDefault: boolean;
+  createdAt: Date;
+  updatedAt: Date;
+}
+
+// =========================================================================
+// Message types
+// =========================================================================
+export interface ReactionInfo {
+  emoji: string;
+  count: number;
+  hasReacted: boolean;
+}
+
+export interface Message {
+  id: string;
+  content: string;
+  author: UserRef;
+  channelId: string;
+  communityId: string;
+  attachments: string[];
+  mentions: string[];
+  isPinned: boolean;
+  isEdited: boolean;
+  reactions: ReactionInfo[];
+  createdAt: Date;
+  updatedAt: Date;
 }
 
+// =========================================================================
 // Pagination types
+// =========================================================================
 export interface Pagination {
   page: number;
   limit: number;
Index: package.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\r\n  \"name\": \"chattersphere\",\r\n  \"version\": \"0.1.0\",\r\n  \"private\": true,\r\n  \"scripts\": {\r\n    \"dev\": \"next dev\",\r\n    \"build\": \"next build\",\r\n    \"start\": \"next start\",\r\n    \"lint\": \"next lint\",\r\n    \"lint:fix\": \"next lint --fix\",\r\n    \"format\": \"prettier --write \\\"**/*.{js,jsx,ts,tsx,json,md}\\\"\",\r\n    \"format:check\": \"prettier --check \\\"**/*.{js,jsx,ts,tsx,json,md}\\\"\"\r\n  },\r\n  \"dependencies\": {\r\n    \"@clerk/nextjs\": \"^6.16.0\",\r\n    \"@radix-ui/react-avatar\": \"^1.1.7\",\r\n    \"@radix-ui/react-dialog\": \"^1.0.5\",\r\n    \"@radix-ui/react-dropdown-menu\": \"^2.0.6\",\r\n    \"@radix-ui/react-select\": \"^2.0.0\",\r\n    \"@radix-ui/react-slot\": \"^1.2.0\",\r\n    \"@radix-ui/react-tooltip\": \"^1.2.4\",\r\n    \"@splinetool/react-spline\": \"^4.0.0\",\r\n    \"@tailwindcss/typography\": \"^0.5.16\",\r\n    \"class-variance-authority\": \"^0.7.1\",\r\n    \"clsx\": \"^2.1.1\",\r\n    \"date-fns\": \"^3.6.0\",\r\n    \"formik\": \"^2.4.6\",\r\n    \"framer-motion\": \"^12.7.4\",\r\n    \"gsap\": \"^3.12.7\",\r\n    \"isomorphic-dompurify\": \"^2.24.0\",\r\n    \"jest\": \"^29.7.0\",\r\n    \"lucide-react\": \"^0.501.0\",\r\n    \"mongodb\": \"^6.15.0\",\r\n    \"mongoose\": \"^8.13.2\",\r\n    \"next\": \"15.3.1\",\r\n    \"react\": \"^19.0.0\",\r\n    \"react-dom\": \"^19.0.0\",\r\n    \"react-icons\": \"^5.5.0\",\r\n    \"react-markdown\": \"^9.0.1\",\r\n    \"sonner\": \"^2.0.3\",\r\n    \"svix\": \"^1.21.0\",\r\n    \"tailwind-merge\": \"^3.2.0\",\r\n    \"tw-animate-css\": \"^1.2.8\",\r\n    \"yup\": \"^1.6.1\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"@eslint/eslintrc\": \"^3\",\r\n    \"@tailwindcss/postcss\": \"^4\",\r\n    \"@types/node\": \"^20\",\r\n    \"@types/react\": \"^19\",\r\n    \"@types/react-dom\": \"^19\",\r\n    \"autoprefixer\": \"^10.4.21\",\r\n    \"eslint\": \"^9\",\r\n    \"eslint-config-next\": \"15.3.1\",\r\n    \"postcss\": \"^8.5.3\",\r\n    \"prettier\": \"^3.5.3\",\r\n    \"tailwindcss\": \"^4.1.4\",\r\n    \"typescript\": \"^5\"\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/package.json b/package.json
--- a/package.json	(revision 4c74be27f19335e5b956190fea65a1f797f84875)
+++ b/package.json	(date 1747009943308)
@@ -9,39 +9,63 @@
     "lint": "next lint",
     "lint:fix": "next lint --fix",
     "format": "prettier --write \"**/*.{js,jsx,ts,tsx,json,md}\"",
-    "format:check": "prettier --check \"**/*.{js,jsx,ts,tsx,json,md}\""
+    "format:check": "prettier --check \"**/*.{js,jsx,ts,tsx,json,md}\"",
+    "type-check": "tsc --noEmit",
+    "prepare": "npm run lint && npm run type-check"
   },
   "dependencies": {
     "@clerk/nextjs": "^6.16.0",
     "@radix-ui/react-avatar": "^1.1.7",
-    "@radix-ui/react-dialog": "^1.0.5",
-    "@radix-ui/react-dropdown-menu": "^2.0.6",
+    "@radix-ui/react-checkbox": "^1.2.3",
+    "@radix-ui/react-dialog": "^1.1.11",
+    "@radix-ui/react-dropdown-menu": "^2.1.12",
+    "@radix-ui/react-label": "^2.1.4",
+    "@radix-ui/react-radio-group": "^1.3.4",
+    "@radix-ui/react-scroll-area": "^1.2.6",
     "@radix-ui/react-select": "^2.0.0",
+    "@radix-ui/react-separator": "^1.1.4",
     "@radix-ui/react-slot": "^1.2.0",
+    "@radix-ui/react-switch": "^1.2.2",
+    "@radix-ui/react-tabs": "^1.1.9",
     "@radix-ui/react-tooltip": "^1.2.4",
     "@splinetool/react-spline": "^4.0.0",
+    "@supabase/supabase-js": "^2.49.4",
     "@tailwindcss/typography": "^0.5.16",
+    "@tiptap/extension-image": "^2.11.7",
+    "@tiptap/extension-link": "^2.11.7",
+    "@tiptap/extension-text-align": "^2.11.7",
+    "@tiptap/extension-underline": "^2.11.7",
+    "@tiptap/pm": "^2.11.7",
+    "@tiptap/react": "^2.11.7",
+    "@tiptap/starter-kit": "^2.11.7",
+    "@types/dompurify": "^3.0.5",
     "class-variance-authority": "^0.7.1",
     "clsx": "^2.1.1",
     "date-fns": "^3.6.0",
+    "dompurify": "^3.2.5",
     "formik": "^2.4.6",
-    "framer-motion": "^12.7.4",
+    "framer-motion": "^12.9.4",
     "gsap": "^3.12.7",
     "isomorphic-dompurify": "^2.24.0",
     "jest": "^29.7.0",
-    "lucide-react": "^0.501.0",
+    "lucide-react": "^0.507.0",
     "mongodb": "^6.15.0",
     "mongoose": "^8.13.2",
     "next": "15.3.1",
+    "next-themes": "^0.4.6",
     "react": "^19.0.0",
     "react-dom": "^19.0.0",
+    "react-dropzone": "^14.3.8",
     "react-icons": "^5.5.0",
     "react-markdown": "^9.0.1",
+    "slugify": "^1.6.6",
     "sonner": "^2.0.3",
     "svix": "^1.21.0",
     "tailwind-merge": "^3.2.0",
     "tw-animate-css": "^1.2.8",
-    "yup": "^1.6.1"
+    "validator": "^13.15.0",
+    "yup": "^1.6.1",
+    "zod": "^3.24.3"
   },
   "devDependencies": {
     "@eslint/eslintrc": "^3",
@@ -49,6 +73,9 @@
     "@types/node": "^20",
     "@types/react": "^19",
     "@types/react-dom": "^19",
+    "@types/validator": "^13.15.0",
+    "@typescript-eslint/eslint-plugin": "^8.31.1",
+    "@typescript-eslint/parser": "^8.31.1",
     "autoprefixer": "^10.4.21",
     "eslint": "^9",
     "eslint-config-next": "15.3.1",
Index: src/app/(main)/saved/page.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"use client\"\r\n\r\nimport { UnderDevelopment } from \"@/components/under-development\"\r\n\r\nexport default function SavedPage() {\r\n  return (\r\n    <UnderDevelopment \r\n      title=\"Saved Content Feature Coming Soon\" \r\n      description=\"Soon you'll be able to save your favorite posts and content here for easy access. We're working hard to make this feature available!\"\r\n    />\r\n  )\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/app/(main)/saved/page.tsx b/src/app/(main)/saved/page.tsx
--- a/src/app/(main)/saved/page.tsx	(revision 4c74be27f19335e5b956190fea65a1f797f84875)
+++ b/src/app/(main)/saved/page.tsx	(date 1747009943494)
@@ -1,12 +1,51 @@
-"use client"
+"use client";
 
-import { UnderDevelopment } from "@/components/under-development"
+import { motion } from "framer-motion";
+import { useUser } from "@clerk/nextjs";
+import { Bookmark } from "lucide-react";
+import { SavedPostProvider } from "@/context/SavedPostContext";
+import SavedPostFeed from "@/components/saved-post-feed";
 
 export default function SavedPage() {
+  const { isSignedIn } = useUser();
+
   return (
-    <UnderDevelopment 
-      title="Saved Content Feature Coming Soon" 
-      description="Soon you'll be able to save your favorite posts and content here for easy access. We're working hard to make this feature available!"
-    />
-  )
-}
+    <div className="max-w-4xl mx-auto py-8 px-4">
+      <motion.h1
+        className="text-2xl font-bold mb-6"
+        initial={{ opacity: 0, y: -10 }}
+        animate={{ opacity: 1, y: 0 }}
+        transition={{ duration: 0.3 }}
+      >
+        Saved Posts
+      </motion.h1>
+
+      {isSignedIn ? (
+        <SavedPostProvider>
+          <SavedPostFeed emptyMessage={
+            <div className="flex flex-col items-center gap-3">
+              <Bookmark className="h-12 w-12 text-gray-300" />
+              <p>You haven't saved any posts yet</p>
+              <p className="text-sm text-gray-400">
+                Save posts by clicking the bookmark icon to read them later
+              </p>
+            </div>
+          } />
+        </SavedPostProvider>
+      ) : (
+        <motion.div
+          className="bg-white rounded-lg border border-gray-200 p-8 text-center"
+          initial={{ opacity: 0 }}
+          animate={{ opacity: 1 }}
+          transition={{ duration: 0.3, delay: 0.2 }}
+        >
+          <div className="flex flex-col items-center gap-4">
+            <p className="text-gray-500">
+              Sign in to view your saved posts
+            </p>
+          </div>
+        </motion.div>
+      )}
+    </div>
+  );
+}
\ No newline at end of file
Index: src/components/sidebar.tsx
===================================================================
diff --git a/src/components/sidebar.tsx b/src/components/sidebar.tsx
deleted file mode 100644
--- a/src/components/sidebar.tsx	(revision 4c74be27f19335e5b956190fea65a1f797f84875)
+++ /dev/null	(revision 4c74be27f19335e5b956190fea65a1f797f84875)
@@ -1,184 +0,0 @@
-"use client"
-
-import { Home, Compass, TrendingUp, Settings, HelpCircle, Bell, Bookmark, PlusCircle } from "lucide-react"
-import {
-    Sidebar as ShadcnSidebar,
-    SidebarContent,
-    SidebarHeader,
-    SidebarFooter,
-    SidebarMenu,
-    SidebarMenuItem,
-    SidebarMenuButton,
-    SidebarProvider,
-    SidebarTrigger,
-    SidebarSeparator,
-} from "@/components/ui/sidebar"
-import { usePathname } from "next/navigation"
-import { motion } from "framer-motion"
-import { cn } from "@/lib/utils"
-
-export function Sidebar() {
-    const pathname = usePathname()
-
-    const isActive = (path: string) => {
-        return pathname === path
-    }
-
-    return (
-        <SidebarProvider defaultOpen={true}>
-            <ShadcnSidebar className="border-r border-gray-100 shadow-sm">
-                <SidebarHeader className="p-4">
-                    <motion.div
-                        className="flex items-center gap-2"
-                        initial={{ opacity: 0 }}
-                        animate={{ opacity: 1 }}
-                        transition={{ duration: 0.5 }}
-                    >
-                        <div className="h-10 w-10 rounded-full bg-gradient-to-r from-[#00AEEF] to-[#EC4899] flex items-center justify-center shadow-md">
-                            <span className="text-white font-bold text-sm">CS</span>
-                        </div>
-                        <span className="font-semibold text-lg text-gray-800">ChatterSphere</span>
-                    </motion.div>
-                </SidebarHeader>
-
-                <SidebarContent>
-                    <div className="px-4 mb-2">
-                        <h3 className="text-xs font-medium text-gray-500 uppercase tracking-wider">Main</h3>
-                    </div>
-
-                    <SidebarMenu>
-                        <SidebarMenuItem>
-                            <SidebarMenuButton
-                                className={cn(
-                                    "hover:bg-blue-50 hover:text-[#00AEEF] transition-colors",
-                                    isActive("/home") && "bg-blue-50 text-[#00AEEF] font-medium"
-                                )}
-                                onClick={() => window.location.href = "/home"}
-                            >
-                                <Home className="h-5 w-5 mr-3" />
-                                <span>Home</span>
-                            </SidebarMenuButton>
-                        </SidebarMenuItem>
-
-                        <SidebarMenuItem>
-                            <SidebarMenuButton
-                                className={cn(
-                                    "hover:bg-blue-50 hover:text-[#00AEEF] transition-colors",
-                                    isActive("/popular") && "bg-blue-50 text-[#00AEEF] font-medium"
-                                )}
-                                onClick={() => window.location.href = "/popular"}
-                            >
-                                <TrendingUp className="h-5 w-5 mr-3" />
-                                <span>Popular</span>
-                            </SidebarMenuButton>
-                        </SidebarMenuItem>
-
-                        <SidebarMenuItem>
-                            <SidebarMenuButton
-                                className={cn(
-                                    "hover:bg-blue-50 hover:text-[#00AEEF] transition-colors",
-                                    isActive("/explore") && "bg-blue-50 text-[#00AEEF] font-medium"
-                                )}
-                                onClick={() => window.location.href = "/explore"}
-                            >
-                                <Compass className="h-5 w-5 mr-3" />
-                                <span>Explore</span>
-                            </SidebarMenuButton>
-                        </SidebarMenuItem>
-
-                        <SidebarMenuItem>
-                            <SidebarMenuButton
-                                className={cn(
-                                    "hover:bg-blue-50 hover:text-[#00AEEF] transition-colors",
-                                    isActive("/notifications") && "bg-blue-50 text-[#00AEEF] font-medium"
-                                )}
-                                onClick={() => window.location.href = "/notifications"}
-                            >
-                                <Bell className="h-5 w-5 mr-3" />
-                                <span>Notifications</span>
-                            </SidebarMenuButton>
-                        </SidebarMenuItem>
-
-                        <SidebarMenuItem>
-                            <SidebarMenuButton
-                                className={cn(
-                                    "hover:bg-blue-50 hover:text-[#00AEEF] transition-colors",
-                                    isActive("/saved") && "bg-blue-50 text-[#00AEEF] font-medium"
-                                )}
-                                onClick={() => window.location.href = "/saved"}
-                            >
-                                <Bookmark className="h-5 w-5 mr-3" />
-                                <span>Saved</span>
-                            </SidebarMenuButton>
-                        </SidebarMenuItem>
-                    </SidebarMenu>
-
-                    <SidebarSeparator className="my-4" />
-
-                    <div className="px-4 mb-2 flex items-center justify-between">
-                        <h3 className="text-xs font-medium text-gray-500 uppercase tracking-wider">My Communities</h3>
-                        <button className="text-[#00AEEF] hover:text-[#00AEEF]/80 transition-colors">
-                            <PlusCircle className="h-4 w-4" />
-                        </button>
-                    </div>
-
-                    <SidebarMenu>
-                        <SidebarMenuItem>
-                            <SidebarMenuButton className="hover:bg-blue-50 hover:text-[#00AEEF] transition-colors">
-                                <div className="h-5 w-5 rounded-full bg-blue-500 flex items-center justify-center mr-3">
-                                    <span className="text-white text-xs font-bold">W</span>
-                                </div>
-                                <span>WebDev</span>
-                            </SidebarMenuButton>
-                        </SidebarMenuItem>
-
-                        <SidebarMenuItem>
-                            <SidebarMenuButton className="hover:bg-blue-50 hover:text-[#00AEEF] transition-colors">
-                                <div className="h-5 w-5 rounded-full bg-purple-500 flex items-center justify-center mr-3">
-                                    <span className="text-white text-xs font-bold">T</span>
-                                </div>
-                                <span>TechTalk</span>
-                            </SidebarMenuButton>
-                        </SidebarMenuItem>
-
-                        <SidebarMenuItem>
-                            <SidebarMenuButton className="hover:bg-blue-50 hover:text-[#00AEEF] transition-colors">
-                                <div className="h-5 w-5 rounded-full bg-green-500 flex items-center justify-center mr-3">
-                                    <span className="text-white text-xs font-bold">R</span>
-                                </div>
-                                <span>RemoteWork</span>
-                            </SidebarMenuButton>
-                        </SidebarMenuItem>
-                    </SidebarMenu>
-                </SidebarContent>
-
-                <SidebarFooter className="p-4">
-                    <SidebarSeparator className="mb-4" />
-                    <SidebarMenu>
-                        <SidebarMenuItem>
-                            <SidebarMenuButton
-                                className={cn(
-                                    "hover:bg-blue-50 hover:text-[#00AEEF] transition-colors",
-                                    isActive("/admin") && "bg-blue-50 text-[#00AEEF] font-medium"
-                                )}
-                                onClick={() => window.location.href = "/admin"}
-                            >
-                                <Settings className="h-5 w-5 mr-3" />
-                                <span>Admin</span>
-                            </SidebarMenuButton>
-                        </SidebarMenuItem>
-
-                        <SidebarMenuItem>
-                            <SidebarMenuButton className="hover:bg-blue-50 hover:text-[#00AEEF] transition-colors">
-                                <HelpCircle className="h-5 w-5 mr-3" />
-                                <span>Help</span>
-                            </SidebarMenuButton>
-                        </SidebarMenuItem>
-                    </SidebarMenu>
-                </SidebarFooter>
-
-                <SidebarTrigger className="absolute top-4 right-[-12px] z-50 bg-white border border-gray-100 rounded-full shadow-sm" />
-            </ShadcnSidebar>
-        </SidebarProvider>
-    )
-}
Index: src/components/topbar.tsx
===================================================================
diff --git a/src/components/topbar.tsx b/src/components/topbar.tsx
deleted file mode 100644
--- a/src/components/topbar.tsx	(revision 4c74be27f19335e5b956190fea65a1f797f84875)
+++ /dev/null	(revision 4c74be27f19335e5b956190fea65a1f797f84875)
@@ -1,111 +0,0 @@
-"use client"
-
-import { Search, Bell, PlusCircle, Menu, MessageSquare } from "lucide-react"
-import { UserButton } from "@clerk/nextjs"
-import { Button } from "@/components/ui/button"
-import { Input } from "@/components/ui/input"
-import { useState, useEffect } from "react"
-import { motion } from "framer-motion"
-
-export function Topbar() {
-    const [isScrolled, setIsScrolled] = useState(false)
-    const [searchFocused, setSearchFocused] = useState(false)
-
-    // Handle scroll events for shadow effect
-    useEffect(() => {
-        const handleScroll = () => {
-            setIsScrolled(window.scrollY > 10)
-        }
-
-        window.addEventListener('scroll', handleScroll)
-        return () => window.removeEventListener('scroll', handleScroll)
-    }, [])
-
-    return (
-        <motion.div
-            className={`sticky top-0 z-10 h-16 border-b border-gray-100 bg-white px-4 flex items-center justify-between transition-shadow ${isScrolled ? 'shadow-sm' : ''}`}
-            initial={{ y: -100 }}
-            animate={{ y: 0 }}
-            transition={{ type: "spring", stiffness: 300, damping: 30 }}
-        >
-            {/* Mobile Menu Button and Logo */}
-            <div className="flex md:hidden items-center gap-3">
-                <Button variant="ghost" size="icon" className="text-gray-600 hover:text-[#00AEEF] hover:bg-blue-50">
-                    <Menu className="h-5 w-5" />
-                    <span className="sr-only">Menu</span>
-                </Button>
-
-                <div className="h-8 w-8 rounded-full bg-gradient-to-r from-[#00AEEF] to-[#EC4899] flex items-center justify-center shadow-sm">
-                    <span className="text-white font-bold text-sm">CS</span>
-                </div>
-            </div>
-
-            {/* Search Bar */}
-            <div className="hidden md:flex items-center max-w-md w-full mx-auto relative">
-                <Search className={`absolute left-3 h-4 w-4 text-gray-400 transition-colors ${searchFocused ? 'text-[#00AEEF]' : ''}`} />
-                <Input
-                    placeholder="Search ChatterSphere"
-                    className="pl-10 bg-gray-50 border-gray-200 focus-visible:ring-[#00AEEF]/30 focus-visible:ring-offset-0 focus-visible:border-[#00AEEF] transition-all"
-                    onFocus={() => setSearchFocused(true)}
-                    onBlur={() => setSearchFocused(false)}
-                />
-            </div>
-
-            {/* Action Buttons */}
-            <div className="flex items-center gap-3">
-                <div className="relative">
-                    <Button
-                        variant="ghost"
-                        size="icon"
-                        className="rounded-full text-gray-600 hover:text-[#00AEEF] hover:bg-blue-50 transition-colors"
-                        onClick={() => window.location.href = "/notifications"}
-                    >
-                        <Bell className="h-5 w-5" />
-                        <span className="sr-only">Notifications</span>
-                    </Button>
-                    <span className="absolute top-0 right-0 h-2 w-2 rounded-full bg-red-500"></span>
-                </div>
-
-                <div className="relative hidden md:block">
-                    <Button
-                        variant="ghost"
-                        size="icon"
-                        className="rounded-full text-gray-600 hover:text-[#00AEEF] hover:bg-blue-50 transition-colors"
-                    >
-                        <MessageSquare className="h-5 w-5" />
-                        <span className="sr-only">Messages</span>
-                    </Button>
-                    <span className="absolute top-0 right-0 h-2 w-2 rounded-full bg-red-500"></span>
-                </div>
-
-                <Button
-                    variant="ghost"
-                    size="sm"
-                    className="hidden md:flex items-center gap-1 text-gray-600 hover:text-[#00AEEF] hover:bg-blue-50 transition-colors"
-                >
-                    <PlusCircle className="h-4 w-4" />
-                    <span>New Post</span>
-                </Button>
-
-                <Button
-                    variant="ghost"
-                    size="icon"
-                    className="md:hidden rounded-full text-gray-600 hover:text-[#00AEEF] hover:bg-blue-50 transition-colors"
-                >
-                    <PlusCircle className="h-5 w-5" />
-                    <span className="sr-only">New Post</span>
-                </Button>
-
-                {/* Clerk UserButton to replace custom Avatar */}
-                <UserButton
-                    afterSignOutUrl="/"
-                    appearance={{
-                        elements: {
-                            userButtonAvatarBox: "h-9 w-9 border-2 border-white shadow-sm hover:border-[#00AEEF] transition-colors"
-                        }
-                    }}
-                />
-            </div>
-        </motion.div>
-    )
-}
\ No newline at end of file
Index: src/app/api/users/[userId]/communities/route.ts
===================================================================
diff --git a/src/app/api/users/[userId]/communities/route.ts b/src/app/api/users/[userId]/communities/route.ts
deleted file mode 100644
--- a/src/app/api/users/[userId]/communities/route.ts	(revision 4c74be27f19335e5b956190fea65a1f797f84875)
+++ /dev/null	(revision 4c74be27f19335e5b956190fea65a1f797f84875)
@@ -1,36 +0,0 @@
-// src/app/api/users/[userId]/communities/route.ts
-
-import { NextRequest, NextResponse } from "next/server";
-import connectToDatabase from "@/lib/dbConnect";
-import User from "@/models/User";
-import Community from "@/models/Community";
-import type { Types } from "mongoose";
-
-export async function GET(
-    _req: NextRequest,
-    { params }: { params: { userId: string } }
-) {
-    try {
-        await connectToDatabase();
-
-        // 1) Load user
-        const user = await User.findById(params.userId).populate("communities").lean();
-
-        if (!user) {
-            return NextResponse.json({ error: "User not found" }, { status: 404 });
-        }
-
-        // 2) Transform communities
-        const communities = (user.communities as any[]).map((community) => ({
-            id: community._id.toString(),
-            name: community.name,
-            image: community.image || "/placeholder.png",
-            memberCount: community.members.length,
-        }));
-
-        return NextResponse.json({ communities }, { status: 200 });
-    } catch (err) {
-        console.error("[GET /users/[userId]/communities] Error:", err);
-        return NextResponse.json({ error: "Failed to fetch user's communities" }, { status: 500 });
-    }
-}
Index: next.config.ts
===================================================================
diff --git a/next.config.ts b/next.config.ts
deleted file mode 100644
--- a/next.config.ts	(revision 4c74be27f19335e5b956190fea65a1f797f84875)
+++ /dev/null	(revision 4c74be27f19335e5b956190fea65a1f797f84875)
@@ -1,16 +0,0 @@
-import type { NextConfig } from "next";
-
-const nextConfig: NextConfig = {
-  /* config options here */
-    images: {
-        domains: ["img.clerk.com"],
-    },
-    eslint: {
-        ignoreDuringBuilds: true,
-    },
-    typescript: {
-        ignoreBuildErrors: true,
-    },
-};
-
-export default nextConfig;
Index: src/components/right-sidebar.tsx
===================================================================
diff --git a/src/components/right-sidebar.tsx b/src/components/right-sidebar.tsx
deleted file mode 100644
--- a/src/components/right-sidebar.tsx	(revision 4c74be27f19335e5b956190fea65a1f797f84875)
+++ /dev/null	(revision 4c74be27f19335e5b956190fea65a1f797f84875)
@@ -1,165 +0,0 @@
-import { MessageSquare, X, Users, TrendingUp, Calendar } from "lucide-react"
-import { Button } from "@/components/ui/button"
-import { motion } from "framer-motion"
-
-export function RightSidebar() {
-    return (
-        <aside className="hidden lg:block w-80 border-l border-gray-100 bg-white overflow-y-auto p-4 sticky top-16 h-[calc(100vh-4rem)]">
-            {/* Trending Topics */}
-            <div className="mb-6">
-                <div className="flex items-center justify-between mb-3">
-                    <h3 className="text-sm font-semibold text-gray-800">Trending Topics</h3>
-                    <Button variant="ghost" size="sm" className="h-6 px-2 text-xs text-[#00AEEF]">
-                        View All
-                    </Button>
-                </div>
-
-                <div className="space-y-3">
-                    {[
-                        { topic: "Web Development", posts: 128 },
-                        { topic: "AI News", posts: 96 },
-                        { topic: "Remote Work", posts: 84 }
-                    ].map((item, index) => (
-                        <motion.div
-                            key={item.topic}
-                            className="flex items-center gap-3 p-2 rounded-md hover:bg-gray-50 transition-colors"
-                            initial={{ opacity: 0, y: 10 }}
-                            animate={{ opacity: 1, y: 0 }}
-                            transition={{ delay: index * 0.1 }}
-                        >
-                            <div className="flex items-center justify-center h-8 w-8 rounded-full bg-blue-50 text-[#00AEEF]">
-                                <TrendingUp className="h-4 w-4" />
-                            </div>
-                            <div>
-                                <p className="text-sm font-medium text-gray-800">{item.topic}</p>
-                                <p className="text-xs text-gray-500">{item.posts} posts</p>
-                            </div>
-                        </motion.div>
-                    ))}
-                </div>
-            </div>
-
-            {/* Upcoming Events */}
-            <div className="mb-6">
-                <div className="flex items-center justify-between mb-3">
-                    <h3 className="text-sm font-semibold text-gray-800">Upcoming Events</h3>
-                    <Button variant="ghost" size="sm" className="h-6 px-2 text-xs text-[#00AEEF]">
-                        View All
-                    </Button>
-                </div>
-
-                <motion.div
-                    className="bg-gradient-to-r from-[#00AEEF]/10 to-[#EC4899]/10 border border-[#00AEEF]/20 rounded-lg p-4"
-                    initial={{ opacity: 0 }}
-                    animate={{ opacity: 1 }}
-                    transition={{ delay: 0.2 }}
-                >
-                    <div className="flex items-center gap-3 mb-3">
-                        <div className="flex items-center justify-center h-10 w-10 rounded-full bg-white text-[#00AEEF] shadow-sm">
-                            <Calendar className="h-5 w-5" />
-                        </div>
-                        <div>
-                            <p className="text-sm font-medium text-gray-800">Community Meetup</p>
-                            <p className="text-xs text-gray-500">Tomorrow, 7:00 PM</p>
-                        </div>
-                    </div>
-                    <Button size="sm" className="bg-[#00AEEF] hover:bg-[#0099d6] text-white w-full">
-                        RSVP Now
-                    </Button>
-                </motion.div>
-            </div>
-            {/* DMs Section */}
-            <div className="mb-6">
-                <div className="flex items-center justify-between mb-3">
-                    <h3 className="text-sm font-semibold text-gray-800">Direct Messages</h3>
-                    <Button variant="ghost" size="sm" className="h-6 px-2 text-xs text-[#00AEEF]">
-                        View All
-                    </Button>
-                </div>
-
-                <motion.div
-                    className="bg-blue-50 border border-blue-100 rounded-lg p-4 text-center"
-                    whileHover={{ y: -2, boxShadow: "0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)" }}
-                    transition={{ duration: 0.2 }}
-                >
-                    <MessageSquare className="h-8 w-8 text-[#00AEEF] mx-auto mb-2" />
-                    <h4 className="text-sm font-medium text-gray-800 mb-1">Direct Messages</h4>
-                    <p className="text-xs text-gray-600 mb-3">Chat with other members of your communities</p>
-                    <Button size="sm" className="bg-[#00AEEF] hover:bg-[#0099d6] text-white w-full">
-                        Coming Soon
-                    </Button>
-                </motion.div>
-            </div>
-
-            {/* Ads Section */}
-            <div className="mb-6">
-                <div className="flex items-center justify-between mb-3">
-                    <h3 className="text-sm font-semibold text-gray-800">Sponsored</h3>
-                    <Button variant="ghost" size="icon" className="h-6 w-6 text-gray-400 hover:text-gray-600">
-                        <X className="h-4 w-4" />
-                        <span className="sr-only">Dismiss</span>
-                    </Button>
-                </div>
-
-                <motion.div
-                    className="bg-gray-50 border border-gray-100 rounded-lg p-4 text-center overflow-hidden"
-                    whileHover={{ scale: 1.02 }}
-                    transition={{ duration: 0.2 }}
-                >
-                    <div className="bg-gradient-to-r from-blue-100 to-purple-100 h-24 rounded-md mb-3 flex items-center justify-center relative">
-                        <div className="absolute inset-0 bg-white/30 backdrop-blur-sm flex items-center justify-center">
-                            <span className="text-xs font-medium text-gray-600">Ad Placeholder</span>
-                        </div>
-                    </div>
-                    <p className="text-xs text-gray-600 mb-2">Sponsored content will appear here</p>
-                    <Button variant="outline" size="sm" className="text-xs w-full border-gray-200 hover:bg-gray-100 hover:text-gray-800 transition-colors">
-                        Learn More
-                    </Button>
-                </motion.div>
-            </div>
-
-            {/* Communities to Join */}
-            <div>
-                <div className="flex items-center justify-between mb-3">
-                    <h3 className="text-sm font-semibold text-gray-800">Suggested Communities</h3>
-                    <Button variant="ghost" size="sm" className="h-6 px-2 text-xs text-[#00AEEF]">
-                        See More
-                    </Button>
-                </div>
-
-                <div className="space-y-3">
-                    {[
-                        { name: "Photography", members: "12.4k", color: "bg-purple-500" },
-                        { name: "GameDev", members: "8.7k", color: "bg-green-500" },
-                        { name: "BookClub", members: "5.2k", color: "bg-amber-500" }
-                    ].map((community, index) => (
-                        <motion.div
-                            key={community.name}
-                            className="flex items-center justify-between p-2 rounded-md hover:bg-gray-50 transition-colors"
-                            initial={{ opacity: 0, x: 20 }}
-                            animate={{ opacity: 1, x: 0 }}
-                            transition={{ delay: index * 0.1 }}
-                        >
-                            <div className="flex items-center gap-2">
-                                <div className={`h-8 w-8 rounded-full ${community.color} flex items-center justify-center shadow-sm`}>
-                                    <Users className="h-4 w-4 text-white" />
-                                </div>
-                                <div>
-                                    <p className="text-sm font-medium text-gray-800">{community.name}</p>
-                                    <p className="text-xs text-gray-500">{community.members} members</p>
-                                </div>
-                            </div>
-                            <Button
-                                variant="outline"
-                                size="sm"
-                                className="h-7 text-xs border-[#00AEEF] text-[#00AEEF] hover:bg-blue-50"
-                            >
-                                Join
-                            </Button>
-                        </motion.div>
-                    ))}
-                </div>
-            </div>
-        </aside>
-    )
-}
Index: eslint.config.mjs
===================================================================
diff --git a/eslint.config.mjs b/eslint.config.mjs
deleted file mode 100644
--- a/eslint.config.mjs	(revision 4c74be27f19335e5b956190fea65a1f797f84875)
+++ /dev/null	(revision 4c74be27f19335e5b956190fea65a1f797f84875)
@@ -1,16 +0,0 @@
-import { dirname } from "path";
-import { fileURLToPath } from "url";
-import { FlatCompat } from "@eslint/eslintrc";
-
-const __filename = fileURLToPath(import.meta.url);
-const __dirname = dirname(__filename);
-
-const compat = new FlatCompat({
-  baseDirectory: __dirname,
-});
-
-const eslintConfig = [
-  ...compat.extends("next/core-web-vitals", "next/typescript"),
-];
-
-export default eslintConfig;
Index: src/app/api/notifications/route.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/app/api/notifications/route.ts b/src/app/api/notifications/route.ts
new file mode 100644
--- /dev/null	(date 1747009941533)
+++ b/src/app/api/notifications/route.ts	(date 1747009941533)
@@ -0,0 +1,195 @@
+import { NextRequest, NextResponse } from 'next/server';
+import { auth } from '@clerk/nextjs/server';
+import connectToDatabase from '@/lib/dbConnect';
+import User from '@/models/User';
+import Notification from '@/models/Notification';
+import { z } from 'zod';
+
+// Validation schemas
+const PaginationSchema = z.object({
+  page: z.coerce.number().int().min(1).default(1),
+  limit: z.coerce.number().int().min(1).max(50).default(20),
+  type: z.enum(['all', 'unread', 'like', 'comment', 'follow', 'mention', 'role_assigned', 'community_invite', 'message']).optional(),
+});
+
+/**
+ * GET /api/notifications - Get user notifications
+ */
+export async function GET(req: NextRequest) {
+  try {
+    // Authenticate user
+    const { userId } = await auth();
+    if (!userId) {
+      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
+    }
+
+    await connectToDatabase();
+
+    // Find user
+    const user = await User.findOne({ clerkId: userId });
+    if (!user) {
+      return NextResponse.json({ error: 'User not found' }, { status: 404 });
+    }
+
+    // Parse query parameters
+    const url = new URL(req.url);
+    const queryParams = {
+      page: url.searchParams.get('page') ? Number(url.searchParams.get('page')) : undefined,
+      limit: url.searchParams.get('limit') ? Number(url.searchParams.get('limit')) : undefined,
+      type: url.searchParams.get('type') as any,
+    };
+
+    const validatedParams = PaginationSchema.safeParse(queryParams);
+    if (!validatedParams.success) {
+      return NextResponse.json({ 
+        error: 'Invalid query parameters',
+        details: validatedParams.error.format()
+      }, { status: 400 });
+    }
+
+    const { page, limit, type } = validatedParams.data;
+    const skip = (page - 1) * limit;
+
+    // Build query
+    const query: any = { recipient: user._id };
+    if (type && type !== 'all') {
+      if (type === 'unread') {
+        query.read = false;
+      } else {
+        query.type = type;
+      }
+    }
+
+    // Get total count for pagination
+    const totalNotifications = await Notification.countDocuments(query);
+
+    // Get notifications with pagination
+    const notifications = await Notification.find(query)
+      .sort({ createdAt: -1 })
+      .skip(skip)
+      .limit(limit)
+      .populate('sender', 'username name image')
+      .populate('relatedPost', 'content')
+      .populate('relatedComment', 'content')
+      .populate('relatedCommunity', 'name image')
+      .populate('relatedChannel', 'name')
+      .lean();
+
+    // Format response
+    const formattedNotifications = notifications.map(notification => ({
+      id: notification._id.toString(),
+      type: notification.type,
+      content: notification.content,
+      read: notification.read,
+      createdAt: notification.createdAt,
+      sender: notification.sender ? {
+        id: notification.sender._id.toString(),
+        username: notification.sender.username,
+        name: notification.sender.name,
+        image: notification.sender.image
+      } : null,
+      relatedPost: notification.relatedPost ? {
+        id: notification.relatedPost._id.toString(),
+        content: notification.relatedPost.content.substring(0, 100) // Truncate content
+      } : null,
+      relatedComment: notification.relatedComment ? {
+        id: notification.relatedComment._id.toString(),
+        content: notification.relatedComment.content.substring(0, 100) // Truncate content
+      } : null,
+      relatedCommunity: notification.relatedCommunity ? {
+        id: notification.relatedCommunity._id.toString(),
+        name: notification.relatedCommunity.name,
+        image: notification.relatedCommunity.image
+      } : null,
+      relatedChannel: notification.relatedChannel ? {
+        id: notification.relatedChannel._id.toString(),
+        name: notification.relatedChannel.name
+      } : null
+    }));
+
+    // Get unread count
+    const unreadCount = await Notification.countDocuments({ 
+      recipient: user._id,
+      read: false
+    });
+
+    return NextResponse.json({
+      notifications: formattedNotifications,
+      pagination: {
+        page,
+        limit,
+        totalItems: totalNotifications,
+        totalPages: Math.ceil(totalNotifications / limit),
+        hasMore: skip + notifications.length < totalNotifications
+      },
+      unreadCount
+    }, { status: 200 });
+  } catch (error) {
+    console.error('[GET NOTIFICATIONS]', error);
+    return NextResponse.json({ error: 'Failed to fetch notifications' }, { status: 500 });
+  }
+}
+
+/**
+ * PATCH /api/notifications - Mark notifications as read
+ */
+export async function PATCH(req: NextRequest) {
+  try {
+    // Authenticate user
+    const { userId } = await auth();
+    if (!userId) {
+      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
+    }
+
+    await connectToDatabase();
+
+    // Find user
+    const user = await User.findOne({ clerkId: userId });
+    if (!user) {
+      return NextResponse.json({ error: 'User not found' }, { status: 404 });
+    }
+
+    // Parse request body
+    const body = await req.json();
+    const { notificationIds, all = false } = body;
+
+    if (!all && (!notificationIds || !Array.isArray(notificationIds) || notificationIds.length === 0)) {
+      return NextResponse.json({ 
+        error: 'Either provide notificationIds array or set all to true' 
+      }, { status: 400 });
+    }
+
+    // Update notifications
+    if (all) {
+      // Mark all notifications as read
+      await Notification.updateMany(
+        { recipient: user._id, read: false },
+        { read: true }
+      );
+    } else {
+      // Mark specific notifications as read
+      await Notification.updateMany(
+        { 
+          _id: { $in: notificationIds },
+          recipient: user._id
+        },
+        { read: true }
+      );
+    }
+
+    // Get updated unread count
+    const unreadCount = await Notification.countDocuments({ 
+      recipient: user._id,
+      read: false
+    });
+
+    return NextResponse.json({
+      success: true,
+      message: all ? 'All notifications marked as read' : 'Notifications marked as read',
+      unreadCount
+    }, { status: 200 });
+  } catch (error) {
+    console.error('[MARK NOTIFICATIONS READ]', error);
+    return NextResponse.json({ error: 'Failed to mark notifications as read' }, { status: 500 });
+  }
+}
Index: src/context/PostContext.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// src/context/PostContext.tsx\r\n\"use client\";\r\n\r\nimport React, {\r\n    createContext,\r\n    useContext,\r\n    useState,\r\n    useCallback,\r\n    useEffect,\r\n    ReactNode,\r\n} from \"react\";\r\n\r\nexport interface Post {\r\n    id: string;\r\n    author: {\r\n        id: string;\r\n        username: string;\r\n        name: string;\r\n        image?: string;\r\n    };\r\n    content: string;\r\n    community?: {\r\n        id: string;\r\n        name: string;\r\n        image?: string;\r\n    };\r\n    upvoteCount: number;\r\n    downvoteCount: number;\r\n    voteCount: number;\r\n    commentCount: number;\r\n    isUpvoted: boolean;\r\n    isDownvoted: boolean;\r\n    createdAt: string;\r\n    updatedAt: string;\r\n}\r\n\r\ninterface PostContextType {\r\n    posts: Post[];\r\n    loading: boolean;\r\n    error: string | null;\r\n    hasMore: boolean;\r\n    fetchMorePosts: () => Promise<void>;\r\n    createPost: (\r\n        content: string,\r\n        communityId?: string\r\n    ) => Promise<Post | null>;\r\n    votePost: (\r\n        postId: string,\r\n        voteType: \"upvote\" | \"downvote\"\r\n    ) => Promise<void>;\r\n}\r\n\r\nconst PostContext = createContext<PostContextType | undefined>(undefined);\r\n\r\nexport const PostProvider: React.FC<{ children: ReactNode }> = ({\r\n                                                                    children,\r\n                                                                }) => {\r\n    const [posts, setPosts] = useState<Post[]>([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState<string | null>(null);\r\n    const [page, setPage] = useState(1);\r\n    const [hasMore, setHasMore] = useState(true);\r\n\r\n    const fetchPosts = useCallback(\r\n        async (reset = false) => {\r\n            if (!reset && loading) return;\r\n            setLoading(true);\r\n            try {\r\n                const nextPage = reset ? 1 : page;\r\n                console.log(`[PostContext] Fetching posts: page=${nextPage}, limit=10`);\r\n\r\n                const res = await fetch(\r\n                    `/api/posts/feed?page=${nextPage}&limit=10`\r\n                );\r\n\r\n                const data = await res.json().catch((err) => {\r\n                    console.error('[PostContext] Error parsing response:', err);\r\n                    return {};\r\n                });\r\n\r\n                if (!res.ok) {\r\n                    const errorMessage = data.error || `Fetch failed (${res.status})`;\r\n                    const errorDetails = data.details ? `: ${data.details}` : '';\r\n                    console.error(`[PostContext] API error: ${errorMessage}${errorDetails}`);\r\n                    throw new Error(`${errorMessage}${errorDetails}`);\r\n                }\r\n\r\n                console.log(`[PostContext] Fetched ${data.posts?.length || 0} posts`);\r\n\r\n                if (!data.posts || !Array.isArray(data.posts)) {\r\n                    console.error('[PostContext] Invalid response format - posts array missing');\r\n                    throw new Error('Invalid response format');\r\n                }\r\n\r\n                setPosts((prev) =>\r\n                    reset ? data.posts : [...prev, ...data.posts]\r\n                );\r\n                setHasMore(data.pagination?.hasMore || false);\r\n                setPage(reset ? 2 : page + 1);\r\n                setError(null);\r\n            } catch (err) {\r\n                const errorMessage = err instanceof Error ? err.message : \"Unknown error\";\r\n                console.error('[PostContext] Error fetching posts:', errorMessage);\r\n                setError(errorMessage);\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        },\r\n        [page, loading]\r\n    );\r\n\r\n    const fetchMorePosts = useCallback(() => fetchPosts(false), [fetchPosts]);\r\n\r\n    const createPost = useCallback(\r\n        async (content: string, communityId?: string): Promise<Post | null> => {\r\n            setLoading(true);\r\n            setError(null);\r\n            try {\r\n                console.log(`[PostContext] Creating post with content length: ${content.length}${communityId ? `, communityId: ${communityId}` : ''}`);\r\n\r\n                const res = await fetch(\"/api/posts\", {\r\n                    method: \"POST\",\r\n                    headers: { \"Content-Type\": \"application/json\" },\r\n                    body: JSON.stringify({ content, communityId }),\r\n                });\r\n\r\n                const data = await res.json().catch((err) => {\r\n                    console.error('[PostContext] Error parsing response:', err);\r\n                    return {};\r\n                });\r\n\r\n                if (!res.ok) {\r\n                    const errorMessage = data.error || `Failed to create post (${res.status})`;\r\n                    const errorDetails = data.details ? `: ${data.details}` : '';\r\n                    console.error(`[PostContext] API error: ${errorMessage}${errorDetails}`);\r\n                    setError(`${errorMessage}${errorDetails}`);\r\n                    return null;\r\n                }\r\n\r\n                console.log('[PostContext] Post created successfully:', data.post?.id);\r\n                setPosts((prev) => [data.post, ...prev]);\r\n                return data.post;\r\n            } catch (err) {\r\n                const errorMessage = err instanceof Error ? err.message : 'Unknown error creating post';\r\n                console.error('[PostContext] Exception:', errorMessage);\r\n                setError(errorMessage);\r\n                return null;\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        },\r\n        [setError]\r\n    );\r\n\r\n    const votePost = useCallback(\r\n        async (postId: string, voteType: \"upvote\" | \"downvote\") => {\r\n            try {\r\n                const res = await fetch(`/api/posts/${postId}/vote`, {\r\n                    method: \"POST\",\r\n                    headers: { \"Content-Type\": \"application/json\" },\r\n                    body: JSON.stringify({ voteType }),\r\n                });\r\n                const data = await res.json().catch(() => ({}));\r\n                if (!res.ok) throw new Error(data.error || `Vote failed (${res.status})`);\r\n                setPosts((prev) =>\r\n                    prev.map((p) =>\r\n                        p.id === postId\r\n                            ? {\r\n                                ...p,\r\n                                upvoteCount: data.upvoteCount,\r\n                                downvoteCount: data.downvoteCount,\r\n                                voteCount: data.voteCount,\r\n                                isUpvoted: data.isUpvoted,\r\n                                isDownvoted: data.isDownvoted,\r\n                            }\r\n                            : p\r\n                    )\r\n                );\r\n            } catch {\r\n                // swallow vote errors\r\n            }\r\n        },\r\n        []\r\n    );\r\n\r\n    useEffect(() => {\r\n        fetchPosts(true);\r\n    }, [fetchPosts]);\r\n\r\n    return (\r\n        <PostContext.Provider\r\n            value={{\r\n                posts,\r\n                loading,\r\n                error,\r\n                hasMore,\r\n                fetchMorePosts,\r\n                createPost,\r\n                votePost,\r\n            }}\r\n        >\r\n            {children}\r\n        </PostContext.Provider>\r\n    );\r\n};\r\n\r\nexport const usePosts = () => {\r\n    const ctx = useContext(PostContext);\r\n    if (!ctx) {\r\n        throw new Error(\"usePosts must be used within a PostProvider\");\r\n    }\r\n    return ctx;\r\n};
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/context/PostContext.tsx b/src/context/PostContext.tsx
--- a/src/context/PostContext.tsx	(revision 4c74be27f19335e5b956190fea65a1f797f84875)
+++ b/src/context/PostContext.tsx	(date 1747009940042)
@@ -1,4 +1,3 @@
-// src/context/PostContext.tsx
 "use client";
 
 import React, {
@@ -12,24 +11,26 @@
 
 export interface Post {
     id: string;
+    content: string;
+    mediaFiles?: string[];
     author: {
         id: string;
         username: string;
         name: string;
         image?: string;
     };
-    content: string;
     community?: {
         id: string;
         name: string;
-        image?: string;
-    };
+    } | null;
     upvoteCount: number;
     downvoteCount: number;
     voteCount: number;
     commentCount: number;
     isUpvoted: boolean;
     isDownvoted: boolean;
+    isSaved?: boolean;
+    savedCount?: number; // ✅ Added missing field
     createdAt: string;
     updatedAt: string;
 }
@@ -42,19 +43,16 @@
     fetchMorePosts: () => Promise<void>;
     createPost: (
         content: string,
-        communityId?: string
+        communityId?: string,
+        mediaFiles?: string[]
     ) => Promise<Post | null>;
-    votePost: (
-        postId: string,
-        voteType: "upvote" | "downvote"
-    ) => Promise<void>;
+    votePost: (postId: string, voteType: "upvote" | "downvote") => Promise<void>;
+    savePost: (postId: string) => Promise<void>;
 }
 
 const PostContext = createContext<PostContextType | undefined>(undefined);
 
-export const PostProvider: React.FC<{ children: ReactNode }> = ({
-                                                                    children,
-                                                                }) => {
+export const PostProvider: React.FC<{ children: ReactNode, savedOnly?: boolean }> = ({ children, savedOnly = false }) => {
     const [posts, setPosts] = useState<Post[]>([]);
     const [loading, setLoading] = useState(true);
     const [error, setError] = useState<string | null>(null);
@@ -67,89 +65,62 @@
             setLoading(true);
             try {
                 const nextPage = reset ? 1 : page;
-                console.log(`[PostContext] Fetching posts: page=${nextPage}, limit=10`);
 
-                const res = await fetch(
-                    `/api/posts/feed?page=${nextPage}&limit=10`
-                );
+                // Determine which endpoint to use based on savedOnly prop
+                const endpoint = savedOnly
+                    ? `/api/bookmarks?page=${nextPage}&limit=10`
+                    : `/api/posts/feed?page=${nextPage}&limit=10`;
 
-                const data = await res.json().catch((err) => {
-                    console.error('[PostContext] Error parsing response:', err);
-                    return {};
-                });
+                const res = await fetch(endpoint);
+                const data = await res.json();
 
                 if (!res.ok) {
-                    const errorMessage = data.error || `Fetch failed (${res.status})`;
-                    const errorDetails = data.details ? `: ${data.details}` : '';
-                    console.error(`[PostContext] API error: ${errorMessage}${errorDetails}`);
-                    throw new Error(`${errorMessage}${errorDetails}`);
+                    throw new Error(data.error || "Failed to fetch posts");
                 }
 
-                console.log(`[PostContext] Fetched ${data.posts?.length || 0} posts`);
-
-                if (!data.posts || !Array.isArray(data.posts)) {
-                    console.error('[PostContext] Invalid response format - posts array missing');
-                    throw new Error('Invalid response format');
-                }
-
-                setPosts((prev) =>
-                    reset ? data.posts : [...prev, ...data.posts]
-                );
+                setPosts((prev) => (reset ? data.posts : [...prev, ...data.posts]));
                 setHasMore(data.pagination?.hasMore || false);
                 setPage(reset ? 2 : page + 1);
                 setError(null);
             } catch (err) {
                 const errorMessage = err instanceof Error ? err.message : "Unknown error";
-                console.error('[PostContext] Error fetching posts:', errorMessage);
                 setError(errorMessage);
             } finally {
                 setLoading(false);
             }
         },
-        [page, loading]
+        [page, loading, savedOnly]
     );
 
     const fetchMorePosts = useCallback(() => fetchPosts(false), [fetchPosts]);
 
     const createPost = useCallback(
-        async (content: string, communityId?: string): Promise<Post | null> => {
+        async (content: string, communityId?: string, mediaFiles?: string[]): Promise<Post | null> => {
             setLoading(true);
             setError(null);
             try {
-                console.log(`[PostContext] Creating post with content length: ${content.length}${communityId ? `, communityId: ${communityId}` : ''}`);
-
                 const res = await fetch("/api/posts", {
                     method: "POST",
                     headers: { "Content-Type": "application/json" },
-                    body: JSON.stringify({ content, communityId }),
+                    body: JSON.stringify({ content, communityId, mediaFiles }),
                 });
-
-                const data = await res.json().catch((err) => {
-                    console.error('[PostContext] Error parsing response:', err);
-                    return {};
-                });
+                const data = await res.json();
 
                 if (!res.ok) {
-                    const errorMessage = data.error || `Failed to create post (${res.status})`;
-                    const errorDetails = data.details ? `: ${data.details}` : '';
-                    console.error(`[PostContext] API error: ${errorMessage}${errorDetails}`);
-                    setError(`${errorMessage}${errorDetails}`);
-                    return null;
+                    throw new Error(data.error || "Failed to create post");
                 }
 
-                console.log('[PostContext] Post created successfully:', data.post?.id);
                 setPosts((prev) => [data.post, ...prev]);
                 return data.post;
             } catch (err) {
-                const errorMessage = err instanceof Error ? err.message : 'Unknown error creating post';
-                console.error('[PostContext] Exception:', errorMessage);
+                const errorMessage = err instanceof Error ? err.message : "Unknown error creating post";
                 setError(errorMessage);
                 return null;
             } finally {
                 setLoading(false);
             }
         },
-        [setError]
+        []
     );
 
     const votePost = useCallback(
@@ -160,8 +131,10 @@
                     headers: { "Content-Type": "application/json" },
                     body: JSON.stringify({ voteType }),
                 });
-                const data = await res.json().catch(() => ({}));
-                if (!res.ok) throw new Error(data.error || `Vote failed (${res.status})`);
+                const data = await res.json();
+
+                if (!res.ok) throw new Error(data.error || "Failed to vote");
+
                 setPosts((prev) =>
                     prev.map((p) =>
                         p.id === postId
@@ -176,15 +149,71 @@
                             : p
                     )
                 );
-            } catch {
-                // swallow vote errors
+            } catch (error) {
+                console.error("[PostContext] Vote error:", error);
+            }
+        },
+        []
+    );
+
+    const savePost = useCallback(
+        async (postId: string) => {
+            try {
+                // Optimistic Update
+                setPosts((prev) =>
+                    prev.map((p) =>
+                        p.id === postId
+                            ? {
+                                ...p,
+                                isSaved: !p.isSaved,
+                                savedCount: p.isSaved ? (p.savedCount || 1) - 1 : (p.savedCount || 0) + 1,
+                            }
+                            : p
+                    )
+                );
+
+                const res = await fetch(`/api/bookmarks/${postId}`, {
+                    method: "POST",
+                    headers: { "Content-Type": "application/json" },
+                });
+                const data = await res.json();
+
+                if (!res.ok) throw new Error(data.error || "Failed to save");
+
+                setPosts((prev) =>
+                    prev.map((p) =>
+                        p.id === postId
+                            ? {
+                                ...p,
+                                isSaved: data.isSaved,
+                                savedCount: data.savedCount,
+                            }
+                            : p
+                    )
+                );
+            } catch (error) {
+                console.error("[PostContext] Save error:", error);
+                // Revert on error
+                setPosts((prev) =>
+                    prev.map((p) =>
+                        p.id === postId
+                            ? {
+                                ...p,
+                                isSaved: !p.isSaved,
+                                savedCount: p.isSaved ? (p.savedCount || 0) - 1 : (p.savedCount || 1) + 1,
+                            }
+                            : p
+                    )
+                );
             }
         },
         []
     );
 
     useEffect(() => {
-        fetchPosts(true);
+        (async () => {
+            await fetchPosts(true);
+        })();
     }, [fetchPosts]);
 
     return (
@@ -197,6 +226,7 @@
                 fetchMorePosts,
                 createPost,
                 votePost,
+                savePost,
             }}
         >
             {children}
@@ -210,4 +240,4 @@
         throw new Error("usePosts must be used within a PostProvider");
     }
     return ctx;
-};
\ No newline at end of file
+};
Index: src/components/ui/radio-group.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/ui/radio-group.tsx b/src/components/ui/radio-group.tsx
new file mode 100644
--- /dev/null	(date 1747009941554)
+++ b/src/components/ui/radio-group.tsx	(date 1747009941554)
@@ -0,0 +1,44 @@
+"use client"
+
+import * as React from "react"
+import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
+import { Circle } from "lucide-react"
+
+import { cn } from "@/lib/utils"
+
+const RadioGroup = React.forwardRef<
+  React.ElementRef<typeof RadioGroupPrimitive.Root>,
+  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
+>(({ className, ...props }, ref) => {
+  return (
+    <RadioGroupPrimitive.Root
+      className={cn("grid gap-2", className)}
+      {...props}
+      ref={ref}
+    />
+  )
+})
+RadioGroup.displayName = RadioGroupPrimitive.Root.displayName
+
+const RadioGroupItem = React.forwardRef<
+  React.ElementRef<typeof RadioGroupPrimitive.Item>,
+  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
+>(({ className, ...props }, ref) => {
+  return (
+    <RadioGroupPrimitive.Item
+      ref={ref}
+      className={cn(
+        "aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
+        className
+      )}
+      {...props}
+    >
+      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
+        <Circle className="h-2.5 w-2.5 fill-current text-current" />
+      </RadioGroupPrimitive.Indicator>
+    </RadioGroupPrimitive.Item>
+  )
+})
+RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName
+
+export { RadioGroup, RadioGroupItem }
Index: src/components/ui/label.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/ui/label.tsx b/src/components/ui/label.tsx
new file mode 100644
--- /dev/null	(date 1747009941502)
+++ b/src/components/ui/label.tsx	(date 1747009941502)
@@ -0,0 +1,26 @@
+"use client"
+
+import * as React from "react"
+import * as LabelPrimitive from "@radix-ui/react-label"
+import { cva, type VariantProps } from "class-variance-authority"
+
+import { cn } from "@/lib/utils"
+
+const labelVariants = cva(
+  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
+)
+
+const Label = React.forwardRef<
+  React.ElementRef<typeof LabelPrimitive.Root>,
+  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
+    VariantProps<typeof labelVariants>
+>(({ className, ...props }, ref) => (
+  <LabelPrimitive.Root
+    ref={ref}
+    className={cn(labelVariants(), className)}
+    {...props}
+  />
+))
+Label.displayName = LabelPrimitive.Root.displayName
+
+export { Label }
Index: src/app/api/communities/[communityId]/channels/route.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/app/api/communities/[communityId]/channels/route.ts b/src/app/api/communities/[communityId]/channels/route.ts
new file mode 100644
--- /dev/null	(date 1747009941628)
+++ b/src/app/api/communities/[communityId]/channels/route.ts	(date 1747009941628)
@@ -0,0 +1,134 @@
+import { NextRequest, NextResponse } from 'next/server';
+import { auth } from '@clerk/nextjs/server';
+import connectToDatabase from '@/lib/dbConnect';
+import Community from '@/models/Community';
+import Channel from '@/models/Channel';
+import Membership from '@/models/Membership';
+import { z } from 'zod';
+import slugify from 'slugify';
+import { Types } from 'mongoose';
+
+// Zod schema for channel creation
+const CreateChannelSchema = z.object({
+  name: z.string().min(1).max(100),
+  type: z.enum(['text', 'voice']),
+  description: z.string().max(1000).optional(),
+  isPrivate: z.boolean().optional(),
+});
+
+// GET /api/communities/[communityId]/channels
+export async function GET(
+  req: NextRequest,
+  { params }: { params: { communityId: string } }
+) {
+  const { communityId } = params;
+  try {
+    const { userId } = await auth();
+    if (!userId) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
+
+    await connectToDatabase();
+
+    // Validate community exists
+    const community = await Community.findById(communityId);
+    if (!community) return NextResponse.json({ error: 'Community not found' }, { status: 404 });
+
+    // Check membership via Membership model
+    const membership = await Membership.findOne({ community: community._id, user: userId });
+    if (!membership) return NextResponse.json({ error: 'Not a community member' }, { status: 403 });
+
+    // Fetch channels, sorted
+    const channels = await Channel.find({ community: community._id })
+      .sort({ position: 1 })
+      .lean();
+
+    const formatted = channels.map((c) => ({
+      id: (c._id as Types.ObjectId).toString(),
+      name: c.name,
+      slug: c.slug,
+      type: c.type,
+      description: c.description,
+      position: c.position,
+      isPrivate: c.isPrivate,
+      messageCount: c.messageCount || 0,
+    }));
+
+    return NextResponse.json({ channels: formatted });
+  } catch (err) {
+    console.error('GET CHANNELS ERROR', err);
+    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });
+  }
+}
+
+// POST /api/communities/[communityId]/channels
+export async function POST(
+  req: NextRequest,
+  { params }: { params: { communityId: string } }
+) {
+  const { communityId } = params;
+  try {
+    const { userId } = await auth();
+    if (!userId) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
+
+    await connectToDatabase();
+
+    // Parse and validate input
+    const body = await req.json();
+    const parsed = CreateChannelSchema.safeParse(body);
+    if (!parsed.success) {
+      return NextResponse.json({ error: parsed.error.flatten() }, { status: 400 });
+    }
+    const { name, type, description, isPrivate = false } = parsed.data;
+
+    // Validate community
+    const community = await Community.findById(communityId);
+    if (!community) return NextResponse.json({ error: 'Community not found' }, { status: 404 });
+
+    // Check permissions: only admins or moderators
+    const membership = await Membership.findOne({ community: community._id, user: userId });
+    if (!membership) return NextResponse.json({ error: 'Not a community member' }, { status: 403 });
+
+    const hasManageChannels = await membership.hasPermission('MANAGE_CHANNELS');
+    const isCreator = community.creator.equals(userId);
+    if (!hasManageChannels && !isCreator) {
+      return NextResponse.json({ error: 'Forbidden' }, { status: 403 });
+    }
+
+    // Generate slug and ensure uniqueness
+    const slug = slugify(name, { lower: true, strict: true });
+    const existing = await Channel.findOne({ community: community._id, slug });
+    if (existing) {
+      return NextResponse.json({ error: 'Channel slug exists' }, { status: 400 });
+    }
+
+    // Determine position
+    const last = await Channel.findOne({ community: community._id }).sort({ position: -1 });
+    const position = last ? last.position + 1 : 0;
+
+    // Create channel
+    const channel = await Channel.create({
+      name,
+      slug,
+      type,
+      description,
+      community: community._id,
+      position,
+      isPrivate,
+    });
+
+    const response = {
+      id: channel._id.toString(),
+      name: channel.name,
+      slug: channel.slug,
+      type: channel.type,
+      description: channel.description,
+      position: channel.position,
+      isPrivate: channel.isPrivate,
+      messageCount: 0,
+    };
+
+    return NextResponse.json({ channel: response }, { status: 201 });
+  } catch (err) {
+    console.error('CREATE CHANNEL ERROR', err);
+    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });
+  }
+}
\ No newline at end of file
Index: src/lib/README-supabase.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lib/README-supabase.md b/src/lib/README-supabase.md
new file mode 100644
--- /dev/null	(date 1747009941571)
+++ b/src/lib/README-supabase.md	(date 1747009941571)
@@ -0,0 +1,121 @@
+# Supabase Storage Integration for ChatterSphere
+
+This document explains how to use the Supabase Storage integration for uploading avatars and media files in ChatterSphere.
+
+## Setup
+
+1. Make sure you have the following environment variables set in your `.env.local` file:
+
+```
+NEXT_PUBLIC_SUPABASE_URL=your_supabase_url
+NEXT_PUBLIC_SUPABASE_ANON_KEY=your_supabase_anon_key
+```
+
+2. Create two buckets in your Supabase project:
+   - `avatars` - for profile pictures
+   - `media` - for post media (images and videos)
+
+3. Configure the buckets to allow public access (or set up RLS policies as needed)
+
+## Components
+
+### UploadAvatar
+
+The `UploadAvatar` component allows users to upload and preview their profile pictures.
+
+```tsx
+import UploadAvatar from "@/components/upload-avatar";
+
+// In your component:
+const [imageUrl, setImageUrl] = useState("");
+
+// ...
+
+<UploadAvatar
+  currentUrl={imageUrl}
+  onUpload={setImageUrl}
+  username="username"
+  name="User Name"
+/>
+```
+
+### UploadMedia
+
+The `UploadMedia` component allows users to upload media files for posts.
+
+```tsx
+import UploadMedia from "@/components/upload-media";
+
+// In your component:
+const [mediaFiles, setMediaFiles] = useState<string[]>([]);
+
+const handleUpload = (url: string) => {
+  setMediaFiles((prev) => [...prev, url]);
+};
+
+const handleRemove = (url: string) => {
+  setMediaFiles((prev) => prev.filter((item) => item !== url));
+};
+
+// ...
+
+<UploadMedia
+  onUpload={handleUpload}
+  onRemove={handleRemove}
+  uploadedFiles={mediaFiles}
+  maxFiles={4}
+/>
+```
+
+## Utility Functions
+
+### uploadAvatarToSupabase
+
+Uploads an avatar image to the `avatars` bucket in Supabase Storage.
+
+```tsx
+import { uploadAvatarToSupabase } from "@/lib/supabase-upload";
+
+// In your component:
+const handleFileUpload = async (file: File) => {
+  try {
+    const url = await uploadAvatarToSupabase(file);
+    // Use the URL...
+  } catch (error) {
+    console.error("Upload error:", error);
+  }
+};
+```
+
+### uploadMediaToSupabase
+
+Uploads a media file (image or video) to the `media` bucket in Supabase Storage.
+
+```tsx
+import { uploadMediaToSupabase } from "@/lib/supabase-upload";
+
+// In your component:
+const handleFileUpload = async (file: File) => {
+  try {
+    const url = await uploadMediaToSupabase(file);
+    // Use the URL...
+  } catch (error) {
+    console.error("Upload error:", error);
+  }
+};
+```
+
+## Integration with RichTextEditor
+
+The `RichTextEditor` component has been updated to use Supabase Storage for image uploads. When a user inserts an image in the editor, it will be uploaded to the `media` bucket and the URL will be inserted into the editor.
+
+## File Validation
+
+Both upload functions include validation for:
+
+- File type (only images for avatars, images and videos for media)
+- File size (5MB for avatars, 10MB for images, 50MB for videos)
+
+## Error Handling
+
+All upload functions include proper error handling and will throw descriptive error messages that can be displayed to the user.
Index: src/utils/notificationUtils.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/utils/notificationUtils.ts b/src/utils/notificationUtils.ts
new file mode 100644
--- /dev/null	(date 1747009941600)
+++ b/src/utils/notificationUtils.ts	(date 1747009941600)
@@ -0,0 +1,116 @@
+import { Types } from 'mongoose';
+import Notification, { NotificationType } from '@/models/Notification';
+import User from '@/models/User';
+
+interface CreateNotificationParams {
+  recipientId: Types.ObjectId;
+  senderId: Types.ObjectId;
+  type: NotificationType;
+  content: string;
+  relatedPostId?: Types.ObjectId;
+  relatedCommentId?: Types.ObjectId;
+  relatedCommunityId?: Types.ObjectId;
+  relatedChannelId?: Types.ObjectId;
+  relatedMessageId?: Types.ObjectId;
+}
+
+/**
+ * Create a new notification
+ */
+export async function createNotification({
+  recipientId,
+  senderId,
+  type,
+  content,
+  relatedPostId,
+  relatedCommentId,
+  relatedCommunityId,
+  relatedChannelId,
+  relatedMessageId
+}: CreateNotificationParams): Promise<void> {
+  try {
+    // Don't notify yourself
+    if (recipientId.equals(senderId)) {
+      return;
+    }
+
+    // Create notification
+    await Notification.create({
+      recipient: recipientId,
+      sender: senderId,
+      type,
+      content,
+      relatedPost: relatedPostId,
+      relatedComment: relatedCommentId,
+      relatedCommunity: relatedCommunityId,
+      relatedChannel: relatedChannelId,
+      relatedMessage: relatedMessageId,
+      read: false
+    });
+  } catch (error) {
+    console.error('[CREATE NOTIFICATION ERROR]:', error);
+  }
+}
+
+/**
+ * Get unread notification count for a user
+ */
+export async function getUnreadNotificationCount(clerkId: string): Promise<number> {
+  try {
+    const user = await User.findOne({ clerkId }).select('_id');
+    if (!user) return 0;
+
+    return Notification.countDocuments({
+      recipient: user._id,
+      read: false
+    });
+  } catch (error) {
+    console.error('[GET UNREAD NOTIFICATION COUNT ERROR]:', error);
+    return 0;
+  }
+}
+
+/**
+ * Mark all notifications as read for a user
+ */
+export async function markAllNotificationsAsRead(clerkId: string): Promise<void> {
+  try {
+    const user = await User.findOne({ clerkId }).select('_id');
+    if (!user) return;
+
+    await Notification.updateMany(
+      { recipient: user._id, read: false },
+      { read: true }
+    );
+  } catch (error) {
+    console.error('[MARK ALL NOTIFICATIONS READ ERROR]:', error);
+  }
+}
+
+/**
+ * Generate notification content based on type
+ */
+export function generateNotificationContent(
+  type: NotificationType,
+  senderName: string,
+  extraInfo?: string
+): string {
+  switch (type) {
+    case 'like':
+      return `${senderName} liked your post${extraInfo ? `: "${extraInfo}"` : ''}`;
+    case 'comment':
+      return `${senderName} commented on your post${extraInfo ? `: "${extraInfo}"` : ''}`;
+    case 'follow':
+      return `${senderName} started following you`;
+    case 'mention':
+      return `${senderName} mentioned you${extraInfo ? ` in ${extraInfo}` : ''}`;
+    case 'role_assigned':
+      return `${senderName} assigned you a new role${extraInfo ? ` in ${extraInfo}` : ''}`;
+    case 'community_invite':
+      return `${senderName} invited you to join ${extraInfo}`;
+    case 'message':
+      return `${senderName} sent you a message${extraInfo ? `: "${extraInfo}"` : ''}`;
+    default:
+      return `${senderName} interacted with your content`;
+  }
+}
Index: src/components/create-post-form.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// src/components/create-post-form.tsx\r\n\"use client\";\r\n\r\nimport { useState, useRef, useEffect } from \"react\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Community } from \"@/context/CommunityContext\";\r\nimport {\r\n  Select,\r\n  SelectTrigger,\r\n  SelectValue,\r\n  SelectContent,\r\n  SelectItem,\r\n} from \"@/components/ui/select\";\r\nimport { usePosts } from \"@/context/PostContext\";\r\nimport { useAuth } from \"@clerk/nextjs\";\r\nimport { motion, AnimatePresence } from \"framer-motion\";\r\nimport { Send, X, Loader2 } from \"lucide-react\";\r\nimport PostEditor from \"./post-editor\";\r\nimport { toast } from \"sonner\";\r\n\r\ninterface CreatePostFormProps {\r\n  communities?: Community[];\r\n  onSuccess?: () => void;\r\n}\r\n\r\nexport default function CreatePostForm({\r\n                                         communities = [],\r\n                                         onSuccess,\r\n                                       }: CreatePostFormProps) {\r\n  const [content, setContent] = useState(\"\");\r\n  const [communityId, setCommunityId] = useState(\"\");\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const [isExpanded, setIsExpanded] = useState(false);\r\n  const formRef = useRef<HTMLDivElement>(null);\r\n  const { createPost, error } = usePosts();\r\n  const { isSignedIn, userId } = useAuth();\r\n\r\n  // Collapse editor when clicking outside if there's no content\r\n  useEffect(() => {\r\n    const onClick = (e: MouseEvent) => {\r\n      if (\r\n          formRef.current &&\r\n          !formRef.current.contains(e.target as Node) &&\r\n          isExpanded &&\r\n          !content.trim()\r\n      ) {\r\n        setIsExpanded(false);\r\n      }\r\n    };\r\n    document.addEventListener(\"mousedown\", onClick);\r\n    return () => document.removeEventListener(\"mousedown\", onClick);\r\n  }, [isExpanded, content]);\r\n\r\n  // Reset state when collapsed\r\n  useEffect(() => {\r\n    if (!isExpanded) {\r\n      setContent(\"\");\r\n      setCommunityId(\"\");\r\n    }\r\n  }, [isExpanded]);\r\n\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    if (!isSignedIn) {\r\n      toast.error(\"Please sign in to create a post\");\r\n      return;\r\n    }\r\n\r\n    const trimmed = content.trim();\r\n    if (!trimmed) {\r\n      toast.error(\"Post content cannot be empty\");\r\n      return;\r\n    }\r\n\r\n    const MAX = 50000;\r\n    if (trimmed.length > MAX) {\r\n      toast.error(\r\n          `Post too large (${trimmed.length.toLocaleString()} chars). Keep under ${MAX.toLocaleString()}.`\r\n      );\r\n      return;\r\n    }\r\n\r\n    if (trimmed.includes(\"<script\") || trimmed.includes(\"javascript:\")) {\r\n      toast.error(\"Post contains potentially unsafe content\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setIsSubmitting(true);\r\n      console.log(`[CreatePostForm] Submitting post with userId: ${userId}, content length: ${trimmed.length}`);\r\n\r\n      const post = await createPost(trimmed, communityId || undefined);\r\n\r\n      if (!post) {\r\n        if (error) {\r\n          toast.error(`Error: ${error}`);\r\n          console.error(`[CreatePostForm] Post creation failed with error: ${error}`);\r\n        } else {\r\n          toast.error(\"Unable to create post. Please try again.\");\r\n          console.error('[CreatePostForm] Post creation failed without specific error');\r\n        }\r\n        return;\r\n      }\r\n\r\n      console.log(`[CreatePostForm] Post created successfully with ID: ${post.id}`);\r\n      toast.success(\"Post created successfully!\");\r\n      setIsExpanded(false);\r\n      setContent(\"\");\r\n      onSuccess?.();\r\n    } catch (err) {\r\n      const errorMessage = err instanceof Error ? err.message : \"An unexpected error occurred\";\r\n      console.error(`[CreatePostForm] Exception during post creation: ${errorMessage}`);\r\n      toast.error(errorMessage);\r\n    } finally {\r\n      setIsSubmitting(false);\r\n    }\r\n  };\r\n\r\n  if (!isSignedIn) {\r\n    return (\r\n        <div className=\"bg-white rounded-lg border border-gray-100 p-4 mb-6 text-center\">\r\n          <p className=\"text-gray-600 mb-3\">Sign in to create a post</p>\r\n          <Button>Sign In</Button>\r\n        </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n      <motion.div\r\n          ref={formRef}\r\n          className=\"bg-white rounded-lg border border-gray-100 overflow-hidden mb-6 transition-shadow hover:shadow-md\"\r\n          initial={{ opacity: 0, y: 20 }}\r\n          animate={{ opacity: 1, y: 0 }}\r\n          transition={{ duration: 0.3 }}\r\n      >\r\n        <form onSubmit={handleSubmit} className=\"p-4\">\r\n          <div\r\n              className=\"relative cursor-text\"\r\n              onClick={() => !isExpanded && setIsExpanded(true)}\r\n          >\r\n            {isExpanded ? (\r\n                <PostEditor\r\n                    value={content}\r\n                    onChangeAction={setContent}\r\n                    placeholder=\"What's on your mind?\"\r\n                    minHeight=\"120px\"\r\n                />\r\n            ) : (\r\n                <div className=\"h-12 px-3 py-2 border border-gray-200 rounded-md text-gray-500 flex items-center\">\r\n                  What&#39;s on your mind?\r\n                </div>\r\n            )}\r\n\r\n            <AnimatePresence>\r\n              {isExpanded && (\r\n                  <motion.button\r\n                      type=\"button\"\r\n                      className=\"absolute top-2 right-2 text-gray-400 hover:text-gray-600\"\r\n                      onClick={() => setIsExpanded(false)}\r\n                      initial={{ opacity: 0, scale: 0.8 }}\r\n                      animate={{ opacity: 1, scale: 1 }}\r\n                      exit={{ opacity: 0, scale: 0.8 }}\r\n                  >\r\n                    <X className=\"h-4 w-4\" />\r\n                  </motion.button>\r\n              )}\r\n            </AnimatePresence>\r\n          </div>\r\n\r\n          <AnimatePresence>\r\n            {isExpanded && (\r\n                <motion.div\r\n                    className=\"mt-4 flex flex-col sm:flex-row items-center justify-between gap-3\"\r\n                    initial={{ opacity: 0, height: 0 }}\r\n                    animate={{ opacity: 1, height: \"auto\" }}\r\n                    exit={{ opacity: 0, height: 0 }}\r\n                    transition={{ duration: 0.2 }}\r\n                >\r\n                  {communities.length > 0 && (\r\n                      <Select value={communityId} onValueChange={setCommunityId}>\r\n                        <SelectTrigger className=\"w-full sm:w-48\">\r\n                          <SelectValue placeholder=\"Select community\" />\r\n                        </SelectTrigger>\r\n                        <SelectContent>\r\n                          <SelectItem value=\"\">Personal post</SelectItem>\r\n                          {communities.map((c) => (\r\n                              <SelectItem key={c.id} value={c.id}>\r\n                                {c.name}\r\n                              </SelectItem>\r\n                          ))}\r\n                        </SelectContent>\r\n                      </Select>\r\n                  )}\r\n\r\n                  <Button\r\n                      type=\"submit\"\r\n                      disabled={isSubmitting || !content.trim()}\r\n                      className=\"w-full sm:w-auto bg-[#00AEEF] hover:bg-[#00AEEF]/90 text-white\"\r\n                  >\r\n                    {isSubmitting ? (\r\n                        <>\r\n                          <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\r\n                          Posting...\r\n                        </>\r\n                    ) : (\r\n                        <>\r\n                          Post\r\n                          <Send className=\"ml-2 h-4 w-4\" />\r\n                        </>\r\n                    )}\r\n                  </Button>\r\n                </motion.div>\r\n            )}\r\n          </AnimatePresence>\r\n        </form>\r\n      </motion.div>\r\n  );\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/create-post-form.tsx b/src/components/create-post-form.tsx
--- a/src/components/create-post-form.tsx	(revision 4c74be27f19335e5b956190fea65a1f797f84875)
+++ b/src/components/create-post-form.tsx	(date 1747009940088)
@@ -1,4 +1,3 @@
-// src/components/create-post-form.tsx
 "use client";
 
 import { useState, useRef, useEffect } from "react";
@@ -15,7 +14,8 @@
 import { useAuth } from "@clerk/nextjs";
 import { motion, AnimatePresence } from "framer-motion";
 import { Send, X, Loader2 } from "lucide-react";
-import PostEditor from "./post-editor";
+import Image from "next/image";
+import RichTextEditor from "@/components/rich-text-editor";
 import { toast } from "sonner";
 
 interface CreatePostFormProps {
@@ -31,11 +31,12 @@
   const [communityId, setCommunityId] = useState("");
   const [isSubmitting, setIsSubmitting] = useState(false);
   const [isExpanded, setIsExpanded] = useState(false);
+  const [mediaFiles, setMediaFiles] = useState<string[]>([]);
   const formRef = useRef<HTMLDivElement>(null);
-  const { createPost, error } = usePosts();
-  const { isSignedIn, userId } = useAuth();
+  const { createPost } = usePosts();
+  const { isSignedIn} = useAuth();
 
-  // Collapse editor when clicking outside if there's no content
+  // Collapse editor when clicking outside
   useEffect(() => {
     const onClick = (e: MouseEvent) => {
       if (
@@ -51,66 +52,58 @@
     return () => document.removeEventListener("mousedown", onClick);
   }, [isExpanded, content]);
 
-  // Reset state when collapsed
+  // Reset on collapse
   useEffect(() => {
     if (!isExpanded) {
       setContent("");
       setCommunityId("");
+      setMediaFiles([]);
     }
   }, [isExpanded]);
 
   const handleSubmit = async (e: React.FormEvent) => {
     e.preventDefault();
     if (!isSignedIn) {
-      toast.error("Please sign in to create a post");
+      toast.error("Please sign in to create a post.");
       return;
     }
 
     const trimmed = content.trim();
     if (!trimmed) {
-      toast.error("Post content cannot be empty");
+      toast.error("Post content cannot be empty.");
       return;
     }
 
-    const MAX = 50000;
-    if (trimmed.length > MAX) {
-      toast.error(
-          `Post too large (${trimmed.length.toLocaleString()} chars). Keep under ${MAX.toLocaleString()}.`
-      );
+    if (trimmed.length > 50000) {
+      toast.error("Post too long. Please keep it under 50,000 characters.");
       return;
     }
 
     if (trimmed.includes("<script") || trimmed.includes("javascript:")) {
-      toast.error("Post contains potentially unsafe content");
+      toast.error("Post contains potentially unsafe content.");
       return;
     }
 
     try {
       setIsSubmitting(true);
-      console.log(`[CreatePostForm] Submitting post with userId: ${userId}, content length: ${trimmed.length}`);
 
-      const post = await createPost(trimmed, communityId || undefined);
+      const post = await createPost(
+          trimmed,
+          communityId || undefined,
+          mediaFiles.length > 0 ? mediaFiles : undefined
+      );
 
       if (!post) {
-        if (error) {
-          toast.error(`Error: ${error}`);
-          console.error(`[CreatePostForm] Post creation failed with error: ${error}`);
-        } else {
-          toast.error("Unable to create post. Please try again.");
-          console.error('[CreatePostForm] Post creation failed without specific error');
-        }
+        toast.error("Failed to create post. Please try again.");
         return;
       }
 
-      console.log(`[CreatePostForm] Post created successfully with ID: ${post.id}`);
       toast.success("Post created successfully!");
       setIsExpanded(false);
-      setContent("");
       onSuccess?.();
-    } catch (err) {
-      const errorMessage = err instanceof Error ? err.message : "An unexpected error occurred";
-      console.error(`[CreatePostForm] Exception during post creation: ${errorMessage}`);
-      toast.error(errorMessage);
+    } catch (error) {
+      console.error("[CreatePostForm] Error creating post:", error);
+      toast.error("An unexpected error occurred while creating the post.");
     } finally {
       setIsSubmitting(false);
     }
@@ -139,11 +132,12 @@
               onClick={() => !isExpanded && setIsExpanded(true)}
           >
             {isExpanded ? (
-                <PostEditor
+                <RichTextEditor
                     value={content}
-                    onChangeAction={setContent}
+                    onChange={setContent}
                     placeholder="What's on your mind?"
-                    minHeight="120px"
+                    minHeight="150px"
+                    onMediaUpload={(url) => setMediaFiles((prev) => [...prev, url])}
                 />
             ) : (
                 <div className="h-12 px-3 py-2 border border-gray-200 rounded-md text-gray-500 flex items-center">
@@ -170,45 +164,93 @@
           <AnimatePresence>
             {isExpanded && (
                 <motion.div
-                    className="mt-4 flex flex-col sm:flex-row items-center justify-between gap-3"
+                    className="mt-4 flex flex-col gap-3"
                     initial={{ opacity: 0, height: 0 }}
                     animate={{ opacity: 1, height: "auto" }}
                     exit={{ opacity: 0, height: 0 }}
                     transition={{ duration: 0.2 }}
                 >
-                  {communities.length > 0 && (
-                      <Select value={communityId} onValueChange={setCommunityId}>
-                        <SelectTrigger className="w-full sm:w-48">
-                          <SelectValue placeholder="Select community" />
-                        </SelectTrigger>
-                        <SelectContent>
-                          <SelectItem value="">Personal post</SelectItem>
-                          {communities.map((c) => (
-                              <SelectItem key={c.id} value={c.id}>
-                                {c.name}
-                              </SelectItem>
-                          ))}
-                        </SelectContent>
-                      </Select>
-                  )}
+                  {/* Media Preview */}
+                  {mediaFiles.length > 0 && (
+                      <div className="mb-3">
+                        <h4 className="text-sm font-medium text-gray-700 mb-2">
+                          Media ({mediaFiles.length})
+                        </h4>
+                        <div className="grid grid-cols-2 sm:grid-cols-4 gap-2">
+                          {mediaFiles.map((url, index) => (
+                              <div
+                                  key={index}
+                                  className="relative group rounded-md overflow-hidden border border-gray-200"
+                              >
+                                {url.includes(".mp4") ? (
+                                    <video
+                                        src={url}
+                                        className="w-full h-24 object-cover"
+                                        controls
+                                    />
+                                ) : (
+                                    <Image
+                                        src={url}
+                                        alt={`Media ${index + 1}`}
+                                        width={100}
+                                        height={100}
+                                        className="w-full h-24 object-cover"
+                                    />
+                                )}
+                                <Button
+                                    type="button"
+                                    variant="destructive"
+                                    size="icon"
+                                    className="absolute top-1 right-1 h-6 w-6 opacity-0 group-hover:opacity-100 transition-opacity"
+                                    onClick={() =>
+                                        setMediaFiles((prev) =>
+                                            prev.filter((_, i) => i !== index)
+                                        )
+                                    }
+                                >
+                                  <X className="h-3 w-3" />
+                                </Button>
+                              </div>
+                          ))}
+                        </div>
+                      </div>
+                  )}
+
+                  <div className="flex flex-col sm:flex-row items-center justify-between gap-3">
+                    {communities.length > 0 && (
+                        <Select value={communityId} onValueChange={setCommunityId}>
+                          <SelectTrigger className="w-full sm:w-48">
+                            <SelectValue placeholder="Select community" />
+                          </SelectTrigger>
+                          <SelectContent>
+                            <SelectItem value="">Personal post</SelectItem>
+                            {communities.map((c) => (
+                                <SelectItem key={c.id} value={c.id}>
+                                  {c.name}
+                                </SelectItem>
+                            ))}
+                          </SelectContent>
+                        </Select>
+                    )}
 
-                  <Button
-                      type="submit"
-                      disabled={isSubmitting || !content.trim()}
-                      className="w-full sm:w-auto bg-[#00AEEF] hover:bg-[#00AEEF]/90 text-white"
-                  >
-                    {isSubmitting ? (
-                        <>
-                          <Loader2 className="mr-2 h-4 w-4 animate-spin" />
-                          Posting...
-                        </>
-                    ) : (
-                        <>
-                          Post
-                          <Send className="ml-2 h-4 w-4" />
-                        </>
-                    )}
-                  </Button>
+                    <Button
+                        type="submit"
+                        disabled={isSubmitting || !content.trim()}
+                        className="w-full sm:w-auto bg-[#00AEEF] hover:bg-[#00AEEF]/90 text-white"
+                    >
+                      {isSubmitting ? (
+                          <>
+                            <Loader2 className="mr-2 h-4 w-4 animate-spin" />
+                            Posting...
+                          </>
+                      ) : (
+                          <>
+                            Post
+                            <Send className="ml-2 h-4 w-4" />
+                          </>
+                      )}
+                    </Button>
+                  </div>
                 </motion.div>
             )}
           </AnimatePresence>
Index: src/components/post-feed.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"use client\";\r\n\r\nimport { useEffect, useRef, useCallback } from \"react\";\r\nimport PostCard from \"@/components/post-card\";\r\nimport { usePosts } from \"@/context/PostContext\";\r\nimport { motion } from \"framer-motion\";\r\nimport { Loader2 } from \"lucide-react\";\r\nimport PostSkeleton from \"@/components/skeletons/post-skeleton\";\r\n\r\ninterface PostFeedProps {\r\n  emptyMessage?: string;\r\n}\r\n\r\nexport default function PostFeed({ emptyMessage = \"No posts to show\" }: PostFeedProps) {\r\n  const { posts, loading, error, hasMore, fetchMorePosts, votePost } = usePosts();\r\n  const observer = useRef<IntersectionObserver | null>(null);\r\n\r\n  // Set up the intersection observer for infinite scrolling\r\n  const lastPostRef = useCallback((node: HTMLDivElement | null) => {\r\n    if (loading) return;\r\n\r\n    if (observer.current) {\r\n      observer.current.disconnect();\r\n    }\r\n\r\n    observer.current = new IntersectionObserver(entries => {\r\n      if (entries[0].isIntersecting && hasMore) {\r\n        fetchMorePosts();\r\n      }\r\n    });\r\n\r\n    if (node) {\r\n      observer.current.observe(node);\r\n    }\r\n  }, [loading, hasMore, fetchMorePosts]);\r\n\r\n  // Clean up observer on unmount\r\n  useEffect(() => {\r\n    return () => {\r\n      if (observer.current) {\r\n        observer.current.disconnect();\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  if (error) {\r\n    return (\r\n      <div className=\"bg-red-50 border border-red-200 rounded-lg p-4 text-red-600\">\r\n        <p>Error loading posts: {error}</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {posts.length === 0 && !loading ? (\r\n        <div className=\"bg-white rounded-lg border border-gray-100 p-8 text-center\">\r\n          <p className=\"text-gray-500\">{emptyMessage}</p>\r\n        </div>\r\n      ) : (\r\n        posts.map((post, index) => {\r\n          if (index === posts.length - 1) {\r\n            return (\r\n              <div key={post.id} ref={lastPostRef}>\r\n                <PostCard post={post} onVote={votePost} />\r\n              </div>\r\n            );\r\n          } else {\r\n            return <PostCard key={post.id} post={post} onVote={votePost} />;\r\n          }\r\n        })\r\n      )}\r\n\r\n      {loading && (\r\n        <div className=\"space-y-6\">\r\n          {posts.length === 0 ? (\r\n            // Show skeletons when initially loading\r\n            <>\r\n              <PostSkeleton key=\"skeleton-1\" />\r\n              <PostSkeleton key=\"skeleton-2\" />\r\n              <PostSkeleton key=\"skeleton-3\" />\r\n            </>\r\n          ) : (\r\n            // Show spinner when loading more posts\r\n            <motion.div\r\n              className=\"flex justify-center py-4\"\r\n              initial={{ opacity: 0 }}\r\n              animate={{ opacity: 1 }}\r\n              transition={{ duration: 0.3 }}\r\n            >\r\n              <Loader2 className=\"h-8 w-8 text-[#00AEEF] animate-spin\" />\r\n            </motion.div>\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/post-feed.tsx b/src/components/post-feed.tsx
--- a/src/components/post-feed.tsx	(revision 4c74be27f19335e5b956190fea65a1f797f84875)
+++ b/src/components/post-feed.tsx	(date 1747009940122)
@@ -8,11 +8,11 @@
 import PostSkeleton from "@/components/skeletons/post-skeleton";
 
 interface PostFeedProps {
-  emptyMessage?: string;
+  emptyMessage?: React.ReactNode;
 }
 
 export default function PostFeed({ emptyMessage = "No posts to show" }: PostFeedProps) {
-  const { posts, loading, error, hasMore, fetchMorePosts, votePost } = usePosts();
+  const { posts, loading, error, hasMore, fetchMorePosts, votePost, savePost } = usePosts();
   const observer = useRef<IntersectionObserver | null>(null);
 
   // Set up the intersection observer for infinite scrolling
@@ -55,18 +55,22 @@
     <div className="space-y-6">
       {posts.length === 0 && !loading ? (
         <div className="bg-white rounded-lg border border-gray-100 p-8 text-center">
-          <p className="text-gray-500">{emptyMessage}</p>
+          {typeof emptyMessage === 'string' ? (
+            <p className="text-gray-500">{emptyMessage}</p>
+          ) : (
+            emptyMessage
+          )}
         </div>
       ) : (
         posts.map((post, index) => {
           if (index === posts.length - 1) {
             return (
               <div key={post.id} ref={lastPostRef}>
-                <PostCard post={post} onVote={votePost} />
+                <PostCard post={post} onVote={votePost} onSave={savePost} />
               </div>
             );
           } else {
-            return <PostCard key={post.id} post={post} onVote={votePost} />;
+            return <PostCard key={post.id} post={post} onVote={votePost} onSave={savePost} />;
           }
         })
       )}
Index: src/app/api/communities/[communityId]/channels/[channelId]/route.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/app/api/communities/[communityId]/channels/[channelId]/route.ts b/src/app/api/communities/[communityId]/channels/[channelId]/route.ts
new file mode 100644
--- /dev/null	(date 1747009941688)
+++ b/src/app/api/communities/[communityId]/channels/[channelId]/route.ts	(date 1747009941688)
@@ -0,0 +1,170 @@
+import { NextRequest, NextResponse } from 'next/server';
+import { auth } from '@clerk/nextjs/server';
+import connectToDatabase from '@/lib/dbConnect';
+import Community from '@/models/Community';
+import Channel from '@/models/Channel';
+import Membership from '@/models/Membership';
+import { z } from 'zod';
+import slugify from 'slugify';
+
+// Zod schemas
+const ParamsSchema = z.object({
+  communityId: z.string().min(1),
+  channelId: z.string().min(1),
+});
+
+const UpdateChannelSchema = z.object({
+  name: z.string().min(1).max(100).optional(),
+  description: z.string().max(1000).optional(),
+  isPrivate: z.boolean().optional(),
+  position: z.number().int().min(0).optional(),
+});
+
+// Helper: permission check
+async function authorize(userId: string, communityId: string, permission: 'MANAGE_CHANNELS') {
+  const membership = await Membership.findOne({ community: communityId, user: userId });
+  if (!membership) return false;
+  const hasPerm = await membership.hasPermission(permission);
+  const community = await Community.findById(communityId);
+  const isCreator = community?.creator.equals(userId);
+  return hasPerm || isCreator;
+}
+
+// GET a specific channel
+export async function GET(
+    req: NextRequest,
+    { params }: { params: Record<string, string> }
+) {
+  try {
+    const parseParams = ParamsSchema.safeParse(params);
+    if (!parseParams.success) return NextResponse.json({ error: 'Invalid parameters' }, { status: 400 });
+    const { communityId, channelId } = parseParams.data;
+
+    const { userId } = await auth();
+    if (!userId) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
+
+    await connectToDatabase();
+
+    // Check membership
+    const membership = await Membership.findOne({ community: communityId, user: userId });
+    if (!membership) return NextResponse.json({ error: 'Not a community member' }, { status: 403 });
+
+    // Fetch channel
+    const channel = await Channel.findOne({ _id: channelId, community: communityId }).lean() as {
+      _id?: { toString(): string };
+      name?: string;
+      slug?: string;
+      type?: string;
+      description?: string;
+      position?: number;
+      isPrivate?: boolean;
+      messageCount?: number;
+    };
+    if (!channel) return NextResponse.json({ error: 'Channel not found' }, { status: 404 });
+
+    return NextResponse.json({
+      channel: {
+        id: channel._id ? channel._id.toString() : '',
+        name: channel.name || '',
+        slug: channel.slug || '',
+        type: channel.type || '',
+        description: channel.description || '',
+        position: channel.position ?? 0,
+        isPrivate: channel.isPrivate ?? false,
+        messageCount: channel.messageCount ?? 0,
+      }
+    });
+  } catch (err) {
+    console.error('GET CHANNEL ERROR', err);
+    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });
+  }
+}
+
+// PATCH to update a channel
+export async function PATCH(
+    req: NextRequest,
+    { params }: { params: Record<string, string> }
+) {
+  try {
+    const parseParams = ParamsSchema.safeParse(params);
+    if (!parseParams.success) return NextResponse.json({ error: 'Invalid parameters' }, { status: 400 });
+    const { communityId, channelId } = parseParams.data;
+
+    const { userId } = await auth();
+    if (!userId) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
+
+    const body = await req.json();
+    const parsed = UpdateChannelSchema.safeParse(body);
+    if (!parsed.success) return NextResponse.json({ error: parsed.error.flatten() }, { status: 400 });
+    const updates = parsed.data;
+
+    await connectToDatabase();
+
+    // Authorization
+    if (!(await authorize(userId, communityId, 'MANAGE_CHANNELS'))) {
+      return NextResponse.json({ error: 'Forbidden' }, { status: 403 });
+    }
+
+    const channel = await Channel.findOne({ _id: channelId, community: communityId });
+    if (!channel) return NextResponse.json({ error: 'Channel not found' }, { status: 404 });
+
+    // Apply updates
+    if (updates.name) {
+      channel.name = updates.name;
+      channel.slug = slugify(updates.name, { lower: true, strict: true });
+    }
+    if (updates.description !== undefined) channel.description = updates.description;
+    if (updates.isPrivate !== undefined) channel.isPrivate = updates.isPrivate;
+    if (updates.position !== undefined) channel.position = updates.position;
+
+    await channel.save();
+
+    return NextResponse.json({
+      channel: {
+        id: channel._id.toString(),
+        name: channel.name,
+        slug: channel.slug,
+        type: channel.type,
+        description: channel.description,
+        position: channel.position,
+        isPrivate: channel.isPrivate,
+        messageCount: 'messageCount' in channel ? channel.messageCount : 0,
+      }
+    });
+  } catch (err) {
+    console.error('UPDATE CHANNEL ERROR', err);
+    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });
+  }
+}
+
+// DELETE a channel
+export async function DELETE(
+    req: NextRequest,
+    { params }: { params: Record<string, string> }
+) {
+  try {
+    const parseParams = ParamsSchema.safeParse(params);
+    if (!parseParams.success) return NextResponse.json({ error: 'Invalid parameters' }, { status: 400 });
+    const { communityId, channelId } = parseParams.data;
+
+    const { userId } = await auth();
+    if (!userId) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
+
+    await connectToDatabase();
+
+    // Authorization
+    if (!(await authorize(userId, communityId, 'MANAGE_CHANNELS'))) {
+      return NextResponse.json({ error: 'Forbidden' }, { status: 403 });
+    }
+
+    const channel = await Channel.findOne({ _id: channelId, community: communityId });
+    if (!channel) return NextResponse.json({ error: 'Channel not found' }, { status: 404 });
+
+    await channel.deleteOne();
+
+    return NextResponse.json({ success: true });
+  } catch (err) {
+    console.error('DELETE CHANNEL ERROR', err);
+    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });
+  }
+}
Index: src/app/api/notifications/[notificationId]/route.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/app/api/notifications/[notificationId]/route.ts b/src/app/api/notifications/[notificationId]/route.ts
new file mode 100644
--- /dev/null	(date 1747009941656)
+++ b/src/app/api/notifications/[notificationId]/route.ts	(date 1747009941656)
@@ -0,0 +1,232 @@
+import { NextRequest, NextResponse } from 'next/server';
+import { auth } from '@clerk/nextjs/server';
+import connectToDatabase from '@/lib/dbConnect';
+import User from '@/models/User';
+import Notification from '@/models/Notification';
+import { Types } from 'mongoose';
+import { z } from 'zod';
+
+// Validation schemas
+const ParamsSchema = z.object({
+  notificationId: z.string().min(1)
+});
+
+/**
+ * GET /api/notifications/[notificationId] - Get a specific notification
+ */
+export async function GET(
+  req: NextRequest,
+  { params }: { params: { notificationId: string } }
+) {
+  try {
+    // Authenticate user
+    const { userId } = await auth();
+    if (!userId) {
+      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
+    }
+
+    // Validate parameters
+    const validatedParams = ParamsSchema.safeParse(params);
+    if (!validatedParams.success) {
+      return NextResponse.json({ 
+        error: 'Invalid parameters',
+        details: validatedParams.error.format()
+      }, { status: 400 });
+    }
+
+    const { notificationId } = validatedParams.data;
+
+    // Validate ObjectId
+    if (!Types.ObjectId.isValid(notificationId)) {
+      return NextResponse.json({ error: 'Invalid notification ID format' }, { status: 400 });
+    }
+
+    await connectToDatabase();
+
+    // Find user
+    const user = await User.findOne({ clerkId: userId });
+    if (!user) {
+      return NextResponse.json({ error: 'User not found' }, { status: 404 });
+    }
+
+    // Find notification
+    const notification = await Notification.findOne({
+      _id: notificationId,
+      recipient: user._id
+    })
+      .populate('sender', 'username name image')
+      .populate('relatedPost', 'content')
+      .populate('relatedComment', 'content')
+      .populate('relatedCommunity', 'name image')
+      .populate('relatedChannel', 'name')
+      .lean();
+
+    if (!notification) {
+      return NextResponse.json({ error: 'Notification not found' }, { status: 404 });
+    }
+
+    // Format response
+    const formattedNotification = {
+      id: notification._id.toString(),
+      type: notification.type,
+      content: notification.content,
+      read: notification.read,
+      createdAt: notification.createdAt,
+      sender: notification.sender ? {
+        id: notification.sender._id.toString(),
+        username: notification.sender.username,
+        name: notification.sender.name,
+        image: notification.sender.image
+      } : null,
+      relatedPost: notification.relatedPost ? {
+        id: notification.relatedPost._id.toString(),
+        content: notification.relatedPost.content.substring(0, 100) // Truncate content
+      } : null,
+      relatedComment: notification.relatedComment ? {
+        id: notification.relatedComment._id.toString(),
+        content: notification.relatedComment.content.substring(0, 100) // Truncate content
+      } : null,
+      relatedCommunity: notification.relatedCommunity ? {
+        id: notification.relatedCommunity._id.toString(),
+        name: notification.relatedCommunity.name,
+        image: notification.relatedCommunity.image
+      } : null,
+      relatedChannel: notification.relatedChannel ? {
+        id: notification.relatedChannel._id.toString(),
+        name: notification.relatedChannel.name
+      } : null
+    };
+
+    return NextResponse.json({ notification: formattedNotification }, { status: 200 });
+  } catch (error) {
+    console.error('[GET NOTIFICATION]', error);
+    return NextResponse.json({ error: 'Failed to fetch notification' }, { status: 500 });
+  }
+}
+
+/**
+ * PATCH /api/notifications/[notificationId] - Mark a notification as read
+ */
+export async function PATCH(
+  req: NextRequest,
+  { params }: { params: { notificationId: string } }
+) {
+  try {
+    // Authenticate user
+    const { userId } = await auth();
+    if (!userId) {
+      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
+    }
+
+    // Validate parameters
+    const validatedParams = ParamsSchema.safeParse(params);
+    if (!validatedParams.success) {
+      return NextResponse.json({ 
+        error: 'Invalid parameters',
+        details: validatedParams.error.format()
+      }, { status: 400 });
+    }
+
+    const { notificationId } = validatedParams.data;
+
+    // Validate ObjectId
+    if (!Types.ObjectId.isValid(notificationId)) {
+      return NextResponse.json({ error: 'Invalid notification ID format' }, { status: 400 });
+    }
+
+    await connectToDatabase();
+
+    // Find user
+    const user = await User.findOne({ clerkId: userId });
+    if (!user) {
+      return NextResponse.json({ error: 'User not found' }, { status: 404 });
+    }
+
+    // Find and update notification
+    const notification = await Notification.findOneAndUpdate(
+      {
+        _id: notificationId,
+        recipient: user._id
+      },
+      { read: true },
+      { new: true }
+    );
+
+    if (!notification) {
+      return NextResponse.json({ error: 'Notification not found' }, { status: 404 });
+    }
+
+    // Get updated unread count
+    const unreadCount = await Notification.countDocuments({ 
+      recipient: user._id,
+      read: false
+    });
+
+    return NextResponse.json({
+      success: true,
+      message: 'Notification marked as read',
+      unreadCount
+    }, { status: 200 });
+  } catch (error) {
+    console.error('[MARK NOTIFICATION READ]', error);
+    return NextResponse.json({ error: 'Failed to mark notification as read' }, { status: 500 });
+  }
+}
+
+/**
+ * DELETE /api/notifications/[notificationId] - Delete a notification
+ */
+export async function DELETE(
+  req: NextRequest,
+  { params }: { params: { notificationId: string } }
+) {
+  try {
+    // Authenticate user
+    const { userId } = await auth();
+    if (!userId) {
+      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
+    }
+
+    // Validate parameters
+    const validatedParams = ParamsSchema.safeParse(params);
+    if (!validatedParams.success) {
+      return NextResponse.json({ 
+        error: 'Invalid parameters',
+        details: validatedParams.error.format()
+      }, { status: 400 });
+    }
+
+    const { notificationId } = validatedParams.data;
+
+    // Validate ObjectId
+    if (!Types.ObjectId.isValid(notificationId)) {
+      return NextResponse.json({ error: 'Invalid notification ID format' }, { status: 400 });
+    }
+
+    await connectToDatabase();
+
+    // Find user
+    const user = await User.findOne({ clerkId: userId });
+    if (!user) {
+      return NextResponse.json({ error: 'User not found' }, { status: 404 });
+    }
+
+    // Find and delete notification
+    const notification = await Notification.findOneAndDelete({
+      _id: notificationId,
+      recipient: user._id
+    });
+
+    if (!notification) {
+      return NextResponse.json({ error: 'Notification not found' }, { status: 404 });
+    }
+
+    return NextResponse.json({
+      success: true,
+      message: 'Notification deleted'
+    }, { status: 200 });
+  } catch (error) {
+    console.error('[DELETE NOTIFICATION]', error);
+    return NextResponse.json({ error: 'Failed to delete notification' }, { status: 500 });
+  }
+}
Index: src/app/api/communities/[communityId]/channels/[channelId]/messages/[messageId]/route.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/app/api/communities/[communityId]/channels/[channelId]/messages/[messageId]/route.ts b/src/app/api/communities/[communityId]/channels/[channelId]/messages/[messageId]/route.ts
new file mode 100644
--- /dev/null	(date 1747009941758)
+++ b/src/app/api/communities/[communityId]/channels/[channelId]/messages/[messageId]/route.ts	(date 1747009941758)
@@ -0,0 +1,298 @@
+// src/app/api/communities/[communityId]/channels/[channelId]/messages/[messageId]/route.ts
+
+import { NextRequest, NextResponse } from 'next/server';
+import { auth } from '@clerk/nextjs/server';
+import connectToDatabase from '@/lib/dbConnect';
+import Membership from '@/models/Membership';
+import Channel from '@/models/Channel';
+import Message from '@/models/Message';
+import User from '@/models/User';
+import { z } from 'zod';
+import mongoose, { Types } from 'mongoose';
+
+// -------------------------
+// Zod schemas
+// -------------------------
+const ParamsSchema = z.object({
+  communityId: z.string().min(1),
+  channelId: z.string().min(1),
+  messageId: z.string().min(1),
+});
+
+const PatchBodySchema = z.object({
+  content: z.string().max(4000).optional(),
+  isPinned: z.boolean().optional(),
+});
+
+// -------------------------
+// Auth helper
+// -------------------------
+async function authorize(userId: string, communityId: string) {
+  const membership = await Membership.findOne({ community: communityId, user: userId });
+  return !!membership;
+}
+
+// -------------------------
+// GET a specific message
+// -------------------------
+export async function GET(
+  req: NextRequest,
+  { params }: { params: Record<string, string> }
+) {
+  // Validate params
+  const parsedParams = ParamsSchema.safeParse(params);
+  if (!parsedParams.success) {
+    return NextResponse.json({ error: 'Invalid parameters' }, { status: 400 });
+  }
+  const { communityId, channelId, messageId } = parsedParams.data;
+
+  try {
+    const { userId } = await auth();
+    if (!userId) {
+      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
+    }
+    await connectToDatabase();
+
+    // Membership check
+    if (!(await authorize(userId, communityId))) {
+      return NextResponse.json({ error: 'Not a community member' }, { status: 403 });
+    }
+
+    // Fetch message
+    const msg = await Message.findOne({
+      _id: messageId,
+      channel: channelId,
+      community: communityId,
+    })
+      .populate('author', 'username name image')
+      .populate('mentions', 'username name image')
+      .lean();
+
+    if (!msg) {
+      return NextResponse.json({ error: 'Message not found' }, { status: 404 });
+    }
+
+    type LeanMessage = {
+      _id: Types.ObjectId;
+      content: string;
+      author: { _id: Types.ObjectId; username: string; name: string; image?: string };
+      mentions: { _id: Types.ObjectId; username: string; name: string; image?: string }[];
+      reactions: { emoji: string; users: Types.ObjectId[] }[];
+      attachments?: string[];
+      isPinned: boolean;
+      isEdited: boolean;
+      createdAt: Date;
+      updatedAt: Date;
+    };
+
+    // Cast the msg to LeanMessage type for proper type checking
+    const typedMsg = msg as unknown as LeanMessage;
+    const author = typedMsg.author;
+    const mentions = typedMsg.mentions.map((u) => ({
+      id: u._id.toString(),
+      username: u.username,
+      name: u.name,
+      image: u.image,
+    }));
+
+    const reactions = typedMsg.reactions.map((r) => ({
+      emoji: r.emoji,
+      count: r.users.length,
+      hasReacted: r.users.some((u) => u.equals(author._id)),
+    }));
+
+    const formatted = {
+      id: typedMsg._id.toString(),
+      content: typedMsg.content,
+      author: {
+        id: author._id.toString(),
+        username: author.username,
+        name: author.name,
+        image: author.image,
+      },
+      attachments: typedMsg.attachments ?? [],
+      mentions,
+      isPinned: typedMsg.isPinned,
+      isEdited: typedMsg.isEdited,
+      reactions,
+      createdAt: typedMsg.createdAt.toISOString(),
+      updatedAt: typedMsg.updatedAt.toISOString(),
+    };
+
+    return NextResponse.json({ message: formatted }, { status: 200 });
+  } catch (err) {
+    console.error('GET MESSAGE ERROR', err);
+    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });
+  }
+}
+
+// -------------------------
+// PATCH to update a message
+// -------------------------
+export async function PATCH(
+  req: NextRequest,
+  { params }: { params: Record<string, string> }
+) {
+  // Validate params
+  const parsedParams = ParamsSchema.safeParse(params);
+  if (!parsedParams.success) {
+    return NextResponse.json({ error: 'Invalid parameters' }, { status: 400 });
+  }
+  const { communityId, channelId, messageId } = parsedParams.data;
+
+  // Validate body
+  const body = await req.json();
+  const parsedBody = PatchBodySchema.safeParse(body);
+  if (!parsedBody.success) {
+    return NextResponse.json({ error: parsedBody.error.flatten() }, { status: 400 });
+  }
+  const { content, isPinned } = parsedBody.data;
+
+  try {
+    const { userId } = await auth();
+    if (!userId) {
+      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
+    }
+    await connectToDatabase();
+
+    // Membership check
+    if (!(await authorize(userId, communityId))) {
+      return NextResponse.json({ error: 'Not a community member' }, { status: 403 });
+    }
+
+    // Fetch message
+    const message = await Message.findOne({
+      _id: messageId,
+      channel: channelId,
+      community: communityId,
+    });
+    if (!message) {
+      return NextResponse.json({ error: 'Message not found' }, { status: 404 });
+    }
+
+    // Fetch user & community for role checks
+    const user = await User.findOne({ clerkId: userId }, '_id');
+    const community = await mongoose.model('Community').findById(communityId, 'moderators creator');
+    if (!user || !community) {
+      return NextResponse.json({ error: 'Context not found' }, { status: 404 });
+    }
+    const isAuthor = message.author.equals(user._id);
+    const isMod = (community.moderators as Types.ObjectId[]).some((m) => m.equals(user._id));
+    const isCreator = (community.creator as Types.ObjectId).equals(user._id);
+
+    // Apply content edit
+    if (content !== undefined) {
+      if (!isAuthor) {
+        return NextResponse.json({ error: 'Only author can edit' }, { status: 403 });
+      }
+      message.content = content;
+      message.isEdited = true;
+    }
+
+    // Apply pin/unpin
+    if (isPinned !== undefined) {
+      if (!isMod && !isCreator) {
+        return NextResponse.json({ error: 'Only mods can pin/unpin' }, { status: 403 });
+      }
+      message.isPinned = isPinned;
+    }
+
+    await message.save();
+
+    await message.populate('author', 'username name image');
+
+    const authorLean = message.author as { _id: Types.ObjectId; username: string; name: string; image?: string };
+    const reactions = message.reactions.map((r: { emoji: string; users: Types.ObjectId[] }) => ({
+      emoji: r.emoji,
+      count: r.users.length,
+      hasReacted: r.users.some((u) => u.equals(user._id)),
+    }));
+
+    const formatted = {
+      id: message._id.toString(),
+      content: message.content,
+      author: {
+        id: authorLean._id.toString(),
+        username: authorLean.username,
+        name: authorLean.name,
+        image: authorLean.image,
+      },
+      attachments: message.attachments,
+      mentions: [], // you can populate if needed
+      isPinned: message.isPinned,
+      isEdited: message.isEdited,
+      reactions,
+      createdAt: message.createdAt.toISOString(),
+      updatedAt: message.updatedAt.toISOString(),
+    };
+
+    return NextResponse.json({ message: formatted }, { status: 200 });
+  } catch (err) {
+    console.error('PATCH MESSAGE ERROR', err);
+    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });
+  }
+}
+
+// -------------------------
+// DELETE a message
+// -------------------------
+export async function DELETE(
+  req: NextRequest,
+  { params }: { params: Record<string, string> }
+) {
+  // Validate params
+  const parsedParams = ParamsSchema.safeParse(params);
+  if (!parsedParams.success) {
+    return NextResponse.json({ error: 'Invalid parameters' }, { status: 400 });
+  }
+  const { communityId, channelId, messageId } = parsedParams.data;
+
+  try {
+    const { userId } = await auth();
+    if (!userId) {
+      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
+    }
+    await connectToDatabase();
+
+    // Membership check
+    if (!(await authorize(userId, communityId))) {
+      return NextResponse.json({ error: 'Not a community member' }, { status: 403 });
+    }
+
+    // Fetch message
+    const message = await Message.findOne({
+      _id: messageId,
+      channel: channelId,
+      community: communityId,
+    });
+    if (!message) {
+      return NextResponse.json({ error: 'Message not found' }, { status: 404 });
+    }
+
+    // Fetch user & community for role checks
+    const user = await User.findOne({ clerkId: userId }, '_id');
+    const community = await mongoose.model('Community').findById(communityId, 'moderators creator');
+    if (!user || !community) {
+      return NextResponse.json({ error: 'Context not found' }, { status: 404 });
+    }
+    const isAuthor = message.author.equals(user._id);
+    const isMod = (community.moderators as Types.ObjectId[]).some((m) => m.equals(user._id));
+    const isCreator = (community.creator as Types.ObjectId).equals(user._id);
+
+    if (!isAuthor && !isMod && !isCreator) {
+      return NextResponse.json({ error: 'Not allowed' }, { status: 403 });
+    }
+
+    // Delete and detach
+    await Message.deleteOne({ _id: messageId });
+    await Channel.updateOne(
+      { _id: channelId },
+      { $pull: { messages: message._id } }
+    );
+
+    return NextResponse.json({ success: true }, { status: 200 });
+  } catch (err) {
+    console.error('DELETE MESSAGE ERROR', err);
+    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });
+  }
+}
\ No newline at end of file
Index: src/app/api/communities/[communityId]/channels/[channelId]/messages/route.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/app/api/communities/[communityId]/channels/[channelId]/messages/route.ts b/src/app/api/communities/[communityId]/channels/[channelId]/messages/route.ts
new file mode 100644
--- /dev/null	(date 1747009941724)
+++ b/src/app/api/communities/[communityId]/channels/[channelId]/messages/route.ts	(date 1747009941724)
@@ -0,0 +1,236 @@
+// src/app/api/communities/[communityId]/channels/[channelId]/messages/route.ts
+import { NextRequest, NextResponse } from 'next/server';
+import { auth } from '@clerk/nextjs/server';
+import connectToDatabase from '@/lib/dbConnect';
+import Membership from '@/models/Membership';
+import Channel from '@/models/Channel';
+import Message from '@/models/Message';
+import User from '@/models/User';
+import { z } from 'zod';
+import { Types } from 'mongoose';
+
+// Zod schemas for params and queries
+const ParamsSchema = z.object({
+  communityId: z.string().min(1),
+  channelId: z.string().min(1),
+});
+const PaginationSchema = z.object({
+  limit: z.string().optional(),
+  before: z.string().optional(),
+  after: z.string().optional(),
+});
+const CreateMessageSchema = z.object({
+  content: z.string().max(4000).optional(),
+  attachments: z.array(z.string()).optional(),
+  mentions: z.array(z.string()).optional(),
+});
+
+// Helper: verify membership and optional permission
+async function authorize(userId: string, communityId: string, permission?: 'SEND_MESSAGES') {
+  const membership = await Membership.findOne({ community: communityId, user: userId });
+  if (!membership) return false;
+  if (!permission) return true;
+  return await membership.hasPermission(permission);
+}
+
+// GET messages
+export async function GET(
+  req: NextRequest,
+  { params }: { params: Record<string, string> }
+) {
+  // Validate path params
+  const paramsResult = ParamsSchema.safeParse(params);
+  if (!paramsResult.success) {
+    return NextResponse.json({ error: 'Invalid parameters' }, { status: 400 });
+  }
+  const { communityId, channelId } = paramsResult.data;
+
+  // Parse and validate query
+  const url = new URL(req.url);
+  const queryResult = PaginationSchema.safeParse(Object.fromEntries(url.searchParams));
+  if (!queryResult.success) {
+    return NextResponse.json({ error: 'Invalid query parameters' }, { status: 400 });
+  }
+  const { limit = '50', before, after } = queryResult.data;
+  const limitNum = Math.min(parseInt(limit, 10) || 50, 100);
+
+  try {
+    const { userId } = await auth();
+    if (!userId) {
+      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
+    }
+    await connectToDatabase();
+
+    // Membership check
+    if (!(await authorize(userId, communityId))) {
+      return NextResponse.json({ error: 'Not a community member' }, { status: 403 });
+    }
+
+    // Ensure channel exists
+    const channel = await Channel.findOne({ _id: channelId, community: communityId });
+    if (!channel) {
+      return NextResponse.json({ error: 'Channel not found' }, { status: 404 });
+    }
+
+    // Build filter
+    const filter: Record<string, unknown> = { channel: channel._id };
+    if (before || after) {
+      filter.createdAt = {} as Record<string, Date>;
+      if (before) (filter.createdAt as Record<string, Date>).$lt = new Date(before);
+      if (after) (filter.createdAt as Record<string, Date>).$gt = new Date(after);
+    }
+
+    // Fetch messages
+    const docs = await Message.find(filter)
+      .sort({ createdAt: before ? -1 : 1 })
+      .limit(limitNum)
+      .populate('author', 'username name image')
+      .populate('mentions', 'username name image')
+      .lean();
+
+    // Type definition for lean doc
+    type LeanUser = { _id: Types.ObjectId; username: string; name: string; image?: string };
+    type LeanMsg = {
+      _id: Types.ObjectId;
+      content: string;
+      author: LeanUser;
+      attachments?: string[];
+      mentions?: LeanUser[];
+      isPinned: boolean;
+      isEdited: boolean;
+      reactions: { emoji: string; users: Types.ObjectId[] }[];
+      createdAt: Date;
+      updatedAt: Date;
+    };
+
+    const ordered = before ? docs.reverse() : docs;
+    const messages = ordered.map((doc) => {
+      // Cast the document to ensure type safety
+      const msg = doc as unknown as LeanMsg;
+      return {
+      id: msg._id.toString(),
+      content: msg.content,
+      author: {
+        id: msg.author._id.toString(),
+        username: msg.author.username,
+        name: msg.author.name,
+        image: msg.author.image,
+      },
+      attachments: msg.attachments || [],
+      mentions: (msg.mentions || []).map((u: LeanUser) => ({
+        id: u._id.toString(),
+        username: u.username,
+        name: u.name,
+        image: u.image,
+      })),
+      isPinned: msg.isPinned,
+      isEdited: msg.isEdited,
+      reactions: msg.reactions.map((r: { emoji: string; users: Types.ObjectId[] }) => ({
+        emoji: r.emoji,
+        count: r.users.length,
+        hasReacted: r.users.some((u) => u.equals(userId)),
+      })),
+      createdAt: msg.createdAt.toISOString(),
+      updatedAt: msg.updatedAt.toISOString(),
+      };
+    });
+
+    const hasMore = docs.length === limitNum;
+    const nextCursor = hasMore ? ordered[ordered.length - 1].createdAt.toISOString() : null;
+    const prevCursor = ordered.length ? ordered[0].createdAt.toISOString() : null;
+
+    return NextResponse.json({ messages, pagination: { hasMore, nextCursor, prevCursor } });
+  } catch (err) {
+    console.error('GET MESSAGES ERROR', err);
+    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });
+  }
+}
+
+// POST new message
+export async function POST(
+  req: NextRequest,
+  { params }: { params: Record<string, string> }
+) {
+  // Validate params
+  const paramsResult = ParamsSchema.safeParse(params);
+  if (!paramsResult.success) {
+    return NextResponse.json({ error: 'Invalid parameters' }, { status: 400 });
+  }
+  const { communityId, channelId } = paramsResult.data;
+
+  try {
+    const { userId } = await auth();
+    if (!userId) {
+      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
+    }
+    await connectToDatabase();
+
+    // Authorization to send messages
+    if (!(await authorize(userId, communityId, 'SEND_MESSAGES'))) {
+      return NextResponse.json({ error: 'Forbidden' }, { status: 403 });
+    }
+
+    // Validate body
+    const body = await req.json();
+    const parsed = CreateMessageSchema.safeParse(body);
+    if (!parsed.success) {
+      return NextResponse.json({ error: parsed.error.flatten() }, { status: 400 });
+    }
+    const { content = '', attachments = [], mentions = [] } = parsed.data;
+    if (!content && attachments.length === 0) {
+      return NextResponse.json({ error: 'Message must have content or attachments' }, { status: 400 });
+    }
+
+    // Ensure channel exists
+    const channel = await Channel.findOne({ _id: channelId, community: communityId });
+    if (!channel) {
+      return NextResponse.json({ error: 'Channel not found' }, { status: 404 });
+    }
+
+    // Validate mentions
+    const validUsers = await User.find({ _id: { $in: mentions } }, '_id');
+    const mentionIds = validUsers.map((u) => u._id);
+
+    // Create message
+    const message = await Message.create({
+      content,
+      author: userId,
+      channel: channel._id,
+      community: communityId,
+      attachments,
+      mentions: mentionIds,
+    });
+
+    // Populate author & mentions
+    await message.populate('author', 'username name image').populate('mentions', 'username name image');
+
+    // Format response
+    const formatted = {
+      id: message._id.toString(),
+      content: message.content,
+      author: {
+        id: message.author._id.toString(),
+        username: message.author.username,
+        name: message.author.name,
+        image: message.author.image,
+      },
+      attachments: message.attachments,
+      mentions: (message.mentions as unknown as Array<{ _id: Types.ObjectId; username: string; name: string; image?: string }>).map((u) => ({
+        id: u._id.toString(),
+        username: u.username,
+        name: u.name,
+        image: u.image,
+      })),
+      isPinned: message.isPinned,
+      isEdited: message.isEdited,
+      reactions: [],
+      createdAt: message.createdAt.toISOString(),
+      updatedAt: message.updatedAt.toISOString(),
+    };
+
+    return NextResponse.json({ message: formatted }, { status: 201 });
+  } catch (err) {
+    console.error('CREATE MESSAGE ERROR', err);
+    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });
+  }
+}
\ No newline at end of file
Index: src/app/api/communities/[communityId]/roles/[roleId]/route.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/app/api/communities/[communityId]/roles/[roleId]/route.ts b/src/app/api/communities/[communityId]/roles/[roleId]/route.ts
new file mode 100644
--- /dev/null	(date 1747009941821)
+++ b/src/app/api/communities/[communityId]/roles/[roleId]/route.ts	(date 1747009941821)
@@ -0,0 +1,288 @@
+// src/app/api/communities/[communityId]/roles/[roleId]/route.ts
+import { NextRequest, NextResponse } from "next/server";
+import { auth } from "@clerk/nextjs/server";
+import connectToDatabase from "@/lib/dbConnect";
+import Role from "@/models/Role";
+import Membership from "@/models/Membership";
+import { RoleInfo } from "@/types/api";
+import { z } from "zod";
+import { isCommunityMember, isCommunityCreator, hasPermission } from "@/utils/roleUtils";
+
+// Validation schemas
+const ParamsSchema = z.object({
+  communityId: z.string().min(1),
+  roleId: z.string().min(1)
+});
+
+
+
+// GET a specific role
+export async function GET(
+  req: NextRequest,
+  { params }: { params: { communityId: string; roleId: string } }
+) {
+  try {
+    // Authenticate user
+    const { userId } = await auth();
+    if (!userId) {
+      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
+    }
+
+    // Validate parameters
+    const validatedParams = ParamsSchema.safeParse(params);
+    if (!validatedParams.success) {
+      return NextResponse.json({ error: "Invalid parameters", details: validatedParams.error.format() }, { status: 400 });
+    }
+
+    const { communityId, roleId } = validatedParams.data;
+
+    await connectToDatabase();
+
+    // Check if user is a member of the community
+    const isMember = await isCommunityMember(userId, communityId);
+    if (!isMember) {
+      return NextResponse.json({ error: "You must be a member to view roles" }, { status: 403 });
+    }
+
+    // Find the role
+    const role = await Role.findOne({
+      _id: roleId,
+      community: communityId
+    }).lean();
+
+    if (!role) {
+      return NextResponse.json({ error: "Role not found" }, { status: 404 });
+    }
+
+    // Format the response
+    const formattedRole: RoleInfo = {
+      id: role._id.toString(),
+      name: role.name,
+      color: role.color,
+      position: role.position,
+      isDefault: role.isDefault
+    };
+
+    return NextResponse.json({
+      role: formattedRole,
+      permissions: role.permissions
+    }, { status: 200 });
+  } catch (error) {
+    console.error("[GET ROLE]", error);
+    return NextResponse.json({ error: "Failed to fetch role" }, { status: 500 });
+  }
+}
+
+// Validation schema for role update
+const UpdateRoleSchema = z.object({
+  name: z.string().min(1).max(100).optional(),
+  color: z.string().regex(/^#[0-9A-Fa-f]{6}$/).optional(),
+  permissions: z.array(z.enum([
+    'MANAGE_COMMUNITY',
+    'MANAGE_CHANNELS',
+    'MANAGE_ROLES',
+    'MANAGE_MEMBERS',
+    'MANAGE_MESSAGES',
+    'CREATE_INVITES',
+    'SEND_MESSAGES',
+    'CONNECT_VOICE',
+    'UPLOAD_FILES',
+    'PIN_MESSAGES',
+    'MENTION_EVERYONE'
+  ])).optional(),
+  position: z.number().int().min(0).optional(),
+  isDefault: z.boolean().optional()
+});
+
+// PATCH to update a role
+export async function PATCH(
+  req: NextRequest,
+  { params }: { params: { communityId: string; roleId: string } }
+) {
+  try {
+    // Authenticate user
+    const { userId } = await auth();
+    if (!userId) {
+      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
+    }
+
+    // Validate parameters
+    const validatedParams = ParamsSchema.safeParse(params);
+    if (!validatedParams.success) {
+      return NextResponse.json({ error: "Invalid parameters", details: validatedParams.error.format() }, { status: 400 });
+    }
+
+    const { communityId, roleId } = validatedParams.data;
+
+    await connectToDatabase();
+
+    // Parse and validate request body
+    const body = await req.json();
+    const validatedBody = UpdateRoleSchema.safeParse(body);
+
+    if (!validatedBody.success) {
+      return NextResponse.json({
+        error: "Invalid role data",
+        details: validatedBody.error.format()
+      }, { status: 400 });
+    }
+
+    const { name, color, permissions, position, isDefault } = validatedBody.data;
+
+    // Find the role
+    const role = await Role.findOne({
+      _id: roleId,
+      community: communityId
+    });
+
+    if (!role) {
+      return NextResponse.json({ error: "Role not found" }, { status: 404 });
+    }
+
+    // Check if user is the creator or has MANAGE_ROLES permission
+    const isCreator = await isCommunityCreator(userId, communityId);
+    const canManageRoles = !isCreator ? await hasPermission(userId, communityId, 'MANAGE_ROLES') : false;
+
+    if (!isCreator && !canManageRoles) {
+      return NextResponse.json({
+        error: "You don't have permission to update roles"
+      }, { status: 403 });
+    }
+
+    // If changing name, check if it conflicts with existing roles
+    if (name && name !== role.name) {
+      const existingRole = await Role.findOne({
+        community: communityId,
+        name: { $regex: new RegExp(`^${name}$`, 'i') }, // Case-insensitive match
+        _id: { $ne: roleId }
+      });
+
+      if (existingRole) {
+        return NextResponse.json({
+          error: "A role with this name already exists in this community"
+        }, { status: 409 });
+      }
+
+      role.name = name;
+    }
+
+    // Update other fields if provided
+    if (color !== undefined) {
+      role.color = color;
+    }
+
+    if (permissions !== undefined) {
+      role.permissions = permissions;
+    }
+
+    if (position !== undefined) {
+      role.position = position;
+    }
+
+    if (isDefault !== undefined) {
+      role.isDefault = isDefault;
+    }
+
+    await role.save();
+
+    // Format the response
+    const formattedRole: RoleInfo = {
+      id: role._id.toString(),
+      name: role.name,
+      color: role.color,
+      position: role.position,
+      isDefault: role.isDefault
+    };
+
+    return NextResponse.json({
+      role: formattedRole,
+      permissions: role.permissions
+    }, { status: 200 });
+  } catch (error) {
+    console.error("[UPDATE ROLE]", error);
+    return NextResponse.json({ error: "Failed to update role" }, { status: 500 });
+  }
+}
+
+// DELETE a role
+export async function DELETE(
+  req: NextRequest,
+  { params }: { params: { communityId: string; roleId: string } }
+) {
+  try {
+    // Authenticate user
+    const { userId } = await auth();
+    if (!userId) {
+      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
+    }
+
+    // Validate parameters
+    const validatedParams = ParamsSchema.safeParse(params);
+    if (!validatedParams.success) {
+      return NextResponse.json({ error: "Invalid parameters", details: validatedParams.error.format() }, { status: 400 });
+    }
+
+    const { communityId, roleId } = validatedParams.data;
+
+    await connectToDatabase();
+
+    // Find the role
+    const role = await Role.findOne({
+      _id: roleId,
+      community: communityId
+    });
+
+    if (!role) {
+      return NextResponse.json({ error: "Role not found" }, { status: 404 });
+    }
+
+    // Check if it's the default role
+    if (role.isDefault) {
+      return NextResponse.json({ error: "Cannot delete the default role" }, { status: 400 });
+    }
+
+    // Check if user is the creator or has MANAGE_ROLES permission
+    const isCreator = await isCommunityCreator(userId, communityId);
+    const canManageRoles = !isCreator ? await hasPermission(userId, communityId, 'MANAGE_ROLES') : false;
+
+    if (!isCreator && !canManageRoles) {
+      return NextResponse.json({
+        error: "You don't have permission to delete roles"
+      }, { status: 403 });
+    }
+
+    // Count total roles to ensure we're not deleting the last role
+    const roleCount = await Role.countDocuments({ community: communityId });
+    if (roleCount <= 1) {
+      return NextResponse.json({
+        error: "Cannot delete the only role in the community"
+      }, { status: 400 });
+    }
+
+    // Start a transaction for atomicity
+    const session = await Role.startSession();
+    try {
+      await session.withTransaction(async () => {
+        // Remove the role from all memberships
+        await Membership.updateMany(
+          { community: communityId, roles: roleId },
+          { $pull: { roles: roleId } },
+          { session }
+        );
+
+        // Delete the role
+        await Role.findByIdAndDelete(roleId, { session });
+      });
+
+      return NextResponse.json({
+        success: true,
+        message: "Role deleted successfully"
+      }, { status: 200 });
+    } finally {
+      await session.endSession();
+    }
+  } catch (error) {
+    console.error("[DELETE ROLE]", error);
+    return NextResponse.json({ error: "Failed to delete role" }, { status: 500 });
+  }
+}
\ No newline at end of file
Index: src/app/api/communities/[communityId]/members/[memberId]/roles/route.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/app/api/communities/[communityId]/members/[memberId]/roles/route.ts b/src/app/api/communities/[communityId]/members/[memberId]/roles/route.ts
new file mode 100644
--- /dev/null	(date 1747009941849)
+++ b/src/app/api/communities/[communityId]/members/[memberId]/roles/route.ts	(date 1747009941849)
@@ -0,0 +1,200 @@
+// src/app/api/communities/[communityId]/members/[memberId]/roles/route.ts
+import { NextRequest, NextResponse } from "next/server";
+import { auth } from "@clerk/nextjs/server";
+import connectToDatabase from "@/lib/dbConnect";
+import Community from "@/models/Community";
+import Role from "@/models/Role";
+import User from "@/models/User";
+import Membership from "@/models/Membership";
+import { Types } from "mongoose";
+import { RoleInfo } from "@/types/api";
+
+// GET roles for a specific member
+export async function GET(
+  req: NextRequest,
+  { params }: { params: { communityId: string; memberId: string } }
+) {
+  try {
+    const { userId } = await auth();
+    if (!userId) {
+      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
+    }
+
+    await connectToDatabase();
+
+    const { communityId, memberId } = params;
+    if (!communityId || !memberId) {
+      return NextResponse.json({ error: "Community ID and Member ID are required" }, { status: 400 });
+    }
+
+    // Find the community
+    const community = await Community.findById(communityId);
+    if (!community) {
+      return NextResponse.json({ error: "Community not found" }, { status: 404 });
+    }
+
+    // Check if user is a member of the community
+    const user = await User.findOne({ clerkId: userId });
+    if (!user) {
+      return NextResponse.json({ error: "User not found" }, { status: 404 });
+    }
+
+    const isMember = community.members.some((id: Types.ObjectId) => 
+      id.equals(user._id)
+    );
+
+    if (!isMember) {
+      return NextResponse.json({ error: "You must be a member to view roles" }, { status: 403 });
+    }
+
+    // Find the target member
+    const member = await User.findById(memberId);
+    if (!member) {
+      return NextResponse.json({ error: "Member not found" }, { status: 404 });
+    }
+
+    // Check if the target user is a member of the community
+    const isTargetMember = community.members.some((id: Types.ObjectId) => 
+      id.equals(member._id)
+    );
+
+    if (!isTargetMember) {
+      return NextResponse.json({ error: "Target user is not a member of this community" }, { status: 404 });
+    }
+
+    // Find the membership record
+    const membership = await Membership.findOne({
+      user: memberId,
+      community: communityId
+    }).populate("roles").lean();
+
+    if (!membership) {
+      return NextResponse.json({ error: "Membership not found" }, { status: 404 });
+    }
+
+    // Format the response
+    const formattedRoles: RoleInfo[] = (membership.roles || []).map((role: any) => ({
+      id: role._id.toString(),
+      name: role.name,
+      color: role.color,
+      position: role.position,
+      isDefault: role.isDefault
+    }));
+
+    return NextResponse.json({ roles: formattedRoles }, { status: 200 });
+  } catch (error) {
+    console.error("[GET MEMBER ROLES]", error);
+    return NextResponse.json({ error: "Failed to fetch member roles" }, { status: 500 });
+  }
+}
+
+// POST to assign roles to a member
+export async function POST(
+  req: NextRequest,
+  { params }: { params: { communityId: string; memberId: string } }
+) {
+  try {
+    const { userId } = await auth();
+    if (!userId) {
+      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
+    }
+
+    await connectToDatabase();
+
+    const { communityId, memberId } = params;
+    if (!communityId || !memberId) {
+      return NextResponse.json({ error: "Community ID and Member ID are required" }, { status: 400 });
+    }
+
+    // Parse request body
+    const { roleIds } = await req.json();
+
+    if (!roleIds || !Array.isArray(roleIds)) {
+      return NextResponse.json({ error: "Role IDs array is required" }, { status: 400 });
+    }
+
+    // Find the community
+    const community = await Community.findById(communityId);
+    if (!community) {
+      return NextResponse.json({ error: "Community not found" }, { status: 404 });
+    }
+
+    // Check if user is a moderator or creator
+    const user = await User.findOne({ clerkId: userId });
+    if (!user) {
+      return NextResponse.json({ error: "User not found" }, { status: 404 });
+    }
+
+    const isModerator = community.moderators.some((id: Types.ObjectId) => 
+      id.equals(user._id)
+    );
+    
+    const isCreator = community.creator.equals(user._id);
+
+    if (!isModerator && !isCreator) {
+      return NextResponse.json({ error: "Only moderators or the creator can assign roles" }, { status: 403 });
+    }
+
+    // Find the target member
+    const member = await User.findById(memberId);
+    if (!member) {
+      return NextResponse.json({ error: "Member not found" }, { status: 404 });
+    }
+
+    // Check if the target user is a member of the community
+    const isTargetMember = community.members.some((id: Types.ObjectId) => 
+      id.equals(member._id)
+    );
+
+    if (!isTargetMember) {
+      return NextResponse.json({ error: "Target user is not a member of this community" }, { status: 404 });
+    }
+
+    // Verify all roles exist and belong to this community
+    const roles = await Role.find({
+      _id: { $in: roleIds },
+      community: communityId
+    });
+
+    if (roles.length !== roleIds.length) {
+      return NextResponse.json({ error: "One or more roles not found or don't belong to this community" }, { status: 400 });
+    }
+
+    // Find or create membership
+    let membership = await Membership.findOne({
+      user: memberId,
+      community: communityId
+    });
+
+    if (!membership) {
+      membership = await Membership.create({
+        user: memberId,
+        community: communityId,
+        roles: roleIds,
+        joinedAt: new Date(),
+        lastActive: new Date()
+      });
+    } else {
+      // Update roles
+      membership.roles = roleIds;
+      await membership.save();
+    }
+
+    // Format the response
+    const formattedRoles: RoleInfo[] = roles.map(role => ({
+      id: role._id.toString(),
+      name: role.name,
+      color: role.color,
+      position: role.position,
+      isDefault: role.isDefault
+    }));
+
+    return NextResponse.json({ 
+      roles: formattedRoles,
+      message: "Roles assigned successfully"
+    }, { status: 200 });
+  } catch (error) {
+    console.error("[ASSIGN ROLES]", error);
+    return NextResponse.json({ error: "Failed to assign roles" }, { status: 500 });
+  }
+}
Index: src/app/api/communities/[communityId]/roles/route.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/app/api/communities/[communityId]/roles/route.ts b/src/app/api/communities/[communityId]/roles/route.ts
new file mode 100644
--- /dev/null	(date 1747009941790)
+++ b/src/app/api/communities/[communityId]/roles/route.ts	(date 1747009941790)
@@ -0,0 +1,246 @@
+// src/app/api/communities/[communityId]/roles/route.ts
+import { NextRequest, NextResponse } from "next/server";
+import { auth } from "@clerk/nextjs/server";
+import connectToDatabase from "@/lib/dbConnect";
+import Community from "@/models/Community";
+import Role from "@/models/Role";
+import { RoleInfo } from "@/types/api";
+import { RolePaginationParams } from "@/types/roles";
+import { z } from "zod";
+import { isCommunityMember, isCommunityCreator, hasPermission } from "@/utils/roleUtils";
+
+// Validation schemas
+const ParamsSchema = z.object({
+  communityId: z.string().min(1)
+});
+
+const PaginationSchema = z.object({
+  page: z.coerce.number().int().min(1).default(1),
+  limit: z.coerce.number().int().min(1).max(100).default(20),
+  sortBy: z.enum(['position', 'name', 'createdAt']).default('position'),
+  sortOrder: z.enum(['asc', 'desc']).default('asc')
+});
+
+
+
+/**
+ * GET all roles for a community
+ */
+export async function GET(
+  req: NextRequest,
+  { params }: { params: { communityId: string } }
+) {
+  try {
+    // Authenticate user
+    const { userId } = await auth();
+    if (!userId) {
+      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
+    }
+
+    // Validate parameters
+    const validatedParams = ParamsSchema.safeParse(params);
+    if (!validatedParams.success) {
+      return NextResponse.json({ error: "Invalid parameters", details: validatedParams.error.format() }, { status: 400 });
+    }
+
+    const { communityId } = validatedParams.data;
+
+    // Parse query parameters for pagination
+    const url = new URL(req.url);
+    const paginationParams: RolePaginationParams = {
+      page: url.searchParams.get('page') ? Number(url.searchParams.get('page')) : undefined,
+      limit: url.searchParams.get('limit') ? Number(url.searchParams.get('limit')) : undefined,
+      sortBy: url.searchParams.get('sortBy') as 'position' | 'name' | 'createdAt' | undefined,
+      sortOrder: url.searchParams.get('sortOrder') as 'asc' | 'desc' | undefined
+    };
+
+    const validatedPagination = PaginationSchema.safeParse(paginationParams);
+    const pagination = validatedPagination.success ? validatedPagination.data : PaginationSchema.parse({});
+
+    await connectToDatabase();
+
+    // Find the community
+    const community = await Community.findById(communityId);
+    if (!community) {
+      return NextResponse.json({ error: "Community not found" }, { status: 404 });
+    }
+
+    // Check if user is a member of the community
+    const isMember = await isCommunityMember(userId, communityId);
+    if (!isMember) {
+      return NextResponse.json({ error: "You must be a member to view roles" }, { status: 403 });
+    }
+
+    // Calculate pagination values
+    const skip = (pagination.page - 1) * pagination.limit;
+    const sortDirection = pagination.sortOrder === 'asc' ? 1 : -1;
+    const sortOptions: Record<string, number> = { [pagination.sortBy]: sortDirection };
+
+    // Get total count for pagination metadata
+    const totalRoles = await Role.countDocuments({ community: communityId });
+
+    // Get roles with pagination
+    const roles = await Role.find({ community: communityId })
+      .sort(sortOptions)
+      .skip(skip)
+      .limit(pagination.limit)
+      .lean();
+
+    // Format the response
+    const formattedRoles: RoleInfo[] = roles.map((role) => ({
+      id: role._id.toString(),
+      name: role.name,
+      color: role.color,
+      position: role.position,
+      isDefault: role.isDefault
+    }));
+
+    // Prepare pagination metadata
+    const paginationMeta = {
+      page: pagination.page,
+      limit: pagination.limit,
+      totalItems: totalRoles,
+      totalPages: Math.ceil(totalRoles / pagination.limit),
+      hasMore: skip + roles.length < totalRoles
+    };
+
+    return NextResponse.json({
+      roles: formattedRoles,
+      pagination: paginationMeta
+    }, { status: 200 });
+  } catch (error) {
+    console.error("[GET ROLES]", error);
+    return NextResponse.json({ error: "Failed to fetch roles" }, { status: 500 });
+  }
+}
+
+// Validation schema for role creation
+const CreateRoleSchema = z.object({
+  name: z.string().min(1).max(100),
+  color: z.string().regex(/^#[0-9A-Fa-f]{6}$/).optional(),
+  permissions: z.array(z.enum([
+    'MANAGE_COMMUNITY',
+    'MANAGE_CHANNELS',
+    'MANAGE_ROLES',
+    'MANAGE_MEMBERS',
+    'MANAGE_MESSAGES',
+    'CREATE_INVITES',
+    'SEND_MESSAGES',
+    'CONNECT_VOICE',
+    'UPLOAD_FILES',
+    'PIN_MESSAGES',
+    'MENTION_EVERYONE'
+  ])).optional(),
+  isDefault: z.boolean().optional()
+});
+
+
+
+/**
+ * POST to create a new role
+ */
+export async function POST(
+  req: NextRequest,
+  { params }: { params: { communityId: string } }
+) {
+  try {
+    // Authenticate user
+    const { userId } = await auth();
+    if (!userId) {
+      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
+    }
+
+    // Validate parameters
+    const validatedParams = ParamsSchema.safeParse(params);
+    if (!validatedParams.success) {
+      return NextResponse.json({ error: "Invalid parameters", details: validatedParams.error.format() }, { status: 400 });
+    }
+
+    const { communityId } = validatedParams.data;
+
+    await connectToDatabase();
+
+    // Find the community
+    const community = await Community.findById(communityId);
+    if (!community) {
+      return NextResponse.json({ error: "Community not found" }, { status: 404 });
+    }
+
+    // Parse and validate request body
+    const body = await req.json();
+    const validatedBody = CreateRoleSchema.safeParse(body);
+
+    if (!validatedBody.success) {
+      return NextResponse.json({
+        error: "Invalid role data",
+        details: validatedBody.error.format()
+      }, { status: 400 });
+    }
+
+    const { name, color, permissions = [], isDefault = false } = validatedBody.data;
+
+    // Check if user is the creator or has MANAGE_ROLES permission
+    const isCreator = await isCommunityCreator(userId, communityId);
+    const canManageRoles = !isCreator ? await hasPermission(userId, communityId, 'MANAGE_ROLES') : false;
+
+    if (!isCreator && !canManageRoles) {
+      return NextResponse.json({
+        error: "You don't have permission to create roles"
+      }, { status: 403 });
+    }
+
+    // Check if role name already exists in this community
+    const existingRole = await Role.findOne({
+      community: communityId,
+      name: { $regex: new RegExp(`^${name}$`, 'i') } // Case-insensitive match
+    });
+
+    if (existingRole) {
+      return NextResponse.json({
+        error: "A role with this name already exists in this community"
+      }, { status: 409 });
+    }
+
+    // Get the highest position to place the new role at the end
+    const highestPositionRole = await Role.findOne({ community: communityId })
+      .sort({ position: -1 })
+      .limit(1);
+
+    const position = highestPositionRole ? highestPositionRole.position + 1 : 0;
+
+    // Create the new role
+    const role = await Role.create({
+      name,
+      color: color || '#99AAB5',
+      community: communityId,
+      permissions,
+      position,
+      isDefault
+    });
+
+    // If this is the first role or it's set as default, ensure it's the only default
+    if (isDefault) {
+      await Role.updateMany(
+        { community: communityId, _id: { $ne: role._id } },
+        { isDefault: false }
+      );
+    }
+
+    // Format the response
+    const formattedRole: RoleInfo = {
+      id: role._id.toString(),
+      name: role.name,
+      color: role.color,
+      position: role.position,
+      isDefault: role.isDefault
+    };
+
+    return NextResponse.json({
+      role: formattedRole,
+      permissions: role.permissions
+    }, { status: 201 });
+  } catch (error) {
+    console.error("[CREATE ROLE]", error);
+    return NextResponse.json({ error: "Failed to create role" }, { status: 500 });
+  }
+}
\ No newline at end of file
Index: src/app/api/users/[username]/posts/route.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/app/api/users/[username]/posts/route.ts b/src/app/api/users/[username]/posts/route.ts
new file mode 100644
--- /dev/null	(date 1747009941896)
+++ b/src/app/api/users/[username]/posts/route.ts	(date 1747009941896)
@@ -0,0 +1,32 @@
+// src/app/api/users/[username]/posts/route.ts
+
+import { NextRequest, NextResponse } from "next/server";
+import dbConnect from "@/lib/dbConnect";
+import Post from "@/models/Post";
+import User from "@/models/User";
+
+export async function GET(
+    _req: NextRequest,
+    { params }: { params: { username: string } }
+) {
+    try {
+        await dbConnect();
+
+        const user = await User.findOne({ username: params.username }).select("_id");
+
+        if (!user) {
+            return NextResponse.json({ error: "User not found" }, { status: 404 });
+        }
+
+        const posts = await Post.find({ author: user._id })
+            .sort({ createdAt: -1 })
+            .populate("author", "username name image")
+            .populate("community", "name image")
+            .lean();
+
+        return NextResponse.json({ posts }, { status: 200 });
+    } catch (error) {
+        console.error("[USER POSTS FETCH ERROR]:", error);
+        return NextResponse.json({ error: "Failed to fetch user posts" }, { status: 500 });
+    }
+}
Index: src/components/community/sidebar.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/community/sidebar.tsx b/src/components/community/sidebar.tsx
new file mode 100644
--- /dev/null	(date 1747009941922)
+++ b/src/components/community/sidebar.tsx	(date 1747009941922)
@@ -0,0 +1,251 @@
+"use client";
+
+import React, { useState, useEffect } from "react";
+import { useRouter, usePathname } from "next/navigation";
+import { Hash, Volume2, ChevronDown, ChevronRight, Plus, Settings, Lock } from "lucide-react";
+import { Button } from "@/components/ui/button";
+import { ScrollArea } from "@/components/ui/scroll-area";
+import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip";
+import { motion, AnimatePresence } from "framer-motion";
+import { useCommunityContext } from "@/context/SingleCommunityContext";
+import { Channel } from "@/types";
+import { cn } from "@/lib/utils";
+
+interface CommunitySidebarProps {
+  communityId: string;
+}
+
+export function CommunitySidebar({ communityId }: CommunitySidebarProps) {
+  const router = useRouter();
+  const pathname = usePathname();
+  const [isTextChannelsOpen, setIsTextChannelsOpen] = useState(true);
+  const [isVoiceChannelsOpen, setIsVoiceChannelsOpen] = useState(true);
+  const { community, channels, loading, error, fetchCommunity, fetchChannels } = useCommunityContext();
+
+  useEffect(() => {
+    if (communityId) {
+      fetchCommunity(communityId);
+      fetchChannels(communityId);
+    }
+  }, [communityId, fetchCommunity, fetchChannels]);
+
+  const textChannels = channels?.filter(channel => channel.type === 'text') || [];
+  const voiceChannels = channels?.filter(channel => channel.type === 'voice') || [];
+
+  const isChannelActive = (channelSlug: string) => {
+    return pathname === `/community/${communityId}/channel/${channelSlug}`;
+  };
+
+  const navigateToChannel = (channelSlug: string) => {
+    router.push(`/community/${communityId}/channel/${channelSlug}`);
+  };
+
+  const toggleTextChannels = () => {
+    setIsTextChannelsOpen(!isTextChannelsOpen);
+  };
+
+  const toggleVoiceChannels = () => {
+    setIsVoiceChannelsOpen(!isVoiceChannelsOpen);
+  };
+
+  if (loading) {
+    return (
+      <div className="w-64 bg-gray-50 border-r border-gray-200 h-full">
+        <div className="p-4">
+          <div className="animate-pulse h-6 w-32 bg-gray-200 rounded mb-4"></div>
+          <div className="animate-pulse h-8 w-full bg-gray-200 rounded mb-2"></div>
+          <div className="animate-pulse h-8 w-full bg-gray-200 rounded mb-2"></div>
+          <div className="animate-pulse h-8 w-full bg-gray-200 rounded"></div>
+        </div>
+      </div>
+    );
+  }
+
+  if (error || !community) {
+    return (
+      <div className="w-64 bg-gray-50 border-r border-gray-200 h-full p-4">
+        <div className="text-red-500">Error loading community</div>
+      </div>
+    );
+  }
+
+  return (
+    <motion.div
+      className="w-64 bg-gray-50 border-r border-gray-200 h-full flex flex-col"
+      initial={{ opacity: 0, x: -20 }}
+      animate={{ opacity: 1, x: 0 }}
+      transition={{ duration: 0.3 }}
+    >
+      <ScrollArea className="flex-1">
+        <div className="p-4">
+          {/* Text Channels */}
+          <div className="mb-4">
+            <div
+              className="flex items-center justify-between mb-2 cursor-pointer group"
+              onClick={toggleTextChannels}
+            >
+              <div className="flex items-center text-sm font-medium text-gray-500 group-hover:text-gray-700">
+                {isTextChannelsOpen ? (
+                  <ChevronDown className="h-4 w-4 mr-1" />
+                ) : (
+                  <ChevronRight className="h-4 w-4 mr-1" />
+                )}
+                TEXT CHANNELS
+              </div>
+
+              {(community.isCreator || community.isModerator) && (
+                <TooltipProvider>
+                  <Tooltip>
+                    <TooltipTrigger asChild>
+                      <Button
+                        variant="ghost"
+                        size="icon"
+                        className="h-5 w-5 opacity-0 group-hover:opacity-100"
+                        onClick={(e) => {
+                          e.stopPropagation();
+                          // Open create channel modal with type='text'
+                        }}
+                      >
+                        <Plus className="h-4 w-4" />
+                      </Button>
+                    </TooltipTrigger>
+                    <TooltipContent>
+                      <p>Create Text Channel</p>
+                    </TooltipContent>
+                  </Tooltip>
+                </TooltipProvider>
+              )}
+            </div>
+
+            <AnimatePresence>
+              {isTextChannelsOpen && (
+                <motion.div
+                  initial={{ height: 0, opacity: 0 }}
+                  animate={{ height: "auto", opacity: 1 }}
+                  exit={{ height: 0, opacity: 0 }}
+                  transition={{ duration: 0.2 }}
+                >
+                  {textChannels.length === 0 ? (
+                    <div className="text-sm text-gray-500 pl-6 py-1">
+                      No text channels
+                    </div>
+                  ) : (
+                    textChannels.map((channel) => (
+                      <div
+                        key={channel.id}
+                        className={cn(
+                          "flex items-center px-2 py-1 rounded-md cursor-pointer group",
+                          isChannelActive(channel.slug)
+                            ? "bg-gray-200 text-gray-900"
+                            : "text-gray-700 hover:bg-gray-100"
+                        )}
+                        onClick={() => navigateToChannel(channel.slug)}
+                      >
+                        <Hash className="h-4 w-4 mr-2 flex-shrink-0" />
+                        <span className="text-sm truncate">{channel.name}</span>
+                        {channel.isPrivate && (
+                          <Lock className="h-3 w-3 ml-1 text-gray-400" />
+                        )}
+                      </div>
+                    ))
+                  )}
+                </motion.div>
+              )}
+            </AnimatePresence>
+          </div>
+
+          {/* Voice Channels */}
+          <div>
+            <div
+              className="flex items-center justify-between mb-2 cursor-pointer group"
+              onClick={toggleVoiceChannels}
+            >
+              <div className="flex items-center text-sm font-medium text-gray-500 group-hover:text-gray-700">
+                {isVoiceChannelsOpen ? (
+                  <ChevronDown className="h-4 w-4 mr-1" />
+                ) : (
+                  <ChevronRight className="h-4 w-4 mr-1" />
+                )}
+                VOICE CHANNELS
+              </div>
+
+              {(community.isCreator || community.isModerator) && (
+                <TooltipProvider>
+                  <Tooltip>
+                    <TooltipTrigger asChild>
+                      <Button
+                        variant="ghost"
+                        size="icon"
+                        className="h-5 w-5 opacity-0 group-hover:opacity-100"
+                        onClick={(e) => {
+                          e.stopPropagation();
+                          // Open create channel modal with type='voice'
+                        }}
+                      >
+                        <Plus className="h-4 w-4" />
+                      </Button>
+                    </TooltipTrigger>
+                    <TooltipContent>
+                      <p>Create Voice Channel</p>
+                    </TooltipContent>
+                  </Tooltip>
+                </TooltipProvider>
+              )}
+            </div>
+
+            <AnimatePresence>
+              {isVoiceChannelsOpen && (
+                <motion.div
+                  initial={{ height: 0, opacity: 0 }}
+                  animate={{ height: "auto", opacity: 1 }}
+                  exit={{ height: 0, opacity: 0 }}
+                  transition={{ duration: 0.2 }}
+                >
+                  {voiceChannels.length === 0 ? (
+                    <div className="text-sm text-gray-500 pl-6 py-1">
+                      No voice channels
+                    </div>
+                  ) : (
+                    voiceChannels.map((channel) => (
+                      <div
+                        key={channel.id}
+                        className={cn(
+                          "flex items-center px-2 py-1 rounded-md cursor-pointer group",
+                          isChannelActive(channel.slug)
+                            ? "bg-gray-200 text-gray-900"
+                            : "text-gray-700 hover:bg-gray-100"
+                        )}
+                        onClick={() => navigateToChannel(channel.slug)}
+                      >
+                        <Volume2 className="h-4 w-4 mr-2 flex-shrink-0" />
+                        <span className="text-sm truncate">{channel.name}</span>
+                        {channel.isPrivate && (
+                          <Lock className="h-3 w-3 ml-1 text-gray-400" />
+                        )}
+                      </div>
+                    ))
+                  )}
+                </motion.div>
+              )}
+            </AnimatePresence>
+          </div>
+        </div>
+      </ScrollArea>
+
+      {/* User controls at bottom */}
+      {(community.isCreator || community.isModerator) && (
+        <div className="p-3 border-t border-gray-200">
+          <Button
+            variant="outline"
+            size="sm"
+            className="w-full justify-start"
+            onClick={() => router.push(`/community/${communityId}/settings`)}
+          >
+            <Settings className="h-4 w-4 mr-2" />
+            Community Settings
+          </Button>
+        </div>
+      )}
+    </motion.div>
+  );
+}
Index: src/components/community/layout.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/community/layout.tsx b/src/components/community/layout.tsx
new file mode 100644
--- /dev/null	(date 1747009941874)
+++ b/src/components/community/layout.tsx	(date 1747009941874)
@@ -0,0 +1,42 @@
+"use client";
+
+import React, { ReactNode } from "react";
+import { useParams, usePathname } from "next/navigation";
+import { CommunitySidebar } from "@/components/community/sidebar";
+import { CommunityHeader } from "@/components/community/header";
+import { motion } from "framer-motion";
+
+interface CommunityLayoutProps {
+  children: ReactNode;
+}
+
+export function CommunityLayout({ children }: CommunityLayoutProps) {
+  const params = useParams();
+  const pathname = usePathname();
+  const communityId = params.communityId as string;
+
+  // Determine if we're on a channel page
+  const isChannelPage = pathname.includes(`/community/${communityId}/channel/`) || pathname.includes(`/communities/${communityId}/channel/`);
+
+  return (
+    <div className="flex flex-col h-full min-h-screen">
+      {/* Community Header */}
+      <CommunityHeader communityId={communityId} />
+
+      <div className="flex flex-1 overflow-hidden">
+        {/* Community Sidebar */}
+        <CommunitySidebar communityId={communityId} />
+
+        {/* Main Content */}
+        <motion.main
+          className="flex-1 overflow-y-auto bg-white"
+          initial={{ opacity: 0 }}
+          animate={{ opacity: 1 }}
+          transition={{ duration: 0.3 }}
+        >
+          {children}
+        </motion.main>
+      </div>
+    </div>
+  );
+}
Index: src/components/community/channels/voice-channel.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/community/channels/voice-channel.tsx b/src/components/community/channels/voice-channel.tsx
new file mode 100644
--- /dev/null	(date 1747009942016)
+++ b/src/components/community/channels/voice-channel.tsx	(date 1747009942016)
@@ -0,0 +1,317 @@
+"use client";
+
+import React, { useState, useEffect } from "react";
+import { useParams } from "next/navigation";
+import { Mic, MicOff, Headphones, PhoneCall, PhoneOff, User, Volume2, VolumeX } from "lucide-react";
+import { Button } from "@/components/ui/button";
+import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
+import { useCommunityContext } from "@/context/SingleCommunityContext";
+import { Channel } from "@/types";
+import { motion } from "framer-motion";
+
+interface VoiceChannelProps {
+  channelSlug: string;
+}
+
+// Mock connected users for demo purposes
+interface ConnectedUser {
+  id: string;
+  name: string;
+  image?: string;
+  isSpeaking: boolean;
+  isMuted: boolean;
+  isDeafened: boolean;
+}
+
+export function VoiceChannel({ channelSlug }: VoiceChannelProps) {
+  const params = useParams();
+  const communityId = params.communityId as string;
+  const [channel, setChannel] = useState<Channel | null>(null);
+  const [loading, setLoading] = useState(true);
+  const [error, setError] = useState<string | null>(null);
+  const { channels, fetchChannels } = useCommunityContext();
+
+  // Voice channel state
+  const [isConnected, setIsConnected] = useState(false);
+  const [isMuted, setIsMuted] = useState(false);
+  const [isDeafened, setIsDeafened] = useState(false);
+  const [localStream, setLocalStream] = useState<MediaStream | null>(null);
+  const [peers, setPeers] = useState<Record<string, RTCPeerConnection>>({});
+  const [connecting, setConnecting] = useState(false);
+
+  // Mock connected users
+  const [connectedUsers, setConnectedUsers] = useState<ConnectedUser[]>([
+    {
+      id: "1",
+      name: "John Doe",
+      image: "https://github.com/shadcn.png",
+      isSpeaking: true,
+      isMuted: false,
+      isDeafened: false
+    },
+    {
+      id: "2",
+      name: "Jane Smith",
+      isSpeaking: false,
+      isMuted: true,
+      isDeafened: false
+    },
+    {
+      id: "3",
+      name: "Bob Johnson",
+      image: "https://github.com/shadcn.png",
+      isSpeaking: false,
+      isMuted: false,
+      isDeafened: true
+    }
+  ]);
+
+  useEffect(() => {
+    const fetchData = async () => {
+      try {
+        setLoading(true);
+
+        // If channels aren't loaded yet, fetch them
+        if (!channels || channels.length === 0) {
+          await fetchChannels(communityId);
+        }
+
+        // Find the channel by slug
+        const foundChannel = channels?.find(c => c.slug === channelSlug) || null;
+
+        if (foundChannel) {
+          setChannel(foundChannel);
+        } else {
+          setError("Channel not found");
+        }
+      } catch (err) {
+        setError("Failed to load channel");
+        console.error(err);
+      } finally {
+        setLoading(false);
+      }
+    };
+
+    fetchData();
+  }, [communityId, channelSlug, channels, fetchChannels]);
+
+  const toggleConnection = async () => {
+    if (isConnected) {
+      // Disconnect from voice channel
+      if (localStream) {
+        localStream.getTracks().forEach(track => track.stop());
+        setLocalStream(null);
+      }
+
+      // Close all peer connections
+      Object.values(peers).forEach(peer => peer.close());
+      setPeers({});
+
+      // Reset states
+      setIsConnected(false);
+      setIsMuted(false);
+      setIsDeafened(false);
+
+      // Notify server about disconnection
+      try {
+        await fetch(`/api/communities/${communityId}/channels/${channel.id}/voice/leave`, {
+          method: 'POST'
+        });
+      } catch (err) {
+        console.error('Error leaving voice channel:', err);
+      }
+    } else {
+      // Connect to voice channel
+      setConnecting(true);
+
+      try {
+        // Request user media
+        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
+        setLocalStream(stream);
+
+        // Join the voice channel
+        const response = await fetch(`/api/communities/${communityId}/channels/${channel.id}/voice/join`, {
+          method: 'POST'
+        });
+
+        if (!response.ok) {
+          throw new Error('Failed to join voice channel');
+        }
+
+        setIsConnected(true);
+      } catch (err) {
+        console.error('Error joining voice channel:', err);
+        if (err instanceof Error && err.name === 'NotAllowedError') {
+          alert('Microphone access is required to join a voice channel');
+        } else {
+          alert('Failed to join voice channel');
+        }
+
+        // Clean up if connection fails
+        if (localStream) {
+          localStream.getTracks().forEach(track => track.stop());
+          setLocalStream(null);
+        }
+      } finally {
+        setConnecting(false);
+      }
+    }
+  };
+
+  const toggleMute = () => {
+    if (localStream) {
+      localStream.getAudioTracks().forEach(track => {
+        track.enabled = isMuted;
+      });
+    }
+    setIsMuted(!isMuted);
+  };
+
+  const toggleDeafen = () => {
+    setIsDeafened(!isDeafened);
+
+    // If deafening, also mute
+    if (!isDeafened) {
+      setIsMuted(true);
+    }
+  };
+
+  if (loading) {
+    return (
+      <div className="flex flex-col h-full">
+        <div className="flex-1 p-4">
+          <div className="animate-pulse h-6 w-32 bg-gray-200 rounded mb-4"></div>
+          <div className="animate-pulse h-10 w-full bg-gray-200 rounded mb-2"></div>
+          <div className="animate-pulse h-10 w-full bg-gray-200 rounded mb-2"></div>
+          <div className="animate-pulse h-10 w-full bg-gray-200 rounded"></div>
+        </div>
+      </div>
+    );
+  }
+
+  if (error || !channel) {
+    return (
+      <div className="flex flex-col h-full p-4">
+        <div className="text-red-500">{error || "Channel not found"}</div>
+      </div>
+    );
+  }
+
+  return (
+    <div className="flex flex-col h-full">
+      {/* Channel Header */}
+      <div className="px-4 py-3 border-b border-gray-200">
+        <h2 className="text-lg font-semibold flex items-center">
+          <Headphones className="h-5 w-5 mr-2" />
+          {channel.name}
+        </h2>
+        {channel.description && (
+          <p className="text-sm text-gray-500">{channel.description}</p>
+        )}
+      </div>
+
+      {/* Voice Channel Content */}
+      <div className="flex-1 p-4">
+        <div className="mb-6">
+          <h3 className="text-sm font-medium text-gray-500 mb-3">VOICE CONNECTED - {connectedUsers.length}</h3>
+
+          <div className="space-y-2">
+            {connectedUsers.map(user => (
+              <motion.div
+                key={user.id}
+                className="flex items-center p-2 rounded-md bg-gray-50 border border-gray-100"
+                initial={{ opacity: 0, y: 5 }}
+                animate={{ opacity: 1, y: 0 }}
+                transition={{ duration: 0.2 }}
+                whileHover={{ backgroundColor: "#f9fafb" }}
+              >
+                <div className="relative">
+                  <Avatar className="h-8 w-8">
+                    <AvatarImage src={user.image} alt={user.name} />
+                    <AvatarFallback>
+                      <User className="h-4 w-4" />
+                    </AvatarFallback>
+                  </Avatar>
+
+                  {user.isSpeaking && (
+                    <span className="absolute bottom-0 right-0 h-3 w-3 rounded-full bg-green-500 border-2 border-white"></span>
+                  )}
+                </div>
+
+                <div className="ml-3 flex-1">
+                  <p className="text-sm font-medium">{user.name}</p>
+                </div>
+
+                <div className="flex items-center space-x-1">
+                  {user.isMuted && (
+                    <MicOff className="h-4 w-4 text-gray-400" />
+                  )}
+
+                  {user.isDeafened && (
+                    <VolumeX className="h-4 w-4 text-gray-400" />
+                  )}
+                </div>
+              </motion.div>
+            ))}
+          </div>
+        </div>
+
+        {!isConnected && (
+          <div className="flex justify-center">
+            <Button
+              onClick={toggleConnection}
+              className="bg-green-600 hover:bg-green-700 text-white"
+              disabled={connecting}
+            >
+              {connecting ? (
+                <>
+                  <span className="h-5 w-5 mr-2 animate-spin rounded-full border-2 border-white border-t-transparent"></span>
+                  Connecting...
+                </>
+              ) : (
+                <>
+                  <PhoneCall className="h-5 w-5 mr-2" />
+                  Join Voice
+                </>
+              )}
+            </Button>
+          </div>
+        )}
+      </div>
+
+      {/* Voice Controls */}
+      {isConnected && (
+        <div className="p-4 border-t border-gray-200 bg-gray-50">
+          <div className="flex items-center justify-center space-x-4">
+            <Button
+              variant="outline"
+              size="icon"
+              className={isMuted ? "bg-red-100 text-red-600 border-red-200" : ""}
+              onClick={toggleMute}
+            >
+              {isMuted ? <MicOff className="h-5 w-5" /> : <Mic className="h-5 w-5" />}
+            </Button>
+
+            <Button
+              variant="outline"
+              size="icon"
+              className={isDeafened ? "bg-red-100 text-red-600 border-red-200" : ""}
+              onClick={toggleDeafen}
+            >
+              {isDeafened ? <VolumeX className="h-5 w-5" /> : <Volume2 className="h-5 w-5" />}
+            </Button>
+
+            <Button
+              variant="outline"
+              size="icon"
+              className="bg-red-100 text-red-600 border-red-200"
+              onClick={toggleConnection}
+            >
+              <PhoneOff className="h-5 w-5" />
+            </Button>
+          </div>
+        </div>
+      )}
+    </div>
+  );
+}
Index: src/components/community/channels/text-channel.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/community/channels/text-channel.tsx b/src/components/community/channels/text-channel.tsx
new file mode 100644
--- /dev/null	(date 1747009942134)
+++ b/src/components/community/channels/text-channel.tsx	(date 1747009942134)
@@ -0,0 +1,107 @@
+"use client";
+
+import React, { useState, useEffect, useRef } from "react";
+import { useParams } from "next/navigation";
+import { MessageList } from "@/components/community/messages/message-list";
+import { MessageInput } from "@/components/community/messages/message-input";
+import { useCommunityContext } from "@/context/SingleCommunityContext";
+import { Channel } from "@/types";
+
+interface TextChannelProps {
+  channelSlug: string;
+}
+
+export function TextChannel({ channelSlug }: TextChannelProps) {
+  const params = useParams();
+  const communityId = params.communityId as string;
+  const [channel, setChannel] = useState<Channel | null>(null);
+  const [loading, setLoading] = useState(true);
+  const [error, setError] = useState<string | null>(null);
+  const { channels, fetchChannels } = useCommunityContext();
+  const messagesEndRef = useRef<HTMLDivElement>(null);
+
+  useEffect(() => {
+    const fetchData = async () => {
+      try {
+        setLoading(true);
+
+        // If channels aren't loaded yet, fetch them
+        if (!channels || channels.length === 0) {
+          await fetchChannels(communityId);
+        }
+
+        // Find the channel by slug
+        const foundChannel = channels?.find(c => c.slug === channelSlug) || null;
+
+        if (foundChannel) {
+          setChannel(foundChannel);
+        } else {
+          setError("Channel not found");
+        }
+      } catch (err) {
+        setError("Failed to load channel");
+        console.error(err);
+      } finally {
+        setLoading(false);
+      }
+    };
+
+    fetchData();
+  }, [communityId, channelSlug, channels, fetchChannels]);
+
+  const scrollToBottom = () => {
+    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
+  };
+
+  if (loading) {
+    return (
+      <div className="flex flex-col h-full">
+        <div className="flex-1 p-4">
+          <div className="animate-pulse h-6 w-32 bg-gray-200 rounded mb-4"></div>
+          <div className="animate-pulse h-10 w-full bg-gray-200 rounded mb-2"></div>
+          <div className="animate-pulse h-10 w-full bg-gray-200 rounded mb-2"></div>
+          <div className="animate-pulse h-10 w-full bg-gray-200 rounded"></div>
+        </div>
+      </div>
+    );
+  }
+
+  if (error || !channel) {
+    return (
+      <div className="flex flex-col h-full p-4">
+        <div className="text-red-500">{error || "Channel not found"}</div>
+      </div>
+    );
+  }
+
+  return (
+    <div className="flex flex-col h-full">
+      {/* Channel Header */}
+      <div className="px-4 py-3 border-b border-gray-200">
+        <h2 className="text-lg font-semibold">#{channel.name}</h2>
+        {channel.description && (
+          <p className="text-sm text-gray-500">{channel.description}</p>
+        )}
+      </div>
+
+      {/* Messages */}
+      <div className="flex-1 overflow-y-auto">
+        <MessageList
+          communityId={communityId}
+          channelId={channel.id}
+          onNewMessage={scrollToBottom}
+        />
+        <div ref={messagesEndRef} />
+      </div>
+
+      {/* Message Input */}
+      <div className="p-4 border-t border-gray-200">
+        <MessageInput
+          communityId={communityId}
+          channelId={channel.id}
+          onMessageSent={scrollToBottom}
+        />
+      </div>
+    </div>
+  );
+}
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AnalysisUIOptions\">\r\n    <option name=\"SPLITTER_PROPORTION\" value=\"0.36594203\" />\r\n  </component>\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"196753e1-821d-400d-9d9c-9e2c8b595634\" name=\"Changes\" comment=\"Refactor database connection handling, improve middleware configuration, and enhance Post model structure&#10;&#10;Co-authored-by: princedwivedi2 &lt;officialprince921@gmail.com&gt;\">\r\n      <change afterPath=\"$PROJECT_DIR$/src/app/(main)/community/[communityId]/page.tsx\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/app/(main)/profile/[userId]/page.tsx\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/app/api/users/[userId]/communities/route.ts\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/components/ui/avatar.tsx\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/components/ui/card.tsx\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/components/ui/tooltip.tsx\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/next.config.ts\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/next.config.ts\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/package-lock.json\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/package-lock.json\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/package.json\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/package.json\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/app/(main)/home/page.tsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/app/(main)/home/page.tsx\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/app/api/communities/[communityId]/membership/route.ts\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/app/api/communities/[communityId]/membership/route.ts\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/app/api/communities/[communityId]/route.ts\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/app/api/communities/[communityId]/route.ts\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/app/api/communities/route.ts\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/app/api/communities/route.ts\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/app/api/posts/feed/route.ts\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/app/api/posts/feed/route.ts\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/app/api/posts/route.ts\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/app/api/posts/route.ts\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/app/api/users/[userId]/follow/route.ts\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/app/api/users/[userId]/follow/route.ts\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/app/api/users/[userId]/route.ts\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/app/api/users/[userId]/route.ts\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/app/api/webhook/clerk/route.ts\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/app/api/webhook/clerk/route.ts\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/app/layout.tsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/app/layout.tsx\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/components/community-list.tsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/components/community-list.tsx\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/components/create-post-form.tsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/components/create-post-form.tsx\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/components/ui/tabs.tsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/components/ui/tabs.tsx\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/components/under-development.tsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/components/under-development.tsx\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/context/CommunityContext.tsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/context/CommunityContext.tsx\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/context/PostContext.tsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/context/PostContext.tsx\" afterDir=\"false\" />\r\n    </list>\r\n    <list id=\"c5eea045-d135-4827-b36b-ae86da822b84\" name=\"No push\" comment=\"\">\r\n      <change afterPath=\"$PROJECT_DIR$/.idea/AugmentWebviewStateStore.xml\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/next.config.js\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/next.config.mjs\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"DatabaseLocalColorSettings\">\r\n    <colors>\r\n      <entry key=\"e98f1c90-4a09-4b52-94ce-826c44f109a6\" value=\"Blue\" />\r\n    </colors>\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"TypeScript JSX File\" />\r\n        <option value=\"TypeScript File\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$\" value=\"main\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\">{\r\n  &quot;lastFilter&quot;: {\r\n    &quot;state&quot;: &quot;OPEN&quot;,\r\n    &quot;assignee&quot;: &quot;rishabh-ml&quot;\r\n  }\r\n}</component>\r\n  <component name=\"GithubPullRequestsUISettings\">{\r\n  &quot;selectedUrlAndAccountId&quot;: {\r\n    &quot;url&quot;: &quot;https://github.com/rishabh-ml/chattersphere&quot;,\r\n    &quot;accountId&quot;: &quot;5499b3b1-cae4-4331-afb5-f75bfde8b523&quot;\r\n  },\r\n  &quot;recentNewPullRequestHead&quot;: {\r\n    &quot;server&quot;: {\r\n      &quot;useHttp&quot;: false,\r\n      &quot;host&quot;: &quot;github.com&quot;,\r\n      &quot;port&quot;: null,\r\n      &quot;suffix&quot;: null\r\n    },\r\n    &quot;owner&quot;: &quot;rishabh-ml&quot;,\r\n    &quot;repository&quot;: &quot;chattersphere&quot;\r\n  }\r\n}</component>\r\n  <component name=\"HighlightingSettingsPerFile\">\r\n    <setting file=\"file://$PROJECT_DIR$/.next/types/app/api/communities/route.ts\" root0=\"FORCE_HIGHLIGHTING\" />\r\n  </component>\r\n  <component name=\"ProblemsViewState\">\r\n    <option name=\"selectedTabId\" value=\"CurrentFile\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 4\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2vv5Ugk8xzaD56Qdk1nTNqfbzVZ\" />\r\n  <component name=\"ProjectLevelVcsManager\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;ASKED_SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,\r\n    &quot;JavaScript Debug.Next.js: debug client-side.executor&quot;: &quot;Debug&quot;,\r\n    &quot;Jest.All Tests.executor&quot;: &quot;Run&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.git.unshallow&quot;: &quot;true&quot;,\r\n    &quot;git-widget-placeholder&quot;: &quot;frontend&quot;,\r\n    &quot;js.debugger.nextJs.config.created.client&quot;: &quot;true&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;C:/Users/datam/Desktop/chattersphere/public/avatars&quot;,\r\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.detected.package.standard&quot;: &quot;true&quot;,\r\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;node.js.selected.package.standard&quot;: &quot;&quot;,\r\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;nodejs.jest.jest_package&quot;: &quot;C:/Users/datam/Desktop/chattersphere&quot;,\r\n    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,\r\n    &quot;npm.dev.executor&quot;: &quot;Run&quot;,\r\n    &quot;npm.lint.executor&quot;: &quot;Run&quot;,\r\n    &quot;run.code.analysis.last.selected.profile&quot;: &quot;pProject Default&quot;,\r\n    &quot;settings.editor.selected.configurable&quot;: &quot;preferences.pluginManager&quot;,\r\n    &quot;ts.external.directory.path&quot;: &quot;C:\\\\Users\\\\datam\\\\Desktop\\\\chattersphere\\\\node_modules\\\\typescript\\\\lib&quot;,\r\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\datam\\Desktop\\chattersphere\\public\\avatars\" />\r\n    </key>\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\datam\\Desktop\\chattersphere\" />\r\n      <recent name=\"C:\\Users\\datam\\Desktop\\chattersphere\\src\\app\\(main)\" />\r\n      <recent name=\"C:\\Users\\datam\\Desktop\\chattersphere\\src\" />\r\n      <recent name=\"C:\\Users\\datam\\Desktop\\chattersphere\\public\" />\r\n      <recent name=\"C:\\Users\\datam\\Desktop\\chattersphere\\public\\avatars\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"npm.dev\">\r\n    <configuration name=\"Next.js: debug client-side\" type=\"JavascriptDebugType\" uri=\"http://localhost:3000/\">\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"dev\" type=\"js.build_tools.npm\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <package-json value=\"$PROJECT_DIR$/package.json\" />\r\n      <command value=\"run\" />\r\n      <scripts>\r\n        <script value=\"dev\" />\r\n      </scripts>\r\n      <node-interpreter value=\"project\" />\r\n      <envs />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"lint\" type=\"js.build_tools.npm\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <package-json value=\"$PROJECT_DIR$/package.json\" />\r\n      <command value=\"run\" />\r\n      <scripts>\r\n        <script value=\"lint\" />\r\n      </scripts>\r\n      <node-interpreter value=\"project\" />\r\n      <envs />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"npm.dev\" />\r\n        <item itemvalue=\"npm.lint\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-js-predefined-d6986cc7102b-f27c65a3e318-JavaScript-WS-251.23774.424\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"196753e1-821d-400d-9d9c-9e2c8b595634\" name=\"Changes\" comment=\"\" />\r\n      <created>1745012727869</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1745012727869</updated>\r\n      <workItem from=\"1745012730147\" duration=\"12983000\" />\r\n      <workItem from=\"1745062326619\" duration=\"11237000\" />\r\n      <workItem from=\"1745221723359\" duration=\"772000\" />\r\n      <workItem from=\"1745223495608\" duration=\"441000\" />\r\n      <workItem from=\"1745281223704\" duration=\"7574000\" />\r\n      <workItem from=\"1745345473671\" duration=\"5507000\" />\r\n      <workItem from=\"1745405054005\" duration=\"26144000\" />\r\n      <workItem from=\"1745476296578\" duration=\"90000\" />\r\n      <workItem from=\"1745476503177\" duration=\"17000\" />\r\n      <workItem from=\"1745476544897\" duration=\"1638000\" />\r\n      <workItem from=\"1745478713365\" duration=\"243000\" />\r\n      <workItem from=\"1745482797577\" duration=\"3843000\" />\r\n      <workItem from=\"1745487336664\" duration=\"10988000\" />\r\n      <workItem from=\"1745566959644\" duration=\"13884000\" />\r\n      <workItem from=\"1745592152307\" duration=\"4504000\" />\r\n      <workItem from=\"1745614438244\" duration=\"2816000\" />\r\n      <workItem from=\"1745687643701\" duration=\"180000\" />\r\n      <workItem from=\"1745687843042\" duration=\"16138000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"Add initial project structure with components, theming, and layout\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1745053161327</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1745053161327</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"Refactor layout and add manifest for PWA support\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1745053935494</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1745053935494</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"Add utility functions, components, and middleware for enhanced UI and authentication\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1745085396992</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1745085396993</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"Update ClerkProvider to use publishable key from environment variables\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1745085840632</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1745085840632</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"Refactor StepCard and TestimonialCard for improved performance and interactivity\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1745189201896</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1745189201896</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"Refactor layout for improved structure and remove unused theme script\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1745189890256</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1745189890256</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"Add database connection and feed components for improved data handling and user experience\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1745193501993</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1745193501993</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"Refactor database connection handling and improve error management in API routes\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1745194422326</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1745194422326</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"Add skeleton component and under-development pages; implement sidebar and dropdown menu\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1745411493657</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1745411493657</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"Refactor navigation links and add new pages for Privacy Policy and Contact Us&#10;&#10;Co-authored-by: princedwivedi2 &lt;officialprince921@gmail.com&gt;\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1745449308857</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1745449308857</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00011\" summary=\"Add Prettier configuration, ignore files, and implement skeleton components for posts and comments&#10;&#10;Co-authored-by: princedwivedi2 &lt;officialprince921@gmail.com&gt;\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1745571773014</created>\r\n      <option name=\"number\" value=\"00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1745571773014</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00012\" summary=\"Refactor Tailwind CSS configuration, enhance ExplorePage layout, and implement community API routes&#10;&#10;Co-authored-by: princedwivedi2 &lt;officialprince921@gmail.com&gt;\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1745580873167</created>\r\n      <option name=\"number\" value=\"00012\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1745580873167</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00013\" summary=\"Refactor database connection handling, improve middleware configuration, and enhance Post model structure&#10;&#10;Co-authored-by: princedwivedi2 &lt;officialprince921@gmail.com&gt;\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1745687922018</created>\r\n      <option name=\"number\" value=\"00013\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1745687922018</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"14\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"UnknownFeatures\">\r\n    <option featureType=\"com.intellij.fileTypeFactory\" implementationName=\"*.bin\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"Add initial project structure with components, theming, and layout\" />\r\n    <MESSAGE value=\"Refactor layout and add manifest for PWA support\" />\r\n    <MESSAGE value=\"Add utility functions, components, and middleware for enhanced UI and authentication\" />\r\n    <MESSAGE value=\"Update ClerkProvider to use publishable key from environment variables\" />\r\n    <MESSAGE value=\"Refactor StepCard and TestimonialCard for improved performance and interactivity\" />\r\n    <MESSAGE value=\"Refactor layout for improved structure and remove unused theme script\" />\r\n    <MESSAGE value=\"Add database connection and feed components for improved data handling and user experience\" />\r\n    <MESSAGE value=\"Refactor database connection handling and improve error management in API routes\" />\r\n    <MESSAGE value=\"Add skeleton component and under-development pages; implement sidebar and dropdown menu\" />\r\n    <MESSAGE value=\"Refactor navigation links and add new pages for Privacy Policy and Contact Us&#10;&#10;Co-authored-by: princedwivedi2 &lt;officialprince921@gmail.com&gt;\" />\r\n    <MESSAGE value=\"Add Prettier configuration, ignore files, and implement skeleton components for posts and comments&#10;&#10;Co-authored-by: princedwivedi2 &lt;officialprince921@gmail.com&gt;\" />\r\n    <MESSAGE value=\"Refactor Tailwind CSS configuration, enhance ExplorePage layout, and implement community API routes&#10;&#10;Co-authored-by: princedwivedi2 &lt;officialprince921@gmail.com&gt;\" />\r\n    <MESSAGE value=\"Refactor database connection handling, improve middleware configuration, and enhance Post model structure&#10;&#10;Co-authored-by: princedwivedi2 &lt;officialprince921@gmail.com&gt;\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Refactor database connection handling, improve middleware configuration, and enhance Post model structure&#10;&#10;Co-authored-by: princedwivedi2 &lt;officialprince921@gmail.com&gt;\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 4c74be27f19335e5b956190fea65a1f797f84875)
+++ b/.idea/workspace.xml	(date 1747009940212)
@@ -2,43 +2,161 @@
 <project version="4">
   <component name="AnalysisUIOptions">
     <option name="SPLITTER_PROPORTION" value="0.36594203" />
+    <option name="SCOPE_TYPE" value="3" />
   </component>
   <component name="AutoImportSettings">
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="196753e1-821d-400d-9d9c-9e2c8b595634" name="Changes" comment="Refactor database connection handling, improve middleware configuration, and enhance Post model structure&#10;&#10;Co-authored-by: princedwivedi2 &lt;officialprince921@gmail.com&gt;">
-      <change afterPath="$PROJECT_DIR$/src/app/(main)/community/[communityId]/page.tsx" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/app/(main)/profile/[userId]/page.tsx" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/app/api/users/[userId]/communities/route.ts" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/components/ui/avatar.tsx" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/components/ui/card.tsx" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/components/ui/tooltip.tsx" afterDir="false" />
+    <list default="true" id="196753e1-821d-400d-9d9c-9e2c8b595634" name="Changes" comment="Refactor community-related components, update API routes, and enhance error handling for post creation&#10;&#10;Co-authored-by: princedwivedi2 &lt;officialprince921@gmail.com&gt;">
+      <change afterPath="$PROJECT_DIR$/.eslintrc.json" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/public/avatars/prince.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/public/robots.txt" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/qodana.yaml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/app/(main)/community/[communityId]/channel/[channelSlug]/page.tsx" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/app/(main)/community/[communityId]/settings/page.tsx" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/app/(main)/messages/[conversationId]/page.tsx" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/app/(main)/messages/new/page.tsx" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/app/(main)/messages/page.tsx" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/app/(main)/profile/[username]/view/page.tsx" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/app/(main)/search/page.tsx" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/app/(main)/settings/account/page.tsx" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/app/(main)/settings/layout.tsx" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/app/(main)/settings/notifications/page.tsx" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/app/(main)/settings/privacy/page.tsx" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/app/(main)/settings/profile/page.tsx" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/app/api/bookmarks/[postId]/route.ts" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/app/api/bookmarks/[postId]/route.ts.new" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/app/api/bookmarks/route.ts" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/app/api/comments/[commentId]/route.ts" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/app/api/communities/[communityId]/channels/[channelId]/messages/[messageId]/route.ts" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/app/api/communities/[communityId]/channels/[channelId]/messages/route.ts" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/app/api/communities/[communityId]/channels/[channelId]/route.ts" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/app/api/communities/[communityId]/channels/route.ts" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/app/api/communities/[communityId]/members/[memberId]/roles/assign/route.ts" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/app/api/communities/[communityId]/members/[memberId]/roles/route.ts" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/app/api/communities/[communityId]/roles/[roleId]/route.ts" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/app/api/communities/[communityId]/roles/bulk/route.ts" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/app/api/communities/[communityId]/roles/route.ts" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/app/api/conversations/[conversationId]/messages/[messageId]/reactions/route.ts" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/app/api/conversations/[conversationId]/messages/[messageId]/route.ts" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/app/api/conversations/[conversationId]/messages/route.ts" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/app/api/conversations/[conversationId]/read/route.ts" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/app/api/conversations/[conversationId]/route.ts" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/app/api/conversations/route.ts" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/app/api/notifications/[notificationId]/route.ts" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/app/api/notifications/route.ts" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/app/api/posts/[postId]/comments/route.ts" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/app/api/posts/user/[username]/route.ts" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/app/api/search/route.ts" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/app/api/upload/route.ts" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/app/api/users/[username]/follow-by-id/route.ts" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/app/api/users/[username]/posts/route.ts" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/app/api/users/me/account/route.ts" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/app/api/users/me/email/route.ts" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/app/api/users/me/notification-settings/route.ts" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/app/api/users/me/password/route.ts" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/app/api/users/me/privacy-settings/route.ts" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/app/api/users/me/route.ts" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/app/error.tsx" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/app/global-error.tsx" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/app/not-found.tsx" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/components/comment-item.tsx" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/components/comment-section.tsx" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/components/community/README.md" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/components/community/channels/text-channel.tsx" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/components/community/channels/voice-channel.tsx" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/components/community/header.tsx" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/components/community/layout.tsx" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/components/community/messages/message-input.tsx" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/components/community/messages/message-item.tsx" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/components/community/messages/message-list.tsx" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/components/community/settings/roles-settings.tsx" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/components/community/sidebar.tsx" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/components/enhanced/right-sidebar.tsx" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/components/enhanced/sidebar.tsx" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/components/enhanced/topbar.tsx" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/components/error-boundary.tsx" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/components/global-loading.tsx" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/components/messages/conversation-list.tsx" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/components/messages/message-input.tsx" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/components/messages/message-item.tsx" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/components/messages/message-list.tsx" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/components/post-card-public.tsx" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/components/providers/theme-provider.tsx" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/components/rich-text-editor.tsx" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/components/sanitized-html.tsx" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/components/saved-post-feed.tsx" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/components/seo.tsx" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/components/skip-to-content.tsx" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/components/theme-toggle.tsx" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/components/ui/checkbox.tsx" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/components/ui/dialog.tsx" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/components/ui/label.tsx" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/components/ui/radio-group.tsx" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/components/ui/scroll-area.tsx" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/components/ui/separator.tsx" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/components/ui/switch.tsx" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/components/upload-avatar.tsx" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/components/upload-media.tsx" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/context/NotificationContext.tsx" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/context/SavedPostContext.tsx" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/context/SingleCommunityContext.tsx" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/hooks/use-debounce.ts" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/hooks/use-infinite-scroll.ts" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/hooks/use-local-storage.ts" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/lib/README-supabase.md" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/lib/supabase-upload.ts" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/lib/supabaseClient.ts" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/models/Channel.ts" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/models/Conversation.ts" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/models/DirectMessage.ts" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/models/Membership.ts" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/models/Message.ts" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/models/Notification.ts" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/models/Role.ts" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/types/api.ts" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/types/mongoose.ts" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/types/roles.ts" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/utils/notificationUtils.ts" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/utils/roleUtils.ts" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/next.config.ts" beforeDir="false" afterPath="$PROJECT_DIR$/next.config.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/README.md" beforeDir="false" afterPath="$PROJECT_DIR$/README.md" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/eslint.config.mjs" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/next.config.ts" beforeDir="false" />
       <change beforePath="$PROJECT_DIR$/package-lock.json" beforeDir="false" afterPath="$PROJECT_DIR$/package-lock.json" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/package.json" beforeDir="false" afterPath="$PROJECT_DIR$/package.json" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/app/(main)/home/page.tsx" beforeDir="false" afterPath="$PROJECT_DIR$/src/app/(main)/home/page.tsx" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/app/api/communities/[communityId]/membership/route.ts" beforeDir="false" afterPath="$PROJECT_DIR$/src/app/api/communities/[communityId]/membership/route.ts" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/app/api/communities/[communityId]/route.ts" beforeDir="false" afterPath="$PROJECT_DIR$/src/app/api/communities/[communityId]/route.ts" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/app/api/communities/route.ts" beforeDir="false" afterPath="$PROJECT_DIR$/src/app/api/communities/route.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/public/manifest.json" beforeDir="false" afterPath="$PROJECT_DIR$/public/manifest.json" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/app/(main)/community/[communityId]/page.tsx" beforeDir="false" afterPath="$PROJECT_DIR$/src/app/(main)/community/[communityId]/page.tsx" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/app/(main)/layout.tsx" beforeDir="false" afterPath="$PROJECT_DIR$/src/app/(main)/layout.tsx" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/app/(main)/notifications/page.tsx" beforeDir="false" afterPath="$PROJECT_DIR$/src/app/(main)/notifications/page.tsx" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/app/(main)/profile/[userId]/page.tsx" beforeDir="false" afterPath="$PROJECT_DIR$/src/app/(main)/profile/[username]/page.tsx" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/app/(main)/saved/page.tsx" beforeDir="false" afterPath="$PROJECT_DIR$/src/app/(main)/saved/page.tsx" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/app/api/posts/[postId]/vote/route.ts" beforeDir="false" afterPath="$PROJECT_DIR$/src/app/api/posts/[postId]/vote/route.ts" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/app/api/posts/feed/route.ts" beforeDir="false" afterPath="$PROJECT_DIR$/src/app/api/posts/feed/route.ts" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/app/api/posts/route.ts" beforeDir="false" afterPath="$PROJECT_DIR$/src/app/api/posts/route.ts" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/app/api/users/[userId]/follow/route.ts" beforeDir="false" afterPath="$PROJECT_DIR$/src/app/api/users/[userId]/follow/route.ts" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/app/api/users/[userId]/route.ts" beforeDir="false" afterPath="$PROJECT_DIR$/src/app/api/users/[userId]/route.ts" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/app/api/webhook/clerk/route.ts" beforeDir="false" afterPath="$PROJECT_DIR$/src/app/api/webhook/clerk/route.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/app/api/users/[userId]/communities/route.ts" beforeDir="false" afterPath="$PROJECT_DIR$/src/app/api/users/[username]/communities/route.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/app/api/users/[userId]/follow/route.ts" beforeDir="false" afterPath="$PROJECT_DIR$/src/app/api/users/[username]/follow/route.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/app/api/users/[userId]/route.ts" beforeDir="false" afterPath="$PROJECT_DIR$/src/app/api/users/[username]/route.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/app/favicon.ico" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/app/globals.css" beforeDir="false" afterPath="$PROJECT_DIR$/src/app/globals.css" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/app/layout.tsx" beforeDir="false" afterPath="$PROJECT_DIR$/src/app/layout.tsx" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/components/community-list.tsx" beforeDir="false" afterPath="$PROJECT_DIR$/src/components/community-list.tsx" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/components/create-post-form.tsx" beforeDir="false" afterPath="$PROJECT_DIR$/src/components/create-post-form.tsx" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/components/ui/tabs.tsx" beforeDir="false" afterPath="$PROJECT_DIR$/src/components/ui/tabs.tsx" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/components/under-development.tsx" beforeDir="false" afterPath="$PROJECT_DIR$/src/components/under-development.tsx" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/context/CommunityContext.tsx" beforeDir="false" afterPath="$PROJECT_DIR$/src/context/CommunityContext.tsx" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/components/post-card.tsx" beforeDir="false" afterPath="$PROJECT_DIR$/src/components/post-card.tsx" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/components/post-feed.tsx" beforeDir="false" afterPath="$PROJECT_DIR$/src/components/post-feed.tsx" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/components/right-sidebar.tsx" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/components/sidebar.tsx" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/components/topbar.tsx" beforeDir="false" />
       <change beforePath="$PROJECT_DIR$/src/context/PostContext.tsx" beforeDir="false" afterPath="$PROJECT_DIR$/src/context/PostContext.tsx" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/models/Comment.ts" beforeDir="false" afterPath="$PROJECT_DIR$/src/models/Comment.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/models/Community.ts" beforeDir="false" afterPath="$PROJECT_DIR$/src/models/Community.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/models/Post.ts" beforeDir="false" afterPath="$PROJECT_DIR$/src/models/Post.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/models/User.ts" beforeDir="false" afterPath="$PROJECT_DIR$/src/models/User.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/types.ts" beforeDir="false" afterPath="$PROJECT_DIR$/src/types.ts" afterDir="false" />
     </list>
     <list id="c5eea045-d135-4827-b36b-ae86da822b84" name="No push" comment="">
       <change afterPath="$PROJECT_DIR$/.idea/AugmentWebviewStateStore.xml" afterDir="false" />
       <change afterPath="$PROJECT_DIR$/next.config.js" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/next.config.mjs" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -112,9 +230,10 @@
     &quot;Jest.All Tests.executor&quot;: &quot;Run&quot;,
     &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
     &quot;RunOnceActivity.git.unshallow&quot;: &quot;true&quot;,
-    &quot;git-widget-placeholder&quot;: &quot;frontend&quot;,
+    &quot;git-widget-placeholder&quot;: &quot;#22 on frontend&quot;,
+    &quot;ignore.virus.scanning.warn.message&quot;: &quot;true&quot;,
     &quot;js.debugger.nextJs.config.created.client&quot;: &quot;true&quot;,
-    &quot;last_opened_file_path&quot;: &quot;C:/Users/datam/Desktop/chattersphere/public/avatars&quot;,
+    &quot;last_opened_file_path&quot;: &quot;C:/Users/datam/Desktop/chattersphere&quot;,
     &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
     &quot;node.js.detected.package.standard&quot;: &quot;true&quot;,
     &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,
@@ -123,6 +242,7 @@
     &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,
     &quot;nodejs.jest.jest_package&quot;: &quot;C:/Users/datam/Desktop/chattersphere&quot;,
     &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,
+    &quot;npm.build.executor&quot;: &quot;Run&quot;,
     &quot;npm.dev.executor&quot;: &quot;Run&quot;,
     &quot;npm.lint.executor&quot;: &quot;Run&quot;,
     &quot;run.code.analysis.last.selected.profile&quot;: &quot;pProject Default&quot;,
@@ -133,6 +253,7 @@
 }</component>
   <component name="RecentsManager">
     <key name="CopyFile.RECENT_KEYS">
+      <recent name="C:\Users\datam\Desktop\chattersphere" />
       <recent name="C:\Users\datam\Desktop\chattersphere\public\avatars" />
     </key>
     <key name="MoveFile.RECENT_KEYS">
@@ -145,6 +266,16 @@
   </component>
   <component name="RunManager" selected="npm.dev">
     <configuration name="Next.js: debug client-side" type="JavascriptDebugType" uri="http://localhost:3000/">
+      <method v="2" />
+    </configuration>
+    <configuration name="build" type="js.build_tools.npm" temporary="true" nameIsGenerated="true">
+      <package-json value="$PROJECT_DIR$/package.json" />
+      <command value="run" />
+      <scripts>
+        <script value="build" />
+      </scripts>
+      <node-interpreter value="project" />
+      <envs />
       <method v="2" />
     </configuration>
     <configuration name="dev" type="js.build_tools.npm" temporary="true" nameIsGenerated="true">
@@ -170,6 +301,7 @@
     <recent_temporary>
       <list>
         <item itemvalue="npm.dev" />
+        <item itemvalue="npm.build" />
         <item itemvalue="npm.lint" />
       </list>
     </recent_temporary>
@@ -206,7 +338,14 @@
       <workItem from="1745592152307" duration="4504000" />
       <workItem from="1745614438244" duration="2816000" />
       <workItem from="1745687643701" duration="180000" />
-      <workItem from="1745687843042" duration="16138000" />
+      <workItem from="1745687843042" duration="18507000" />
+      <workItem from="1745768599895" duration="14383000" />
+      <workItem from="1745875078927" duration="92000" />
+      <workItem from="1745875202065" duration="23232000" />
+      <workItem from="1746169748161" duration="462000" />
+      <workItem from="1746171631409" duration="3012000" />
+      <workItem from="1746414777850" duration="16182000" />
+      <workItem from="1746678964278" duration="1305000" />
     </task>
     <task id="LOCAL-00001" summary="Add initial project structure with components, theming, and layout">
       <option name="closed" value="true" />
@@ -312,7 +451,15 @@
       <option name="project" value="LOCAL" />
       <updated>1745687922018</updated>
     </task>
-    <option name="localTasksCounter" value="14" />
+    <task id="LOCAL-00014" summary="Refactor community-related components, update API routes, and enhance error handling for post creation&#10;&#10;Co-authored-by: princedwivedi2 &lt;officialprince921@gmail.com&gt;">
+      <option name="closed" value="true" />
+      <created>1745716355403</created>
+      <option name="number" value="00014" />
+      <option name="presentableId" value="LOCAL-00014" />
+      <option name="project" value="LOCAL" />
+      <updated>1745716355403</updated>
+    </task>
+    <option name="localTasksCounter" value="15" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
@@ -346,6 +493,7 @@
     <MESSAGE value="Add Prettier configuration, ignore files, and implement skeleton components for posts and comments&#10;&#10;Co-authored-by: princedwivedi2 &lt;officialprince921@gmail.com&gt;" />
     <MESSAGE value="Refactor Tailwind CSS configuration, enhance ExplorePage layout, and implement community API routes&#10;&#10;Co-authored-by: princedwivedi2 &lt;officialprince921@gmail.com&gt;" />
     <MESSAGE value="Refactor database connection handling, improve middleware configuration, and enhance Post model structure&#10;&#10;Co-authored-by: princedwivedi2 &lt;officialprince921@gmail.com&gt;" />
-    <option name="LAST_COMMIT_MESSAGE" value="Refactor database connection handling, improve middleware configuration, and enhance Post model structure&#10;&#10;Co-authored-by: princedwivedi2 &lt;officialprince921@gmail.com&gt;" />
+    <MESSAGE value="Refactor community-related components, update API routes, and enhance error handling for post creation&#10;&#10;Co-authored-by: princedwivedi2 &lt;officialprince921@gmail.com&gt;" />
+    <option name="LAST_COMMIT_MESSAGE" value="Refactor community-related components, update API routes, and enhance error handling for post creation&#10;&#10;Co-authored-by: princedwivedi2 &lt;officialprince921@gmail.com&gt;" />
   </component>
 </project>
\ No newline at end of file
Index: src/components/community/header.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/community/header.tsx b/src/components/community/header.tsx
new file mode 100644
--- /dev/null	(date 1747009941948)
+++ b/src/components/community/header.tsx	(date 1747009941948)
@@ -0,0 +1,147 @@
+"use client";
+
+import React, { useState, useEffect } from "react";
+import { useRouter } from "next/navigation";
+import { Settings, Users, Bell, LogOut, Menu } from "lucide-react";
+import { Button } from "@/components/ui/button";
+import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
+import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip";
+import { motion } from "framer-motion";
+import { useCommunityContext } from "@/context/SingleCommunityContext";
+
+interface CommunityHeaderProps {
+  communityId: string;
+}
+
+export function CommunityHeader({ communityId }: CommunityHeaderProps) {
+  const router = useRouter();
+  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
+  const { community, loading, error, fetchCommunity, leaveCommunity } = useCommunityContext();
+
+  useEffect(() => {
+    if (communityId) {
+      fetchCommunity(communityId);
+    }
+  }, [communityId, fetchCommunity]);
+
+  const handleLeaveCommunity = async () => {
+    if (confirm("Are you sure you want to leave this community?")) {
+      try {
+        await leaveCommunity(communityId);
+        router.push("/");
+      } catch (error) {
+        console.error("Failed to leave community:", error);
+      }
+    }
+  };
+
+  const toggleMobileMenu = () => {
+    setIsMobileMenuOpen(!isMobileMenuOpen);
+  };
+
+  if (loading) {
+    return (
+      <div className="h-16 bg-white border-b border-gray-200 flex items-center px-4 justify-between">
+        <div className="animate-pulse h-8 w-40 bg-gray-200 rounded"></div>
+        <div className="animate-pulse h-8 w-8 bg-gray-200 rounded-full"></div>
+      </div>
+    );
+  }
+
+  if (error || !community) {
+    return (
+      <div className="h-16 bg-white border-b border-gray-200 flex items-center px-4 justify-between">
+        <div className="text-red-500">Error loading community</div>
+      </div>
+    );
+  }
+
+  return (
+    <motion.header
+      className="h-16 bg-white border-b border-gray-200 flex items-center px-4 justify-between"
+      initial={{ opacity: 0, y: -10 }}
+      animate={{ opacity: 1, y: 0 }}
+      transition={{ duration: 0.3 }}
+    >
+      {/* Left side - Community info */}
+      <div className="flex items-center gap-3">
+        <Button
+          variant="ghost"
+          size="icon"
+          className="md:hidden"
+          onClick={toggleMobileMenu}
+        >
+          <Menu className="h-5 w-5" />
+        </Button>
+
+        <Avatar className="h-8 w-8">
+          <AvatarImage src={community.image} alt={community.name} />
+          <AvatarFallback>{community.name.substring(0, 2).toUpperCase()}</AvatarFallback>
+        </Avatar>
+
+        <h1 className="font-semibold text-lg">{community.name}</h1>
+      </div>
+
+      {/* Right side - Actions */}
+      <div className="flex items-center gap-2">
+        <TooltipProvider>
+          <Tooltip>
+            <TooltipTrigger asChild>
+              <Button variant="ghost" size="icon">
+                <Bell className="h-5 w-5" />
+              </Button>
+            </TooltipTrigger>
+            <TooltipContent>
+              <p>Notifications</p>
+            </TooltipContent>
+          </Tooltip>
+
+          <Tooltip>
+            <TooltipTrigger asChild>
+              <Button variant="ghost" size="icon">
+                <Users className="h-5 w-5" />
+              </Button>
+            </TooltipTrigger>
+            <TooltipContent>
+              <p>Members ({community.memberCount})</p>
+            </TooltipContent>
+          </Tooltip>
+
+          {community.isCreator && (
+            <Tooltip>
+              <TooltipTrigger asChild>
+                <Button
+                  variant="ghost"
+                  size="icon"
+                  onClick={() => router.push(`/community/${communityId}/settings`)}
+                >
+                  <Settings className="h-5 w-5" />
+                </Button>
+              </TooltipTrigger>
+              <TooltipContent>
+                <p>Community Settings</p>
+              </TooltipContent>
+            </Tooltip>
+          )}
+
+          {!community.isCreator && (
+            <Tooltip>
+              <TooltipTrigger asChild>
+                <Button
+                  variant="ghost"
+                  size="icon"
+                  onClick={handleLeaveCommunity}
+                >
+                  <LogOut className="h-5 w-5" />
+                </Button>
+              </TooltipTrigger>
+              <TooltipContent>
+                <p>Leave Community</p>
+              </TooltipContent>
+            </Tooltip>
+          )}
+        </TooltipProvider>
+      </div>
+    </motion.header>
+  );
+}
Index: src/components/community/messages/message-list.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/community/messages/message-list.tsx b/src/components/community/messages/message-list.tsx
new file mode 100644
--- /dev/null	(date 1747009942186)
+++ b/src/components/community/messages/message-list.tsx	(date 1747009942186)
@@ -0,0 +1,243 @@
+"use client";
+
+import React, { useState, useEffect, useRef } from "react";
+import { Message } from "@/types";
+import { MessageItem } from "@/components/community/messages/message-item";
+import { Loader2 } from "lucide-react";
+import { toast } from "sonner";
+
+interface MessageListProps {
+  communityId: string;
+  channelId: string;
+  onNewMessage?: () => void;
+}
+
+export function MessageList({ communityId, channelId, onNewMessage }: MessageListProps) {
+  const [messages, setMessages] = useState<Message[]>([]);
+  const [loading, setLoading] = useState(true);
+  const [error, setError] = useState<string | null>(null);
+  const [hasMore, setHasMore] = useState(false);
+  const [loadingMore, setLoadingMore] = useState(false);
+  const [nextCursor, setNextCursor] = useState<string | null>(null);
+  const observerRef = useRef<IntersectionObserver | null>(null);
+  const topMessageRef = useRef<HTMLDivElement | null>(null);
+
+  // Fetch initial messages
+  useEffect(() => {
+    const fetchMessages = async () => {
+      try {
+        setLoading(true);
+        setError(null);
+
+        const response = await fetch(`/api/communities/${communityId}/channels/${channelId}/messages`);
+
+        if (!response.ok) {
+          throw new Error("Failed to fetch messages");
+        }
+
+        const data = await response.json();
+        setMessages(data.messages);
+        setHasMore(data.pagination.hasMore);
+        setNextCursor(data.pagination.nextCursor);
+      } catch (err) {
+        console.error(err);
+        setError("Failed to load messages");
+        toast.error("Failed to load messages");
+      } finally {
+        setLoading(false);
+      }
+    };
+
+    if (communityId && channelId) {
+      fetchMessages();
+    }
+
+    // Clean up function
+    return () => {
+      // Clean up any subscriptions or intervals
+    };
+  }, [communityId, channelId]);
+
+  // Set up polling for new messages
+  useEffect(() => {
+    if (!communityId || !channelId || loading) return;
+
+    // Function to fetch new messages
+    const fetchNewMessages = async () => {
+      try {
+        // If we have messages, only get messages newer than the most recent one
+        const newestMessageDate = messages.length > 0
+          ? new Date(messages[0].createdAt).toISOString()
+          : undefined;
+
+        const url = new URL(`${window.location.origin}/api/communities/${communityId}/channels/${channelId}/messages`);
+        if (newestMessageDate) {
+          url.searchParams.append('after', newestMessageDate);
+        }
+
+        const response = await fetch(url.toString());
+
+        if (!response.ok) return;
+
+        const data = await response.json();
+        if (data.messages && data.messages.length > 0) {
+          // Add new messages to the top of the list
+          setMessages(prevMessages => [...data.messages, ...prevMessages]);
+
+          // Notify parent component about new messages
+          if (onNewMessage) {
+            onNewMessage();
+          }
+        }
+      } catch (err) {
+        console.error('Error polling for new messages:', err);
+      }
+    };
+
+    // Set up polling interval (every 5 seconds)
+    const intervalId = setInterval(fetchNewMessages, 5000);
+
+    // Clean up interval on unmount
+    return () => clearInterval(intervalId);
+  }, [communityId, channelId, messages, loading, onNewMessage]);
+
+  // Set up intersection observer for infinite scrolling
+  useEffect(() => {
+    if (loading || !hasMore) return;
+
+    const observer = new IntersectionObserver(
+      entries => {
+        if (entries[0].isIntersecting && hasMore && !loadingMore) {
+          loadMoreMessages();
+        }
+      },
+      { threshold: 0.1 }
+    );
+
+    observerRef.current = observer;
+
+    if (topMessageRef.current) {
+      observer.observe(topMessageRef.current);
+    }
+
+    return () => {
+      if (observerRef.current) {
+        observerRef.current.disconnect();
+      }
+    };
+  }, [loading, hasMore, loadingMore, messages]);
+
+  // Load more messages when scrolling up
+  const loadMoreMessages = async () => {
+    if (!nextCursor || loadingMore) return;
+
+    try {
+      setLoadingMore(true);
+
+      const response = await fetch(
+        `/api/communities/${communityId}/channels/${channelId}/messages?before=${nextCursor}`
+      );
+
+      if (!response.ok) {
+        throw new Error("Failed to fetch more messages");
+      }
+
+      const data = await response.json();
+
+      setMessages(prevMessages => [...data.messages, ...prevMessages]);
+      setHasMore(data.pagination.hasMore);
+      setNextCursor(data.pagination.nextCursor);
+    } catch (err) {
+      console.error(err);
+      toast.error("Failed to load more messages");
+    } finally {
+      setLoadingMore(false);
+    }
+  };
+
+  // Poll for new messages
+  useEffect(() => {
+    const pollInterval = setInterval(async () => {
+      if (!messages.length) return;
+
+      try {
+        const latestMessageDate = messages[messages.length - 1].createdAt;
+
+        const response = await fetch(
+          `/api/communities/${communityId}/channels/${channelId}/messages?after=${latestMessageDate}`
+        );
+
+        if (!response.ok) {
+          throw new Error("Failed to fetch new messages");
+        }
+
+        const data = await response.json();
+
+        if (data.messages.length > 0) {
+          setMessages(prevMessages => [...prevMessages, ...data.messages]);
+
+          // Notify parent to scroll to bottom
+          if (onNewMessage) {
+            onNewMessage();
+          }
+        }
+      } catch (err) {
+        console.error(err);
+      }
+    }, 10000); // Poll every 10 seconds
+
+    return () => clearInterval(pollInterval);
+  }, [communityId, channelId, messages, onNewMessage]);
+
+  if (loading) {
+    return (
+      <div className="flex justify-center items-center h-full">
+        <Loader2 className="h-8 w-8 animate-spin text-gray-400" />
+      </div>
+    );
+  }
+
+  if (error) {
+    return (
+      <div className="flex justify-center items-center h-full">
+        <p className="text-red-500">{error}</p>
+      </div>
+    );
+  }
+
+  if (messages.length === 0) {
+    return (
+      <div className="flex flex-col items-center justify-center h-full p-4 text-center">
+        <div className="bg-gray-50 rounded-lg p-6 max-w-md">
+          <h3 className="text-lg font-medium text-gray-900 mb-2">No messages yet</h3>
+          <p className="text-gray-500">Be the first to send a message in this channel!</p>
+        </div>
+      </div>
+    );
+  }
+
+  return (
+    <div className="p-4 space-y-4">
+      {/* Loading indicator for more messages */}
+      {loadingMore && (
+        <div className="flex justify-center py-2">
+          <Loader2 className="h-5 w-5 animate-spin text-gray-400" />
+        </div>
+      )}
+
+      {/* Message list */}
+      {messages.map((message, index) => (
+        <div
+          key={message.id}
+          ref={index === 0 ? topMessageRef : null}
+        >
+          <MessageItem
+            message={message}
+            communityId={communityId}
+            channelId={channelId}
+          />
+        </div>
+      ))}
+    </div>
+  );
+}
Index: src/components/community/messages/message-input.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/community/messages/message-input.tsx b/src/components/community/messages/message-input.tsx
new file mode 100644
--- /dev/null	(date 1747009942211)
+++ b/src/components/community/messages/message-input.tsx	(date 1747009942211)
@@ -0,0 +1,247 @@
+"use client";
+
+import React, { useState, useRef } from "react";
+import { Paperclip, Send, Image, Smile, X } from "lucide-react";
+import { Button } from "@/components/ui/button";
+import { toast } from "sonner";
+
+interface MessageInputProps {
+  communityId: string;
+  channelId: string;
+  onMessageSent?: () => void;
+}
+
+export function MessageInput({ communityId, channelId, onMessageSent }: MessageInputProps) {
+  const [message, setMessage] = useState("");
+  const [attachments, setAttachments] = useState<string[]>([]);
+  const [isUploading, setIsUploading] = useState(false);
+  const [isSending, setIsSending] = useState(false);
+  const fileInputRef = useRef<HTMLInputElement>(null);
+
+  const handleSendMessage = async () => {
+    if ((!message.trim() && attachments.length === 0) || isSending) {
+      return;
+    }
+
+    try {
+      setIsSending(true);
+
+      const response = await fetch(
+        `/api/communities/${communityId}/channels/${channelId}/messages`,
+        {
+          method: "POST",
+          headers: {
+            "Content-Type": "application/json",
+          },
+          body: JSON.stringify({
+            content: message,
+            attachments,
+          }),
+        }
+      );
+
+      if (!response.ok) {
+        throw new Error("Failed to send message");
+      }
+
+      // Clear input
+      setMessage("");
+      setAttachments([]);
+
+      // Notify parent
+      if (onMessageSent) {
+        onMessageSent();
+      }
+    } catch (err) {
+      console.error(err);
+      toast.error("Failed to send message");
+    } finally {
+      setIsSending(false);
+    }
+  };
+
+  const handleKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {
+    if (e.key === "Enter" && !e.shiftKey) {
+      e.preventDefault();
+      handleSendMessage();
+    }
+  };
+
+  const handleFileUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {
+    const files = e.target.files;
+    if (!files || files.length === 0) return;
+
+    try {
+      setIsUploading(true);
+
+      // Upload each file to the server
+      const uploadPromises = Array.from(files).map(async (file) => {
+        const formData = new FormData();
+        formData.append('file', file);
+
+        const response = await fetch('/api/upload', {
+          method: 'POST',
+          body: formData,
+        });
+
+        if (!response.ok) {
+          throw new Error(`Failed to upload ${file.name}`);
+        }
+
+        const data = await response.json();
+        return data.url; // Return the URL of the uploaded file
+      });
+
+      // Wait for all uploads to complete
+      const newAttachments = await Promise.all(uploadPromises);
+
+      // Add the new attachments to the existing ones
+      setAttachments(prev => [...prev, ...newAttachments]);
+
+      // Reset file input
+      if (fileInputRef.current) {
+        fileInputRef.current.value = "";
+      }
+
+      toast.success(`${files.length} file${files.length > 1 ? 's' : ''} uploaded`);
+    } catch (err) {
+      console.error(err);
+      toast.error("Failed to upload file");
+    } finally {
+      setIsUploading(false);
+    }
+  };
+
+  const removeAttachment = (index: number) => {
+    setAttachments(prev => prev.filter((_, i) => i !== index));
+  };
+
+  return (
+    <div className="relative">
+      {/* Attachments Preview */}
+      {attachments.length > 0 && (
+        <div className="mb-2 flex flex-wrap gap-2">
+          {attachments.map((attachment, index) => (
+            <div
+              key={index}
+              className="relative group rounded-md border border-gray-200 overflow-hidden"
+            >
+              {attachment.endsWith('.jpg') ||
+               attachment.endsWith('.jpeg') ||
+               attachment.endsWith('.png') ||
+               attachment.endsWith('.gif') ? (
+                <div className="relative h-20 w-20">
+                  <img
+                    src={attachment}
+                    alt="Attachment"
+                    className="h-full w-full object-cover"
+                  />
+                  <button
+                    className="absolute top-1 right-1 bg-black bg-opacity-50 rounded-full p-0.5 text-white opacity-0 group-hover:opacity-100 transition-opacity"
+                    onClick={() => removeAttachment(index)}
+                  >
+                    <X className="h-3 w-3" />
+                  </button>
+                </div>
+              ) : (
+                <div className="relative p-2 bg-gray-50 h-20 w-20 flex items-center justify-center">
+                  <div className="text-xs text-center truncate max-w-full">
+                    {attachment.split('/').pop()}
+                  </div>
+                  <button
+                    className="absolute top-1 right-1 bg-black bg-opacity-50 rounded-full p-0.5 text-white opacity-0 group-hover:opacity-100 transition-opacity"
+                    onClick={() => removeAttachment(index)}
+                  >
+                    <X className="h-3 w-3" />
+                  </button>
+                </div>
+              )}
+            </div>
+          ))}
+        </div>
+      )}
+
+      {/* Message Input */}
+      <div className="flex items-end border border-gray-200 rounded-md overflow-hidden focus-within:ring-2 focus-within:ring-blue-500 focus-within:border-transparent">
+        <textarea
+          className="flex-1 p-3 outline-none resize-none max-h-32"
+          placeholder="Type a message..."
+          value={message}
+          onChange={(e) => setMessage(e.target.value)}
+          onKeyDown={handleKeyDown}
+          rows={1}
+          style={{ minHeight: "44px" }}
+        />
+
+        <div className="flex items-center p-2 bg-gray-50">
+          {/* File Upload Button */}
+          <input
+            type="file"
+            ref={fileInputRef}
+            className="hidden"
+            onChange={handleFileUpload}
+            multiple
+          />
+
+          <Button
+            variant="ghost"
+            size="icon"
+            className="text-gray-500 hover:text-gray-700"
+            onClick={() => fileInputRef.current?.click()}
+            disabled={isUploading}
+          >
+            {isUploading ? (
+              <span className="h-5 w-5 animate-spin rounded-full border-2 border-gray-300 border-t-blue-600"></span>
+            ) : (
+              <Paperclip className="h-5 w-5" />
+            )}
+          </Button>
+
+          {/* Image Upload Button */}
+          <Button
+            variant="ghost"
+            size="icon"
+            className="text-gray-500 hover:text-gray-700"
+            onClick={() => {
+              if (fileInputRef.current) {
+                fileInputRef.current.accept = "image/*";
+                fileInputRef.current.click();
+              }
+            }}
+            disabled={isUploading}
+          >
+            <Image className="h-5 w-5" />
+          </Button>
+
+          {/* Emoji Button */}
+          <Button
+            variant="ghost"
+            size="icon"
+            className="text-gray-500 hover:text-gray-700"
+          >
+            <Smile className="h-5 w-5" />
+          </Button>
+
+          {/* Send Button */}
+          <Button
+            variant="ghost"
+            size="icon"
+            className={`${
+              message.trim() || attachments.length > 0
+                ? "text-blue-600 hover:text-blue-700"
+                : "text-gray-400"
+            }`}
+            onClick={handleSendMessage}
+            disabled={(!message.trim() && attachments.length === 0) || isSending}
+          >
+            {isSending ? (
+              <span className="h-5 w-5 animate-spin rounded-full border-2 border-gray-300 border-t-blue-600"></span>
+            ) : (
+              <Send className="h-5 w-5" />
+            )}
+          </Button>
+        </div>
+      </div>
+    </div>
+  );
+}
Index: src/components/ui/scroll-area.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/ui/scroll-area.tsx b/src/components/ui/scroll-area.tsx
new file mode 100644
--- /dev/null	(date 1747009942154)
+++ b/src/components/ui/scroll-area.tsx	(date 1747009942154)
@@ -0,0 +1,48 @@
+"use client"
+
+import * as React from "react"
+import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"
+
+import { cn } from "@/lib/utils"
+
+const ScrollArea = React.forwardRef<
+  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
+  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
+>(({ className, children, ...props }, ref) => (
+  <ScrollAreaPrimitive.Root
+    ref={ref}
+    className={cn("relative overflow-hidden", className)}
+    {...props}
+  >
+    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
+      {children}
+    </ScrollAreaPrimitive.Viewport>
+    <ScrollBar />
+    <ScrollAreaPrimitive.Corner />
+  </ScrollAreaPrimitive.Root>
+))
+ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName
+
+const ScrollBar = React.forwardRef<
+  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
+  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
+>(({ className, orientation = "vertical", ...props }, ref) => (
+  <ScrollAreaPrimitive.ScrollAreaScrollbar
+    ref={ref}
+    orientation={orientation}
+    className={cn(
+      "flex touch-none select-none transition-colors",
+      orientation === "vertical" &&
+        "h-full w-2.5 border-l border-l-transparent p-[1px]",
+      orientation === "horizontal" &&
+        "h-2.5 border-t border-t-transparent p-[1px]",
+      className
+    )}
+    {...props}
+  >
+    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-gray-300 dark:bg-gray-700" />
+  </ScrollAreaPrimitive.ScrollAreaScrollbar>
+))
+ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName
+
+export { ScrollArea, ScrollBar }
Index: src/context/SingleCommunityContext.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/context/SingleCommunityContext.tsx b/src/context/SingleCommunityContext.tsx
new file mode 100644
--- /dev/null	(date 1747009942323)
+++ b/src/context/SingleCommunityContext.tsx	(date 1747009942323)
@@ -0,0 +1,449 @@
+"use client";
+
+import React, { createContext, useContext, useState, useCallback, ReactNode } from 'react';
+import { Community, Channel, Role, Message } from '@/types';
+import { toast } from 'sonner';
+
+interface SingleCommunityContextType {
+  community: Community | null;
+  channels: Channel[] | null;
+  roles: Role[] | null;
+  loading: boolean;
+  error: string | null;
+  fetchCommunity: (communityId: string) => Promise<void>;
+  fetchChannels: (communityId: string) => Promise<void>;
+  fetchRoles: (communityId: string) => Promise<void>;
+  createChannel: (communityId: string, data: CreateChannelData) => Promise<Channel | null>;
+  updateChannel: (communityId: string, channelId: string, data: UpdateChannelData) => Promise<Channel | null>;
+  deleteChannel: (communityId: string, channelId: string) => Promise<boolean>;
+  createRole: (communityId: string, data: CreateRoleData) => Promise<Role | null>;
+  updateRole: (communityId: string, roleId: string, data: UpdateRoleData) => Promise<Role | null>;
+  deleteRole: (communityId: string, roleId: string) => Promise<boolean>;
+  joinCommunity: (communityId: string) => Promise<void>;
+  leaveCommunity: (communityId: string) => Promise<void>;
+}
+
+interface SingleCommunityProviderProps {
+  children: ReactNode;
+}
+
+interface CreateChannelData {
+  name: string;
+  type: 'text' | 'voice';
+  description?: string;
+  isPrivate?: boolean;
+}
+
+interface UpdateChannelData {
+  name?: string;
+  description?: string;
+  isPrivate?: boolean;
+  position?: number;
+}
+
+interface CreateRoleData {
+  name: string;
+  color?: string;
+  permissions?: string[];
+  isDefault?: boolean;
+}
+
+interface UpdateRoleData {
+  name?: string;
+  color?: string;
+  permissions?: string[];
+  position?: number;
+  isDefault?: boolean;
+}
+
+const SingleCommunityContext = createContext<SingleCommunityContextType | undefined>(undefined);
+
+export function SingleCommunityProvider({ children }: SingleCommunityProviderProps) {
+  const [community, setCommunity] = useState<Community | null>(null);
+  const [channels, setChannels] = useState<Channel[] | null>(null);
+  const [roles, setRoles] = useState<Role[] | null>(null);
+  const [loading, setLoading] = useState<boolean>(false);
+  const [error, setError] = useState<string | null>(null);
+
+  // Fetch community details
+  const fetchCommunity = useCallback(async (communityId: string) => {
+    try {
+      setLoading(true);
+      setError(null);
+
+      const response = await fetch(`/api/communities/${communityId}`);
+
+      if (!response.ok) {
+        throw new Error('Failed to fetch community');
+      }
+
+      const data = await response.json();
+      setCommunity(data.community);
+    } catch (err) {
+      setError(err instanceof Error ? err.message : 'An error occurred');
+      console.error(err);
+    } finally {
+      setLoading(false);
+    }
+  }, []);
+
+  // Fetch channels for a community
+  const fetchChannels = useCallback(async (communityId: string) => {
+    try {
+      setLoading(true);
+      setError(null);
+
+      const response = await fetch(`/api/communities/${communityId}/channels`);
+
+      if (!response.ok) {
+        throw new Error('Failed to fetch channels');
+      }
+
+      const data = await response.json();
+      setChannels(data.channels);
+    } catch (err) {
+      setError(err instanceof Error ? err.message : 'An error occurred');
+      console.error(err);
+    } finally {
+      setLoading(false);
+    }
+  }, []);
+
+  // Fetch roles for a community
+  const fetchRoles = useCallback(async (communityId: string) => {
+    try {
+      setLoading(true);
+      setError(null);
+
+      const response = await fetch(`/api/communities/${communityId}/roles`);
+
+      if (!response.ok) {
+        throw new Error('Failed to fetch roles');
+      }
+
+      const data = await response.json();
+      setRoles(data.roles);
+    } catch (err) {
+      setError(err instanceof Error ? err.message : 'An error occurred');
+      console.error(err);
+    } finally {
+      setLoading(false);
+    }
+  }, []);
+
+  // Create a new channel
+  const createChannel = useCallback(async (communityId: string, data: CreateChannelData): Promise<Channel | null> => {
+    try {
+      setLoading(true);
+      setError(null);
+
+      const response = await fetch(`/api/communities/${communityId}/channels`, {
+        method: 'POST',
+        headers: {
+          'Content-Type': 'application/json',
+        },
+        body: JSON.stringify(data),
+      });
+
+      if (!response.ok) {
+        throw new Error('Failed to create channel');
+      }
+
+      const responseData = await response.json();
+
+      // Update channels list
+      setChannels(prev => prev ? [...prev, responseData.channel] : [responseData.channel]);
+
+      toast.success(`Channel #${responseData.channel.name} created`);
+      return responseData.channel;
+    } catch (err) {
+      setError(err instanceof Error ? err.message : 'An error occurred');
+      console.error(err);
+      toast.error('Failed to create channel');
+      return null;
+    } finally {
+      setLoading(false);
+    }
+  }, []);
+
+  // Update a channel
+  const updateChannel = useCallback(async (communityId: string, channelId: string, data: UpdateChannelData): Promise<Channel | null> => {
+    try {
+      setLoading(true);
+      setError(null);
+
+      const response = await fetch(`/api/communities/${communityId}/channels/${channelId}`, {
+        method: 'PATCH',
+        headers: {
+          'Content-Type': 'application/json',
+        },
+        body: JSON.stringify(data),
+      });
+
+      if (!response.ok) {
+        throw new Error('Failed to update channel');
+      }
+
+      const responseData = await response.json();
+
+      // Update channels list
+      setChannels(prev =>
+        prev ? prev.map(channel =>
+          channel.id === channelId ? responseData.channel : channel
+        ) : [responseData.channel]
+      );
+
+      toast.success(`Channel #${responseData.channel.name} updated`);
+      return responseData.channel;
+    } catch (err) {
+      setError(err instanceof Error ? err.message : 'An error occurred');
+      console.error(err);
+      toast.error('Failed to update channel');
+      return null;
+    } finally {
+      setLoading(false);
+    }
+  }, []);
+
+  // Delete a channel
+  const deleteChannel = useCallback(async (communityId: string, channelId: string): Promise<boolean> => {
+    try {
+      setLoading(true);
+      setError(null);
+
+      const response = await fetch(`/api/communities/${communityId}/channels/${channelId}`, {
+        method: 'DELETE',
+      });
+
+      if (!response.ok) {
+        throw new Error('Failed to delete channel');
+      }
+
+      // Update channels list
+      setChannels(prev =>
+        prev ? prev.filter(channel => channel.id !== channelId) : null
+      );
+
+      toast.success('Channel deleted');
+      return true;
+    } catch (err) {
+      setError(err instanceof Error ? err.message : 'An error occurred');
+      console.error(err);
+      toast.error('Failed to delete channel');
+      return false;
+    } finally {
+      setLoading(false);
+    }
+  }, []);
+
+  // Create a new role
+  const createRole = useCallback(async (communityId: string, data: CreateRoleData): Promise<Role | null> => {
+    try {
+      setLoading(true);
+      setError(null);
+
+      const response = await fetch(`/api/communities/${communityId}/roles`, {
+        method: 'POST',
+        headers: {
+          'Content-Type': 'application/json',
+        },
+        body: JSON.stringify(data),
+      });
+
+      if (!response.ok) {
+        throw new Error('Failed to create role');
+      }
+
+      const responseData = await response.json();
+
+      // Update roles list
+      setRoles(prev => prev ? [...prev, responseData.role] : [responseData.role]);
+
+      toast.success(`Role ${responseData.role.name} created`);
+      return responseData.role;
+    } catch (err) {
+      setError(err instanceof Error ? err.message : 'An error occurred');
+      console.error(err);
+      toast.error('Failed to create role');
+      return null;
+    } finally {
+      setLoading(false);
+    }
+  }, []);
+
+  // Update a role
+  const updateRole = useCallback(async (communityId: string, roleId: string, data: UpdateRoleData): Promise<Role | null> => {
+    try {
+      setLoading(true);
+      setError(null);
+
+      const response = await fetch(`/api/communities/${communityId}/roles/${roleId}`, {
+        method: 'PATCH',
+        headers: {
+          'Content-Type': 'application/json',
+        },
+        body: JSON.stringify(data),
+      });
+
+      if (!response.ok) {
+        throw new Error('Failed to update role');
+      }
+
+      const responseData = await response.json();
+
+      // Update roles list
+      setRoles(prev =>
+        prev ? prev.map(role =>
+          role.id === roleId ? responseData.role : role
+        ) : [responseData.role]
+      );
+
+      toast.success(`Role ${responseData.role.name} updated`);
+      return responseData.role;
+    } catch (err) {
+      setError(err instanceof Error ? err.message : 'An error occurred');
+      console.error(err);
+      toast.error('Failed to update role');
+      return null;
+    } finally {
+      setLoading(false);
+    }
+  }, []);
+
+  // Delete a role
+  const deleteRole = useCallback(async (communityId: string, roleId: string): Promise<boolean> => {
+    try {
+      setLoading(true);
+      setError(null);
+
+      const response = await fetch(`/api/communities/${communityId}/roles/${roleId}`, {
+        method: 'DELETE',
+      });
+
+      if (!response.ok) {
+        throw new Error('Failed to delete role');
+      }
+
+      // Update roles list
+      setRoles(prev =>
+        prev ? prev.filter(role => role.id !== roleId) : null
+      );
+
+      toast.success('Role deleted');
+      return true;
+    } catch (err) {
+      setError(err instanceof Error ? err.message : 'An error occurred');
+      console.error(err);
+      toast.error('Failed to delete role');
+      return false;
+    } finally {
+      setLoading(false);
+    }
+  }, []);
+
+  // Join a community
+  const joinCommunity = useCallback(async (communityId: string) => {
+    try {
+      setLoading(true);
+      setError(null);
+
+      const response = await fetch(`/api/communities/${communityId}/membership`, {
+        method: 'POST',
+        headers: {
+          'Content-Type': 'application/json',
+        },
+        body: JSON.stringify({ action: 'join' }),
+      });
+
+      if (!response.ok) {
+        throw new Error('Failed to join community');
+      }
+
+      const data = await response.json();
+
+      // Update community
+      setCommunity(prev => prev ? {
+        ...prev,
+        memberCount: data.memberCount,
+        isMember: true,
+      } : null);
+
+      toast.success('Joined community');
+    } catch (err) {
+      setError(err instanceof Error ? err.message : 'An error occurred');
+      console.error(err);
+      toast.error('Failed to join community');
+    } finally {
+      setLoading(false);
+    }
+  }, []);
+
+  // Leave a community
+  const leaveCommunity = useCallback(async (communityId: string) => {
+    try {
+      setLoading(true);
+      setError(null);
+
+      const response = await fetch(`/api/communities/${communityId}/membership`, {
+        method: 'POST',
+        headers: {
+          'Content-Type': 'application/json',
+        },
+        body: JSON.stringify({ action: 'leave' }),
+      });
+
+      if (!response.ok) {
+        throw new Error('Failed to leave community');
+      }
+
+      const data = await response.json();
+
+      // Update community
+      setCommunity(prev => prev ? {
+        ...prev,
+        memberCount: data.memberCount,
+        isMember: false,
+      } : null);
+
+      toast.success('Left community');
+    } catch (err) {
+      setError(err instanceof Error ? err.message : 'An error occurred');
+      console.error(err);
+      toast.error('Failed to leave community');
+    } finally {
+      setLoading(false);
+    }
+  }, []);
+
+  const value = {
+    community,
+    channels,
+    roles,
+    loading,
+    error,
+    fetchCommunity,
+    fetchChannels,
+    fetchRoles,
+    createChannel,
+    updateChannel,
+    deleteChannel,
+    createRole,
+    updateRole,
+    deleteRole,
+    joinCommunity,
+    leaveCommunity,
+  };
+
+  return <SingleCommunityContext.Provider value={value}>{children}</SingleCommunityContext.Provider>;
+}
+
+export function useCommunityContext() {
+  const context = useContext(SingleCommunityContext);
+  if (context === undefined) {
+    throw new Error('useCommunityContext must be used within a SingleCommunityProvider');
+  }
+  return context;
+}
+
+// Alias for backward compatibility
+export const useSingleCommunityContext = useCommunityContext;
Index: src/components/saved-post-feed.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/saved-post-feed.tsx b/src/components/saved-post-feed.tsx
new file mode 100644
--- /dev/null	(date 1747009942345)
+++ b/src/components/saved-post-feed.tsx	(date 1747009942345)
@@ -0,0 +1,113 @@
+"use client";
+
+import { useEffect, useRef, useCallback } from "react";
+import PostCard from "@/components/post-card";
+import { useSavedPosts } from "@/context/SavedPostContext";
+import { motion } from "framer-motion";
+import { Loader2 } from "lucide-react";
+import PostSkeleton from "@/components/skeletons/post-skeleton";
+
+interface SavedPostFeedProps {
+  emptyMessage?: React.ReactNode;
+}
+
+export default function SavedPostFeed({ emptyMessage = "No saved posts to show" }: SavedPostFeedProps) {
+  const { savedPosts, loading, error, hasMore, fetchMoreSavedPosts, unsavePost } = useSavedPosts();
+  const observer = useRef<IntersectionObserver | null>(null);
+
+  // Set up the intersection observer for infinite scrolling
+  const lastPostRef = useCallback((node: HTMLDivElement | null) => {
+    if (loading) return;
+
+    if (observer.current) {
+      observer.current.disconnect();
+    }
+
+    observer.current = new IntersectionObserver(entries => {
+      if (entries[0].isIntersecting && hasMore) {
+        fetchMoreSavedPosts();
+      }
+    });
+
+    if (node) {
+      observer.current.observe(node);
+    }
+  }, [loading, hasMore, fetchMoreSavedPosts]);
+
+  // Clean up observer on unmount
+  useEffect(() => {
+    return () => {
+      if (observer.current) {
+        observer.current.disconnect();
+      }
+    };
+  }, []);
+
+  if (error) {
+    return (
+      <div className="bg-red-50 border border-red-200 rounded-lg p-4 text-red-600">
+        <p>Error loading saved posts: {error}</p>
+      </div>
+    );
+  }
+
+  return (
+    <div className="space-y-6">
+      {savedPosts.length === 0 && !loading ? (
+        <div className="bg-white rounded-lg border border-gray-100 p-8 text-center">
+          {typeof emptyMessage === 'string' ? (
+            <p className="text-gray-500">{emptyMessage}</p>
+          ) : (
+            emptyMessage
+          )}
+        </div>
+      ) : (
+        savedPosts.map((post, index) => {
+          if (index === savedPosts.length - 1) {
+            return (
+              <div key={post.id} ref={lastPostRef}>
+                <PostCard 
+                  post={post} 
+                  onUnsave={unsavePost} 
+                  showUnsaveButton={true} 
+                />
+              </div>
+            );
+          } else {
+            return (
+              <PostCard 
+                key={post.id} 
+                post={post} 
+                onUnsave={unsavePost} 
+                showUnsaveButton={true} 
+              />
+            );
+          }
+        })
+      )}
+
+      {loading && (
+        <div className="space-y-6">
+          {savedPosts.length === 0 ? (
+            // Show skeletons when initially loading
+            <>
+              <PostSkeleton key="skeleton-1" />
+              <PostSkeleton key="skeleton-2" />
+              <PostSkeleton key="skeleton-3" />
+            </>
+          ) : (
+            // Show spinner when loading more posts
+            <motion.div
+              className="flex justify-center py-4"
+              initial={{ opacity: 0 }}
+              animate={{ opacity: 1 }}
+              transition={{ duration: 0.3 }}
+            >
+              <Loader2 className="h-8 w-8 text-[#00AEEF] animate-spin" />
+            </motion.div>
+          )}
+        </div>
+      )}
+    </div>
+  );
+}
Index: src/components/community/messages/message-item.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/community/messages/message-item.tsx b/src/components/community/messages/message-item.tsx
new file mode 100644
--- /dev/null	(date 1747009942266)
+++ b/src/components/community/messages/message-item.tsx	(date 1747009942266)
@@ -0,0 +1,271 @@
+"use client";
+
+import React, { useState } from "react";
+import { Message } from "@/types";
+import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
+import { Button } from "@/components/ui/button";
+import { MoreHorizontal, Edit, Trash2, Pin, Reply } from "lucide-react";
+import { formatDistanceToNow } from "date-fns";
+import {
+  DropdownMenu,
+  DropdownMenuContent,
+  DropdownMenuItem,
+  DropdownMenuSeparator,
+  DropdownMenuTrigger
+} from "@/components/ui/dropdown-menu";
+import { useCommunityContext } from "@/context/SingleCommunityContext";
+import { toast } from "sonner";
+
+interface MessageItemProps {
+  message: Message;
+  communityId: string;
+  channelId: string;
+}
+
+export function MessageItem({ message, communityId, channelId }: MessageItemProps) {
+  const [isEditing, setIsEditing] = useState(false);
+  const [editedContent, setEditedContent] = useState(message.content);
+  const { community } = useCommunityContext();
+
+  const isAuthor = community?.isCreator || false; // Replace with actual check
+  const isModerator = community?.isModerator || false;
+  const canModerate = isAuthor || isModerator;
+
+  const formattedDate = formatDistanceToNow(new Date(message.createdAt), { addSuffix: true });
+
+  const handleEdit = () => {
+    setIsEditing(true);
+  };
+
+  const handleCancelEdit = () => {
+    setIsEditing(false);
+    setEditedContent(message.content);
+  };
+
+  const handleSaveEdit = async () => {
+    try {
+      const response = await fetch(
+        `/api/communities/${communityId}/channels/${channelId}/messages/${message.id}`,
+        {
+          method: "PATCH",
+          headers: {
+            "Content-Type": "application/json",
+          },
+          body: JSON.stringify({ content: editedContent }),
+        }
+      );
+
+      if (!response.ok) {
+        throw new Error("Failed to update message");
+      }
+
+      setIsEditing(false);
+      toast.success("Message updated");
+    } catch (err) {
+      console.error(err);
+      toast.error("Failed to update message");
+    }
+  };
+
+  const handleDelete = async () => {
+    if (!confirm("Are you sure you want to delete this message?")) {
+      return;
+    }
+
+    try {
+      const response = await fetch(
+        `/api/communities/${communityId}/channels/${channelId}/messages/${message.id}`,
+        {
+          method: "DELETE",
+        }
+      );
+
+      if (!response.ok) {
+        throw new Error("Failed to delete message");
+      }
+
+      toast.success("Message deleted");
+    } catch (err) {
+      console.error(err);
+      toast.error("Failed to delete message");
+    }
+  };
+
+  const handleTogglePin = async () => {
+    try {
+      const response = await fetch(
+        `/api/communities/${communityId}/channels/${channelId}/messages/${message.id}`,
+        {
+          method: "PATCH",
+          headers: {
+            "Content-Type": "application/json",
+          },
+          body: JSON.stringify({ isPinned: !message.isPinned }),
+        }
+      );
+
+      if (!response.ok) {
+        throw new Error("Failed to update message");
+      }
+
+      toast.success(message.isPinned ? "Message unpinned" : "Message pinned");
+    } catch (err) {
+      console.error(err);
+      toast.error("Failed to update message");
+    }
+  };
+
+  return (
+    <div className="group flex items-start hover:bg-gray-50 p-2 rounded-md -mx-2">
+      <Avatar className="h-10 w-10 mr-3 mt-0.5">
+        <AvatarImage src={message.author.image} alt={message.author.name} />
+        <AvatarFallback>{message.author.name.substring(0, 2).toUpperCase()}</AvatarFallback>
+      </Avatar>
+
+      <div className="flex-1 min-w-0">
+        <div className="flex items-center mb-1">
+          <span className="font-medium text-gray-900 mr-2">{message.author.name}</span>
+          <span className="text-xs text-gray-500">{formattedDate}</span>
+          {message.isEdited && (
+            <span className="text-xs text-gray-400 ml-1">(edited)</span>
+          )}
+          {message.isPinned && (
+            <span className="ml-2 text-xs bg-yellow-100 text-yellow-800 px-1.5 py-0.5 rounded-full">
+              Pinned
+            </span>
+          )}
+        </div>
+
+        {isEditing ? (
+          <div className="mb-2">
+            <textarea
+              className="w-full p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
+              value={editedContent}
+              onChange={(e) => setEditedContent(e.target.value)}
+              rows={3}
+              autoFocus
+            />
+
+            <div className="flex justify-end mt-2 space-x-2">
+              <Button
+                variant="outline"
+                size="sm"
+                onClick={handleCancelEdit}
+              >
+                Cancel
+              </Button>
+              <Button
+                size="sm"
+                onClick={handleSaveEdit}
+              >
+                Save
+              </Button>
+            </div>
+          </div>
+        ) : (
+          <div className="text-gray-800 whitespace-pre-wrap break-words">
+            {message.content}
+          </div>
+        )}
+
+        {message.attachments && message.attachments.length > 0 && (
+          <div className="mt-2 flex flex-wrap gap-2">
+            {message.attachments.map((attachment, index) => (
+              <div
+                key={index}
+                className="relative max-w-xs overflow-hidden rounded-md border border-gray-200"
+              >
+                {attachment.endsWith('.jpg') ||
+                 attachment.endsWith('.jpeg') ||
+                 attachment.endsWith('.png') ||
+                 attachment.endsWith('.gif') ? (
+                  <img
+                    src={attachment}
+                    alt="Attachment"
+                    className="max-h-60 object-contain"
+                  />
+                ) : (
+                  <div className="p-3 bg-gray-50 text-sm">
+                    <a
+                      href={attachment}
+                      target="_blank"
+                      rel="noopener noreferrer"
+                      className="text-blue-600 hover:underline"
+                    >
+                      {attachment.split('/').pop()}
+                    </a>
+                  </div>
+                )}
+              </div>
+            ))}
+          </div>
+        )}
+
+        {message.reactions && message.reactions.length > 0 && (
+          <div className="mt-2 flex flex-wrap gap-1">
+            {message.reactions.map((reaction, index) => (
+              <button
+                key={index}
+                className={`inline-flex items-center px-2 py-0.5 rounded-full text-xs ${
+                  reaction.hasReacted
+                    ? "bg-blue-100 text-blue-800"
+                    : "bg-gray-100 text-gray-800 hover:bg-gray-200"
+                }`}
+              >
+                <span className="mr-1">{reaction.emoji}</span>
+                <span>{reaction.count}</span>
+              </button>
+            ))}
+          </div>
+        )}
+      </div>
+
+      {/* Message Actions */}
+      <div className="opacity-0 group-hover:opacity-100 transition-opacity">
+        <DropdownMenu>
+          <DropdownMenuTrigger asChild>
+            <Button variant="ghost" size="icon" className="h-8 w-8">
+              <MoreHorizontal className="h-4 w-4" />
+            </Button>
+          </DropdownMenuTrigger>
+          <DropdownMenuContent align="end">
+            <DropdownMenuItem onClick={() => {}}>
+              <Reply className="h-4 w-4 mr-2" />
+              Reply
+            </DropdownMenuItem>
+
+            {(isAuthor || canModerate) && (
+              <>
+                <DropdownMenuSeparator />
+
+                {isAuthor && (
+                  <DropdownMenuItem onClick={handleEdit}>
+                    <Edit className="h-4 w-4 mr-2" />
+                    Edit Message
+                  </DropdownMenuItem>
+                )}
+
+                {canModerate && (
+                  <DropdownMenuItem onClick={handleTogglePin}>
+                    <Pin className="h-4 w-4 mr-2" />
+                    {message.isPinned ? "Unpin Message" : "Pin Message"}
+                  </DropdownMenuItem>
+                )}
+
+                {(isAuthor || canModerate) && (
+                  <DropdownMenuItem
+                    onClick={handleDelete}
+                    className="text-red-600 focus:text-red-600"
+                  >
+                    <Trash2 className="h-4 w-4 mr-2" />
+                    Delete Message
+                  </DropdownMenuItem>
+                )}
+              </>
+            )}
+          </DropdownMenuContent>
+        </DropdownMenu>
+      </div>
+    </div>
+  );
+}
Index: src/components/ui/dialog.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/ui/dialog.tsx b/src/components/ui/dialog.tsx
new file mode 100644
--- /dev/null	(date 1747009942286)
+++ b/src/components/ui/dialog.tsx	(date 1747009942286)
@@ -0,0 +1,122 @@
+"use client"
+
+import * as React from "react"
+import * as DialogPrimitive from "@radix-ui/react-dialog"
+import { X } from "lucide-react"
+
+import { cn } from "@/lib/utils"
+
+const Dialog = DialogPrimitive.Root
+
+const DialogTrigger = DialogPrimitive.Trigger
+
+const DialogPortal = DialogPrimitive.Portal
+
+const DialogClose = DialogPrimitive.Close
+
+const DialogOverlay = React.forwardRef<
+  React.ElementRef<typeof DialogPrimitive.Overlay>,
+  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
+>(({ className, ...props }, ref) => (
+  <DialogPrimitive.Overlay
+    ref={ref}
+    className={cn(
+      "fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
+      className
+    )}
+    {...props}
+  />
+))
+DialogOverlay.displayName = DialogPrimitive.Overlay.displayName
+
+const DialogContent = React.forwardRef<
+  React.ElementRef<typeof DialogPrimitive.Content>,
+  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
+>(({ className, children, ...props }, ref) => (
+  <DialogPortal>
+    <DialogOverlay />
+    <DialogPrimitive.Content
+      ref={ref}
+      className={cn(
+        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
+        className
+      )}
+      {...props}
+    >
+      {children}
+      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
+        <X className="h-4 w-4" />
+        <span className="sr-only">Close</span>
+      </DialogPrimitive.Close>
+    </DialogPrimitive.Content>
+  </DialogPortal>
+))
+DialogContent.displayName = DialogPrimitive.Content.displayName
+
+const DialogHeader = ({
+  className,
+  ...props
+}: React.HTMLAttributes<HTMLDivElement>) => (
+  <div
+    className={cn(
+      "flex flex-col space-y-1.5 text-center sm:text-left",
+      className
+    )}
+    {...props}
+  />
+)
+DialogHeader.displayName = "DialogHeader"
+
+const DialogFooter = ({
+  className,
+  ...props
+}: React.HTMLAttributes<HTMLDivElement>) => (
+  <div
+    className={cn(
+      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
+      className
+    )}
+    {...props}
+  />
+)
+DialogFooter.displayName = "DialogFooter"
+
+const DialogTitle = React.forwardRef<
+  React.ElementRef<typeof DialogPrimitive.Title>,
+  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
+>(({ className, ...props }, ref) => (
+  <DialogPrimitive.Title
+    ref={ref}
+    className={cn(
+      "text-lg font-semibold leading-none tracking-tight",
+      className
+    )}
+    {...props}
+  />
+))
+DialogTitle.displayName = DialogPrimitive.Title.displayName
+
+const DialogDescription = React.forwardRef<
+  React.ElementRef<typeof DialogPrimitive.Description>,
+  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
+>(({ className, ...props }, ref) => (
+  <DialogPrimitive.Description
+    ref={ref}
+    className={cn("text-sm text-muted-foreground", className)}
+    {...props}
+  />
+))
+DialogDescription.displayName = DialogPrimitive.Description.displayName
+
+export {
+  Dialog,
+  DialogPortal,
+  DialogOverlay,
+  DialogClose,
+  DialogTrigger,
+  DialogContent,
+  DialogHeader,
+  DialogFooter,
+  DialogTitle,
+  DialogDescription,
+}
Index: src/components/post-card-public.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/post-card-public.tsx b/src/components/post-card-public.tsx
new file mode 100644
--- /dev/null	(date 1747009942406)
+++ b/src/components/post-card-public.tsx	(date 1747009942406)
@@ -0,0 +1,159 @@
+"use client";
+
+import { motion } from "framer-motion";
+import { formatDistanceToNow } from "date-fns";
+import Image from "next/image";
+import Link from "next/link";
+import { Badge } from "@/components/ui/badge";
+import { Share2, Check } from "lucide-react";
+import { useState } from "react";
+import { cn } from "@/lib/utils";
+import SanitizedHtml from "@/components/sanitized-html";
+
+interface PublicPost {
+    id: string;
+    author: {
+        id: string;
+        username: string;
+        name: string;
+        image?: string;
+    };
+    content: string;
+    mediaFiles?: string[];
+    community?: {
+        id: string;
+        name: string;
+        image?: string;
+    };
+    commentCount: number;
+    createdAt: string;
+}
+
+interface PublicPostCardProps {
+    key: string;
+    post: PublicPost;
+}
+
+export default function PublicPostCard({ post }: PublicPostCardProps) {
+    const [isShareCopied, setIsShareCopied] = useState(false);
+
+    const handleShare = async () => {
+        try {
+            const url = `${window.location.origin}/post/${post.id}`;
+            await navigator.clipboard.writeText(url);
+            setIsShareCopied(true);
+            setTimeout(() => setIsShareCopied(false), 2000);
+        } catch {
+            // fail silently
+        }
+    };
+
+    return (
+        <motion.div
+            className="bg-white rounded-lg border border-gray-100 overflow-hidden transition-all duration-200 hover:shadow-md hover:border-gray-200"
+            whileHover={{ y: -2 }}
+        >
+            <div className="p-4 md:p-5">
+                {/* Author and Community */}
+                <div className="flex items-center gap-2 mb-3">
+                    <div className="flex items-center gap-2">
+                        {post.author.image ? (
+                            <div className="relative h-8 w-8 rounded-full overflow-hidden">
+                                <Image src={post.author.image} alt={post.author.name} fill className="object-cover" />
+                            </div>
+                        ) : (
+                            <div className="h-8 w-8 rounded-full bg-gray-200 flex items-center justify-center">
+                <span className="text-xs font-medium text-gray-600">
+                  {post.author.name.charAt(0).toUpperCase()}
+                </span>
+                            </div>
+                        )}
+                        <div>
+                            <Link href={`/profile/${post.author.username}`} className="text-sm font-medium text-gray-900 hover:text-[#00AEEF] transition-colors">
+                                {post.author.name}
+                            </Link>
+                            <div className="flex items-center gap-2">
+                <span className="text-xs text-gray-500">
+                  {formatDistanceToNow(new Date(post.createdAt), { addSuffix: true })}
+                </span>
+                                {post.community && (
+                                    <>
+                                        <span className="text-xs text-gray-500">•</span>
+                                        <Link href={`/communities/${post.community.id}`}>
+                                            <Badge variant="outline" className="text-xs bg-blue-50 text-[#00AEEF] hover:bg-blue-100 border-blue-100">
+                                                {post.community.name}
+                                            </Badge>
+                                        </Link>
+                                    </>
+                                )}
+                            </div>
+                        </div>
+                    </div>
+                </div>
+
+                {/* Content */}
+                <SanitizedHtml
+                    content={post.content}
+                    className="text-gray-700 text-sm mb-4 post-content prose prose-sm max-w-none prose-headings:font-semibold prose-h3:text-lg prose-h4:text-base prose-p:mb-3 prose-ul:ml-6 prose-ol:ml-6 prose-li:mb-1 prose-strong:font-semibold prose-em:italic"
+                />
+
+                {/* Media */}
+                {post.mediaFiles && post.mediaFiles.length > 0 && (
+                    <div className="mb-4 overflow-hidden rounded-md">
+                        {post.mediaFiles.length === 1 ? (
+                            <div className="relative rounded-md overflow-hidden">
+                                {post.mediaFiles[0].endsWith(".mp4") ? (
+                                    <video
+                                        src={post.mediaFiles[0]}
+                                        controls
+                                        className="w-full max-h-[500px] object-contain"
+                                    />
+                                ) : (
+                                    <Image
+                                        src={post.mediaFiles[0]}
+                                        alt="Post media"
+                                        width={600}
+                                        height={400}
+                                        className="w-full max-h-[500px] object-contain"
+                                    />
+                                )}
+                            </div>
+                        ) : (
+                            <div className="grid grid-cols-2 gap-1">
+                                {post.mediaFiles.slice(0, 4).map((media, idx) => (
+                                    <div key={idx} className="relative aspect-square overflow-hidden rounded-md">
+                                        {media.endsWith(".mp4") ? (
+                                            <video src={media} controls className="w-full h-full object-cover" />
+                                        ) : (
+                                            <Image src={media} alt={`Media ${idx + 1}`} fill className="object-cover" />
+                                        )}
+                                    </div>
+                                ))}
+                            </div>
+                        )}
+                    </div>
+                )}
+
+                {/* Share Button Only */}
+                <div className="flex items-center justify-end">
+                    <button
+                        onClick={handleShare}
+                        className={cn("text-gray-500 hover:text-[#00AEEF] flex items-center gap-1 text-sm")}
+                    >
+                        {isShareCopied ? (
+                            <>
+                                <Check className="h-4 w-4 text-green-500" />
+                                Copied
+                            </>
+                        ) : (
+                            <>
+                                <Share2 className="h-4 w-4" />
+                                Share
+                            </>
+                        )}
+                    </button>
+                </div>
+            </div>
+        </motion.div>
+    );
+}
Index: src/components/ui/checkbox.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/ui/checkbox.tsx b/src/components/ui/checkbox.tsx
new file mode 100644
--- /dev/null	(date 1747009942364)
+++ b/src/components/ui/checkbox.tsx	(date 1747009942364)
@@ -0,0 +1,30 @@
+"use client"
+
+import * as React from "react"
+import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
+import { Check } from "lucide-react"
+
+import { cn } from "@/lib/utils"
+
+const Checkbox = React.forwardRef<
+  React.ElementRef<typeof CheckboxPrimitive.Root>,
+  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
+>(({ className, ...props }, ref) => (
+  <CheckboxPrimitive.Root
+    ref={ref}
+    className={cn(
+      "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
+      className
+    )}
+    {...props}
+  >
+    <CheckboxPrimitive.Indicator
+      className={cn("flex items-center justify-center text-current")}
+    >
+      <Check className="h-4 w-4" />
+    </CheckboxPrimitive.Indicator>
+  </CheckboxPrimitive.Root>
+))
+Checkbox.displayName = CheckboxPrimitive.Root.displayName
+
+export { Checkbox }
Index: src/context/NotificationContext.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/context/NotificationContext.tsx b/src/context/NotificationContext.tsx
new file mode 100644
--- /dev/null	(date 1747009942382)
+++ b/src/context/NotificationContext.tsx	(date 1747009942382)
@@ -0,0 +1,78 @@
+"use client";
+
+import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';
+import { toast } from 'sonner';
+
+interface NotificationContextType {
+  unreadCount: number;
+  fetchUnreadCount: () => Promise<void>;
+  markAllAsRead: () => Promise<void>;
+}
+
+const NotificationContext = createContext<NotificationContextType | undefined>(undefined);
+
+export function NotificationProvider({ children }: { children: ReactNode }) {
+  const [unreadCount, setUnreadCount] = useState(0);
+
+  // Fetch unread count on mount and set up polling
+  useEffect(() => {
+    fetchUnreadCount();
+    
+    // Poll for new notifications every minute
+    const interval = setInterval(() => {
+      fetchUnreadCount();
+    }, 60000);
+    
+    return () => clearInterval(interval);
+  }, []);
+
+  const fetchUnreadCount = async () => {
+    try {
+      const response = await fetch('/api/notifications?page=1&limit=1');
+      if (!response.ok) {
+        throw new Error('Failed to fetch notifications');
+      }
+      
+      const data = await response.json();
+      setUnreadCount(data.unreadCount);
+    } catch (error) {
+      console.error('Error fetching notification count:', error);
+    }
+  };
+
+  const markAllAsRead = async () => {
+    try {
+      const response = await fetch('/api/notifications', {
+        method: 'PATCH',
+        headers: {
+          'Content-Type': 'application/json'
+        },
+        body: JSON.stringify({ all: true })
+      });
+      
+      if (!response.ok) {
+        throw new Error('Failed to mark notifications as read');
+      }
+      
+      setUnreadCount(0);
+      toast.success('All notifications marked as read');
+    } catch (error) {
+      console.error('Error marking notifications as read:', error);
+      toast.error('Failed to mark notifications as read');
+    }
+  };
+
+  return (
+    <NotificationContext.Provider value={{ unreadCount, fetchUnreadCount, markAllAsRead }}>
+      {children}
+    </NotificationContext.Provider>
+  );
+}
+
+export function useNotifications() {
+  const context = useContext(NotificationContext);
+  if (context === undefined) {
+    throw new Error('useNotifications must be used within a NotificationProvider');
+  }
+  return context;
+}
Index: src/app/(main)/notifications/page.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"use client\"\r\n\r\nimport { useState } from \"react\"\r\nimport { motion, AnimatePresence } from \"framer-motion\"\r\nimport { Bell, Heart, MessageSquare, UserPlus, Star, Settings } from \"lucide-react\"\r\nimport { Button } from \"@/components/ui/button\"\r\nimport { Tabs, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\r\n\r\n// Mock notification data\r\nconst mockNotifications = [\r\n  {\r\n    id: 1,\r\n    type: \"like\",\r\n    user: \"Sarah Johnson\",\r\n    content: \"liked your post about React hooks\",\r\n    time: \"2 minutes ago\",\r\n    read: false\r\n  },\r\n  {\r\n    id: 2,\r\n    type: \"comment\",\r\n    user: \"Alex Chen\",\r\n    content: \"commented on your post: \\\"This is really helpful, thanks for sharing!\\\"\",\r\n    time: \"1 hour ago\",\r\n    read: false\r\n  },\r\n  {\r\n    id: 3,\r\n    type: \"follow\",\r\n    user: \"Maya Patel\",\r\n    content: \"started following you\",\r\n    time: \"3 hours ago\",\r\n    read: true\r\n  },\r\n  {\r\n    id: 4,\r\n    type: \"mention\",\r\n    user: \"James Wilson\",\r\n    content: \"mentioned you in a comment: \\\"@user I think you'd find this interesting\\\"\",\r\n    time: \"Yesterday\",\r\n    read: true\r\n  },\r\n  {\r\n    id: 5,\r\n    type: \"like\",\r\n    user: \"Emma Thompson\",\r\n    content: \"liked your comment on \\\"Getting Started with TypeScript\\\"\",\r\n    time: \"2 days ago\",\r\n    read: true\r\n  }\r\n]\r\n\r\nexport default function NotificationsPage() {\r\n  const [activeTab, setActiveTab] = useState(\"all\")\r\n  const [notifications, setNotifications] = useState(mockNotifications)\r\n  \r\n  const filteredNotifications = activeTab === \"all\" \r\n    ? notifications \r\n    : activeTab === \"unread\"\r\n      ? notifications.filter(n => !n.read)\r\n      : notifications.filter(n => n.type === activeTab)\r\n  \r\n  const markAllAsRead = () => {\r\n    setNotifications(notifications.map(n => ({ ...n, read: true })))\r\n  }\r\n  \r\n  const getIconForType = (type: string) => {\r\n    switch (type) {\r\n      case \"like\":\r\n        return <Heart className=\"h-4 w-4 text-pink-500\" />\r\n      case \"comment\":\r\n        return <MessageSquare className=\"h-4 w-4 text-blue-500\" />\r\n      case \"follow\":\r\n        return <UserPlus className=\"h-4 w-4 text-green-500\" />\r\n      case \"mention\":\r\n        return <Star className=\"h-4 w-4 text-amber-500\" />\r\n      default:\r\n        return <Bell className=\"h-4 w-4 text-gray-500\" />\r\n    }\r\n  }\r\n  \r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <div className=\"flex flex-col md:flex-row md:items-center md:justify-between gap-4\">\r\n        <motion.h1 \r\n          className=\"text-2xl font-semibold text-gray-800\"\r\n          initial={{ opacity: 0, y: -10 }}\r\n          animate={{ opacity: 1, y: 0 }}\r\n          transition={{ duration: 0.3 }}\r\n        >\r\n          Notifications\r\n        </motion.h1>\r\n        \r\n        <div className=\"flex items-center gap-3\">\r\n          <Button \r\n            variant=\"outline\" \r\n            size=\"sm\" \r\n            onClick={markAllAsRead}\r\n            className=\"text-sm\"\r\n          >\r\n            Mark all as read\r\n          </Button>\r\n          \r\n          <Button \r\n            variant=\"ghost\" \r\n            size=\"icon\"\r\n            className=\"h-8 w-8 text-gray-500\"\r\n          >\r\n            <Settings className=\"h-4 w-4\" />\r\n            <span className=\"sr-only\">Notification Settings</span>\r\n          </Button>\r\n        </div>\r\n      </div>\r\n      \r\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\r\n        <TabsList className=\"grid grid-cols-4 md:w-fit\">\r\n          <TabsTrigger value=\"all\" aria-selected={activeTab === \"all\"}>All</TabsTrigger>\r\n          <TabsTrigger value=\"unread\" aria-selected={activeTab === \"unread\"}>Unread</TabsTrigger>\r\n          <TabsTrigger value=\"like\" aria-selected={activeTab === \"like\"}>Likes</TabsTrigger>\r\n          <TabsTrigger value=\"comment\" aria-selected={activeTab === \"comment\"}>Comments</TabsTrigger>\r\n        </TabsList>\r\n      </Tabs>\r\n      \r\n      <div className=\"bg-white rounded-xl shadow-sm border border-gray-100 overflow-hidden\">\r\n        <AnimatePresence>\r\n          {filteredNotifications.length > 0 ? (\r\n            <motion.div \r\n              className=\"divide-y divide-gray-100\"\r\n              initial={{ opacity: 0 }}\r\n              animate={{ opacity: 1 }}\r\n              exit={{ opacity: 0 }}\r\n            >\r\n              {filteredNotifications.map((notification, index) => (\r\n                <motion.div \r\n                  key={notification.id}\r\n                  className={`p-4 hover:bg-gray-50 transition-colors ${!notification.read ? 'bg-blue-50/30' : ''}`}\r\n                  initial={{ opacity: 0, y: 20 }}\r\n                  animate={{ opacity: 1, y: 0 }}\r\n                  transition={{ delay: index * 0.05 }}\r\n                >\r\n                  <div className=\"flex items-start gap-3\">\r\n                    <div className=\"flex-shrink-0 mt-1\">\r\n                      <div className=\"h-8 w-8 rounded-full bg-gray-100 flex items-center justify-center\">\r\n                        {getIconForType(notification.type)}\r\n                      </div>\r\n                    </div>\r\n                    \r\n                    <div className=\"flex-1 min-w-0\">\r\n                      <p className=\"text-sm text-gray-800\">\r\n                        <span className=\"font-medium\">{notification.user}</span> {notification.content}\r\n                      </p>\r\n                      <p className=\"text-xs text-gray-500 mt-1\">{notification.time}</p>\r\n                    </div>\r\n                    \r\n                    {!notification.read && (\r\n                      <div className=\"flex-shrink-0\">\r\n                        <div className=\"h-2 w-2 rounded-full bg-[#00AEEF]\"></div>\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                </motion.div>\r\n              ))}\r\n            </motion.div>\r\n          ) : (\r\n            <motion.div \r\n              className=\"p-8 text-center\"\r\n              initial={{ opacity: 0 }}\r\n              animate={{ opacity: 1 }}\r\n            >\r\n              <Bell className=\"h-12 w-12 text-gray-300 mx-auto mb-3\" />\r\n              <h3 className=\"text-lg font-medium text-gray-800 mb-1\">No notifications</h3>\r\n              <p className=\"text-sm text-gray-500\">You&#39;re all caught up!</p>\r\n            </motion.div>\r\n          )}\r\n        </AnimatePresence>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/app/(main)/notifications/page.tsx b/src/app/(main)/notifications/page.tsx
--- a/src/app/(main)/notifications/page.tsx	(revision 4c74be27f19335e5b956190fea65a1f797f84875)
+++ b/src/app/(main)/notifications/page.tsx	(date 1747009940408)
@@ -1,69 +1,152 @@
 "use client"
 
-import { useState } from "react"
+import { useState, useEffect } from "react"
 import { motion, AnimatePresence } from "framer-motion"
-import { Bell, Heart, MessageSquare, UserPlus, Star, Settings } from "lucide-react"
+import { Bell, Heart, MessageSquare, UserPlus, Star, Settings, Users, Loader2 } from "lucide-react"
 import { Button } from "@/components/ui/button"
 import { Tabs, TabsList, TabsTrigger } from "@/components/ui/tabs"
+import { formatDistanceToNow } from "date-fns"
+import { toast } from "sonner"
+
+type NotificationType = 'like' | 'comment' | 'follow' | 'mention' | 'role_assigned' | 'community_invite' | 'message';
 
-// Mock notification data
-const mockNotifications = [
-  {
-    id: 1,
-    type: "like",
-    user: "Sarah Johnson",
-    content: "liked your post about React hooks",
-    time: "2 minutes ago",
-    read: false
-  },
-  {
-    id: 2,
-    type: "comment",
-    user: "Alex Chen",
-    content: "commented on your post: \"This is really helpful, thanks for sharing!\"",
-    time: "1 hour ago",
-    read: false
-  },
-  {
-    id: 3,
-    type: "follow",
-    user: "Maya Patel",
-    content: "started following you",
-    time: "3 hours ago",
-    read: true
-  },
-  {
-    id: 4,
-    type: "mention",
-    user: "James Wilson",
-    content: "mentioned you in a comment: \"@user I think you'd find this interesting\"",
-    time: "Yesterday",
-    read: true
-  },
-  {
-    id: 5,
-    type: "like",
-    user: "Emma Thompson",
-    content: "liked your comment on \"Getting Started with TypeScript\"",
-    time: "2 days ago",
-    read: true
-  }
-]
+interface Sender {
+  id: string;
+  username: string;
+  name: string;
+  image?: string;
+}
+
+interface Notification {
+  id: string;
+  type: NotificationType;
+  content: string;
+  read: boolean;
+  createdAt: string;
+  sender: Sender | null;
+  relatedPost?: { id: string; content: string } | null;
+  relatedComment?: { id: string; content: string } | null;
+  relatedCommunity?: { id: string; name: string; image?: string } | null;
+  relatedChannel?: { id: string; name: string } | null;
+}
+
+interface PaginationData {
+  page: number;
+  limit: number;
+  totalItems: number;
+  totalPages: number;
+  hasMore: boolean;
+}
 
 export default function NotificationsPage() {
   const [activeTab, setActiveTab] = useState("all")
-  const [notifications, setNotifications] = useState(mockNotifications)
-  
-  const filteredNotifications = activeTab === "all" 
-    ? notifications 
+  const [notifications, setNotifications] = useState<Notification[]>([])
+  const [loading, setLoading] = useState(true)
+  const [error, setError] = useState<string | null>(null)
+  const [pagination, setPagination] = useState<PaginationData | null>(null)
+  const [unreadCount, setUnreadCount] = useState(0)
+  const [loadingMore, setLoadingMore] = useState(false)
+
+  // Fetch notifications
+  useEffect(() => {
+    fetchNotifications()
+  }, [activeTab])
+
+  const fetchNotifications = async (page = 1) => {
+    try {
+      if (page === 1) {
+        setLoading(true)
+      } else {
+        setLoadingMore(true)
+      }
+
+      let url = `/api/notifications?page=${page}&limit=10`
+      if (activeTab !== 'all') {
+        url += `&type=${activeTab}`
+      }
+
+      const response = await fetch(url)
+      if (!response.ok) {
+        throw new Error('Failed to fetch notifications')
+      }
+
+      const data = await response.json()
+
+      if (page === 1) {
+        setNotifications(data.notifications)
+      } else {
+        setNotifications(prev => [...prev, ...data.notifications])
+      }
+
+      setPagination(data.pagination)
+      setUnreadCount(data.unreadCount)
+    } catch (err) {
+      console.error(err)
+      setError('Failed to load notifications')
+      toast.error('Failed to load notifications')
+    } finally {
+      setLoading(false)
+      setLoadingMore(false)
+    }
+  }
+
+  const loadMore = () => {
+    if (pagination && pagination.hasMore && !loadingMore) {
+      fetchNotifications(pagination.page + 1)
+    }
+  }
+
+  const markAllAsRead = async () => {
+    try {
+      const response = await fetch('/api/notifications', {
+        method: 'PATCH',
+        headers: {
+          'Content-Type': 'application/json'
+        },
+        body: JSON.stringify({ all: true })
+      })
+
+      if (!response.ok) {
+        throw new Error('Failed to mark notifications as read')
+      }
+
+      // Update local state
+      setNotifications(notifications.map(n => ({ ...n, read: true })))
+      setUnreadCount(0)
+      toast.success('All notifications marked as read')
+    } catch (err) {
+      console.error(err)
+      toast.error('Failed to mark notifications as read')
+    }
+  }
+
+  const markAsRead = async (notificationId: string) => {
+    try {
+      const response = await fetch(`/api/notifications/${notificationId}`, {
+        method: 'PATCH'
+      })
+
+      if (!response.ok) {
+        throw new Error('Failed to mark notification as read')
+      }
+
+      // Update local state
+      setNotifications(notifications.map(n =>
+        n.id === notificationId ? { ...n, read: true } : n
+      ))
+      setUnreadCount(prev => Math.max(0, prev - 1))
+    } catch (err) {
+      console.error(err)
+      toast.error('Failed to mark notification as read')
+    }
+  }
+
+  const filteredNotifications = activeTab === "all"
+    ? notifications
     : activeTab === "unread"
       ? notifications.filter(n => !n.read)
       : notifications.filter(n => n.type === activeTab)
-  
-  const markAllAsRead = () => {
-    setNotifications(notifications.map(n => ({ ...n, read: true })))
-  }
-  
+
   const getIconForType = (type: string) => {
     switch (type) {
       case "like":
@@ -74,35 +157,56 @@
         return <UserPlus className="h-4 w-4 text-green-500" />
       case "mention":
         return <Star className="h-4 w-4 text-amber-500" />
+      case "role_assigned":
+        return <Users className="h-4 w-4 text-purple-500" />
+      case "community_invite":
+        return <Users className="h-4 w-4 text-indigo-500" />
+      case "message":
+        return <MessageSquare className="h-4 w-4 text-cyan-500" />
       default:
         return <Bell className="h-4 w-4 text-gray-500" />
     }
   }
-  
+
+  // Format date
+  const formatDate = (dateString: string) => {
+    try {
+      return formatDistanceToNow(new Date(dateString), { addSuffix: true })
+    } catch (err) {
+      return 'some time ago'
+    }
+  }
+
   return (
     <div className="space-y-6">
       <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
-        <motion.h1 
+        <motion.h1
           className="text-2xl font-semibold text-gray-800"
           initial={{ opacity: 0, y: -10 }}
           animate={{ opacity: 1, y: 0 }}
           transition={{ duration: 0.3 }}
         >
           Notifications
+          {unreadCount > 0 && (
+            <span className="ml-2 text-sm bg-[#00AEEF] text-white px-2 py-0.5 rounded-full">
+              {unreadCount}
+            </span>
+          )}
         </motion.h1>
-        
+
         <div className="flex items-center gap-3">
-          <Button 
-            variant="outline" 
-            size="sm" 
+          <Button
+            variant="outline"
+            size="sm"
             onClick={markAllAsRead}
             className="text-sm"
+            disabled={unreadCount === 0}
           >
             Mark all as read
           </Button>
-          
-          <Button 
-            variant="ghost" 
+
+          <Button
+            variant="ghost"
             size="icon"
             className="h-8 w-8 text-gray-500"
           >
@@ -111,68 +215,113 @@
           </Button>
         </div>
       </div>
-      
+
       <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
-        <TabsList className="grid grid-cols-4 md:w-fit">
+        <TabsList className="grid grid-cols-5 md:w-fit">
           <TabsTrigger value="all" aria-selected={activeTab === "all"}>All</TabsTrigger>
           <TabsTrigger value="unread" aria-selected={activeTab === "unread"}>Unread</TabsTrigger>
           <TabsTrigger value="like" aria-selected={activeTab === "like"}>Likes</TabsTrigger>
           <TabsTrigger value="comment" aria-selected={activeTab === "comment"}>Comments</TabsTrigger>
+          <TabsTrigger value="follow" aria-selected={activeTab === "follow"}>Follows</TabsTrigger>
         </TabsList>
       </Tabs>
-      
+
       <div className="bg-white rounded-xl shadow-sm border border-gray-100 overflow-hidden">
-        <AnimatePresence>
-          {filteredNotifications.length > 0 ? (
-            <motion.div 
-              className="divide-y divide-gray-100"
-              initial={{ opacity: 0 }}
-              animate={{ opacity: 1 }}
-              exit={{ opacity: 0 }}
-            >
-              {filteredNotifications.map((notification, index) => (
-                <motion.div 
-                  key={notification.id}
-                  className={`p-4 hover:bg-gray-50 transition-colors ${!notification.read ? 'bg-blue-50/30' : ''}`}
-                  initial={{ opacity: 0, y: 20 }}
-                  animate={{ opacity: 1, y: 0 }}
-                  transition={{ delay: index * 0.05 }}
-                >
-                  <div className="flex items-start gap-3">
-                    <div className="flex-shrink-0 mt-1">
-                      <div className="h-8 w-8 rounded-full bg-gray-100 flex items-center justify-center">
-                        {getIconForType(notification.type)}
-                      </div>
-                    </div>
-                    
-                    <div className="flex-1 min-w-0">
-                      <p className="text-sm text-gray-800">
-                        <span className="font-medium">{notification.user}</span> {notification.content}
-                      </p>
-                      <p className="text-xs text-gray-500 mt-1">{notification.time}</p>
-                    </div>
-                    
-                    {!notification.read && (
-                      <div className="flex-shrink-0">
-                        <div className="h-2 w-2 rounded-full bg-[#00AEEF]"></div>
-                      </div>
-                    )}
-                  </div>
-                </motion.div>
-              ))}
-            </motion.div>
-          ) : (
-            <motion.div 
-              className="p-8 text-center"
-              initial={{ opacity: 0 }}
-              animate={{ opacity: 1 }}
-            >
-              <Bell className="h-12 w-12 text-gray-300 mx-auto mb-3" />
-              <h3 className="text-lg font-medium text-gray-800 mb-1">No notifications</h3>
-              <p className="text-sm text-gray-500">You&#39;re all caught up!</p>
-            </motion.div>
-          )}
-        </AnimatePresence>
+        {loading ? (
+          <div className="p-8 text-center">
+            <Loader2 className="h-8 w-8 animate-spin text-gray-400 mx-auto mb-3" />
+            <p className="text-sm text-gray-500">Loading notifications...</p>
+          </div>
+        ) : error ? (
+          <div className="p-8 text-center text-red-500">
+            <p>{error}</p>
+            <Button
+              variant="outline"
+              size="sm"
+              className="mt-4"
+              onClick={() => fetchNotifications()}
+            >
+              Try Again
+            </Button>
+          </div>
+        ) : (
+          <AnimatePresence>
+            {filteredNotifications.length > 0 ? (
+              <motion.div
+                className="divide-y divide-gray-100"
+                initial={{ opacity: 0 }}
+                animate={{ opacity: 1 }}
+                exit={{ opacity: 0 }}
+              >
+                {filteredNotifications.map((notification, index) => (
+                  <motion.div
+                    key={notification.id}
+                    className={`p-4 hover:bg-gray-50 transition-colors ${!notification.read ? 'bg-blue-50/30' : ''}`}
+                    initial={{ opacity: 0, y: 20 }}
+                    animate={{ opacity: 1, y: 0 }}
+                    transition={{ delay: index * 0.05 }}
+                    onClick={() => !notification.read && markAsRead(notification.id)}
+                  >
+                    <div className="flex items-start gap-3">
+                      <div className="flex-shrink-0 mt-1">
+                        <div className="h-8 w-8 rounded-full bg-gray-100 flex items-center justify-center">
+                          {getIconForType(notification.type)}
+                        </div>
+                      </div>
+
+                      <div className="flex-1 min-w-0">
+                        <p className="text-sm text-gray-800">
+                          {notification.sender && (
+                            <span className="font-medium">{notification.sender.name}</span>
+                          )}{' '}
+                          {notification.content}
+                        </p>
+                        <p className="text-xs text-gray-500 mt-1">{formatDate(notification.createdAt)}</p>
+                      </div>
+
+                      {!notification.read && (
+                        <div className="flex-shrink-0">
+                          <div className="h-2 w-2 rounded-full bg-[#00AEEF]"></div>
+                        </div>
+                      )}
+                    </div>
+                  </motion.div>
+                ))}
+
+                {/* Load more button */}
+                {pagination && pagination.hasMore && (
+                  <div className="p-4 text-center">
+                    <Button
+                      variant="outline"
+                      size="sm"
+                      onClick={loadMore}
+                      disabled={loadingMore}
+                    >
+                      {loadingMore ? (
+                        <>
+                          <Loader2 className="h-4 w-4 animate-spin mr-2" />
+                          Loading...
+                        </>
+                      ) : (
+                        'Load More'
+                      )}
+                    </Button>
+                  </div>
+                )}
+              </motion.div>
+            ) : (
+              <motion.div
+                className="p-8 text-center"
+                initial={{ opacity: 0 }}
+                animate={{ opacity: 1 }}
+              >
+                <Bell className="h-12 w-12 text-gray-300 mx-auto mb-3" />
+                <h3 className="text-lg font-medium text-gray-800 mb-1">No notifications</h3>
+                <p className="text-sm text-gray-500">You&#39;re all caught up!</p>
+              </motion.div>
+            )}
+          </AnimatePresence>
+        )}
       </div>
     </div>
   )
Index: src/components/community/README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/community/README.md b/src/components/community/README.md
new file mode 100644
--- /dev/null	(date 1747009942448)
+++ b/src/components/community/README.md	(date 1747009942448)
@@ -0,0 +1,134 @@
+# ChatterSphere Community Module
+
+This module implements a Discord-like community experience for ChatterSphere, with text and voice channels, roles, and permissions.
+
+## Features
+
+- **Community Home**: Overview page with pinned messages and recent activity
+- **Text Channels**: Real-time messaging with support for text, attachments, and reactions
+- **Voice Channels**: Voice chat with mute/deafen controls
+- **Roles & Permissions**: Role-based access control for channels and actions
+- **Community Settings**: Admin panel for managing the community
+
+## File Structure
+
+```
+src/
+├── app/
+│   └── (main)/
+│       └── community/
+│           ├── [communityId]/
+│           │   ├── page.tsx                  # Community home page
+│           │   ├── channel/
+│           │   │   └── [channelSlug]/
+│           │   │       └── page.tsx          # Channel page (text or voice)
+│           │   └── settings/
+│           │       └── page.tsx              # Community settings page
+├── components/
+│   └── community/
+│       ├── layout.tsx                        # Community layout wrapper
+│       ├── header.tsx                        # Community header
+│       ├── sidebar.tsx                       # Channel sidebar
+│       ├── channels/
+│       │   ├── text-channel.tsx              # Text channel component
+│       │   └── voice-channel.tsx             # Voice channel component
+│       └── messages/
+│           ├── message-list.tsx              # Message list component
+│           ├── message-item.tsx              # Individual message component
+│           └── message-input.tsx             # Message input component
+├── context/
+│   └── SingleCommunityContext.tsx            # Community context provider
+└── models/
+    ├── Channel.ts                            # Channel model
+    ├── Message.ts                            # Message model
+    ├── Role.ts                               # Role model
+    └── Membership.ts                         # Membership model
+```
+
+## Data Models
+
+### Community
+
+Extended the existing Community model with:
+- `channels`: Array of channel IDs
+- `roles`: Array of role IDs
+- `invites`: Array of invite codes
+- `rules`: Optional community rules
+
+### Channel
+
+- `name`: Channel name
+- `slug`: URL-friendly channel name
+- `type`: 'text' or 'voice'
+- `description`: Optional channel description
+- `community`: Reference to parent community
+- `position`: Order in the channel list
+- `isPrivate`: Whether the channel is private
+- `allowedRoles`: Roles that can access private channels
+- `messages`: Array of message IDs
+
+### Role
+
+- `name`: Role name
+- `color`: Role color
+- `community`: Reference to parent community
+- `permissions`: Array of permission strings
+- `position`: Order in the role list
+- `isDefault`: Whether this is the default role for new members
+
+### Message
+
+- `content`: Message text content
+- `author`: Reference to user
+- `channel`: Reference to channel
+- `community`: Reference to community
+- `attachments`: Array of attachment URLs
+- `mentions`: Array of mentioned user IDs
+- `isPinned`: Whether the message is pinned
+- `isEdited`: Whether the message has been edited
+- `reactions`: Array of reaction objects
+
+### Membership
+
+- `user`: Reference to user
+- `community`: Reference to community
+- `roles`: Array of role IDs
+- `joinedAt`: When the user joined
+- `lastActive`: When the user was last active
+
+## API Routes
+
+- `/api/communities/[communityId]/channels`: Manage channels
+- `/api/communities/[communityId]/channels/[channelId]`: Manage a specific channel
+- `/api/communities/[communityId]/channels/[channelId]/messages`: Manage messages in a channel
+- `/api/communities/[communityId]/channels/[channelId]/messages/[messageId]`: Manage a specific message
+- `/api/communities/[communityId]/roles`: Manage roles
+- `/api/communities/[communityId]/roles/[roleId]`: Manage a specific role
+- `/api/communities/[communityId]/members/[memberId]/roles`: Manage a member's roles
+
+## Integration with ChatterSphere
+
+This module integrates with the existing ChatterSphere codebase by:
+
+1. Using the existing authentication system (Clerk)
+2. Extending the existing Community model
+3. Following the same UI/UX patterns and components
+4. Using the same API response formats
+
+## Usage
+
+To use this module:
+
+1. Navigate to a community page: `/community/[communityId]`
+2. View and interact with channels in the sidebar
+3. Click on a channel to view its content
+4. Community creators can access settings at `/community/[communityId]/settings`
+
+## Future Enhancements
+
+- Real-time messaging with WebSockets
+- Voice chat implementation with WebRTC
+- File uploads for attachments
+- Emoji reactions
+- Invite system with expiring links
+- Advanced permission system
Index: src/app/(main)/community/[communityId]/channel/[channelSlug]/page.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/app/(main)/community/[communityId]/channel/[channelSlug]/page.tsx b/src/app/(main)/community/[communityId]/channel/[channelSlug]/page.tsx
new file mode 100644
--- /dev/null	(date 1747009942432)
+++ b/src/app/(main)/community/[communityId]/channel/[channelSlug]/page.tsx	(date 1747009942432)
@@ -0,0 +1,90 @@
+// src/app/(main)/community/[communityId]/channel/[channelSlug]/page.tsx
+"use client";
+
+import React from "react";
+import { useParams } from "next/navigation";
+import { CommunityLayout } from "@/components/community/layout";
+import { TextChannel } from "@/components/community/channels/text-channel";
+import { VoiceChannel } from "@/components/community/channels/voice-channel";
+import { SingleCommunityProvider } from "@/context/SingleCommunityContext";
+
+export default function ChannelPage() {
+  const params = useParams();
+  const communityId = params.communityId as string;
+  const channelSlug = params.channelSlug as string;
+  
+  return (
+    <SingleCommunityProvider>
+      <CommunityLayout>
+        <ChannelContent communityId={communityId} channelSlug={channelSlug} />
+      </CommunityLayout>
+    </SingleCommunityProvider>
+  );
+}
+
+interface ChannelContentProps {
+  communityId: string;
+  channelSlug: string;
+}
+
+function ChannelContent({ communityId, channelSlug }: ChannelContentProps) {
+  const [channelType, setChannelType] = React.useState<'text' | 'voice' | null>(null);
+  const [loading, setLoading] = React.useState(true);
+  const [error, setError] = React.useState<string | null>(null);
+  
+  React.useEffect(() => {
+    const fetchChannelType = async () => {
+      try {
+        setLoading(true);
+        setError(null);
+        
+        // In a real implementation, you would fetch the channel type from the API
+        // For this example, we'll determine it based on the channel slug
+        
+        // Simulate API call
+        await new Promise(resolve => setTimeout(resolve, 500));
+        
+        // For demo purposes, voice channels start with "voice-"
+        if (channelSlug.startsWith('voice-')) {
+          setChannelType('voice');
+        } else {
+          setChannelType('text');
+        }
+      } catch (err) {
+        console.error(err);
+        setError("Failed to load channel");
+      } finally {
+        setLoading(false);
+      }
+    };
+    
+    fetchChannelType();
+  }, [communityId, channelSlug]);
+  
+  if (loading) {
+    return (
+      <div className="flex items-center justify-center h-full">
+        <div className="animate-spin h-8 w-8 border-4 border-blue-500 rounded-full border-t-transparent"></div>
+      </div>
+    );
+  }
+  
+  if (error || !channelType) {
+    return (
+      <div className="flex flex-col items-center justify-center h-full p-4">
+        <div className="text-red-500 mb-2">{error || "Channel not found"}</div>
+        <p className="text-gray-500">The channel you're looking for doesn't exist or you don't have access to it.</p>
+      </div>
+    );
+  }
+  
+  return (
+    <>
+      {channelType === 'text' ? (
+        <TextChannel channelSlug={channelSlug} />
+      ) : (
+        <VoiceChannel channelSlug={channelSlug} />
+      )}
+    </>
+  );
+}
Index: src/app/(main)/community/[communityId]/settings/page.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/app/(main)/community/[communityId]/settings/page.tsx b/src/app/(main)/community/[communityId]/settings/page.tsx
new file mode 100644
--- /dev/null	(date 1747009942534)
+++ b/src/app/(main)/community/[communityId]/settings/page.tsx	(date 1747009942534)
@@ -0,0 +1,358 @@
+// src/app/(main)/community/[communityId]/settings/page.tsx
+"use client";
+
+import React, { useState } from "react";
+import { useParams, useRouter } from "next/navigation";
+import { CommunityLayout } from "@/components/community/layout";
+import { SingleCommunityProvider, useCommunityContext } from "@/context/SingleCommunityContext";
+import RolesSettings from "@/components/community/settings/roles-settings";
+import { Tabs, TabsList, TabsTrigger, TabsContent } from "@/components/ui/tabs";
+import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
+import { Button } from "@/components/ui/button";
+import { Input } from "@/components/ui/input";
+import { Textarea } from "@/components/ui/textarea";
+import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
+import {
+  Settings,
+  MessageSquare,
+  Users,
+  Shield,
+  Upload,
+  Trash2,
+  Save,
+  Plus,
+  Edit,
+  Hash,
+  Volume2
+} from "lucide-react";
+import { toast } from "sonner";
+
+export default function SettingsPage() {
+  const params = useParams();
+  const communityId = params.communityId as string;
+
+  return (
+    <SingleCommunityProvider>
+      <CommunityLayout>
+        <div className="p-6">
+          <CommunitySettings communityId={communityId} />
+        </div>
+      </CommunityLayout>
+    </SingleCommunityProvider>
+  );
+}
+
+interface CommunitySettingsProps {
+  communityId: string;
+}
+
+function CommunitySettings({ communityId }: CommunitySettingsProps) {
+  const router = useRouter();
+  const { community, loading, error, fetchCommunity } = useCommunityContext();
+  const [activeTab, setActiveTab] = useState("general");
+
+  React.useEffect(() => {
+    if (communityId) {
+      fetchCommunity(communityId);
+    }
+  }, [communityId, fetchCommunity]);
+
+  if (loading) {
+    return (
+      <div className="flex items-center justify-center h-full">
+        <div className="animate-spin h-8 w-8 border-4 border-blue-500 rounded-full border-t-transparent"></div>
+      </div>
+    );
+  }
+
+  if (error || !community) {
+    return (
+      <div className="flex flex-col items-center justify-center h-full p-4">
+        <div className="text-red-500 mb-2">{error || "Community not found"}</div>
+        <p className="text-gray-500">The community you're looking for doesn't exist or you don't have access to it.</p>
+        <Button
+          className="mt-4"
+          onClick={() => router.push("/")}
+        >
+          Go Home
+        </Button>
+      </div>
+    );
+  }
+
+  // Check if user is creator or moderator
+  if (!community.isCreator && !community.isModerator) {
+    return (
+      <div className="flex flex-col items-center justify-center h-full p-4">
+        <div className="text-red-500 mb-2">Access Denied</div>
+        <p className="text-gray-500">Only community administrators and moderators can access settings.</p>
+        <Button
+          className="mt-4"
+          onClick={() => router.push(`/community/${communityId}`)}
+        >
+          Back to Community
+        </Button>
+      </div>
+    );
+  }
+
+  // Some settings are only available to the creator
+  const isCreatorOnly = !community.isCreator;
+
+  return (
+    <div>
+      <div className="mb-6">
+        <h1 className="text-2xl font-bold flex items-center">
+          <Settings className="h-6 w-6 mr-2" />
+          Community Settings
+        </h1>
+        <p className="text-gray-500">Manage your community settings, channels, roles, and members.</p>
+      </div>
+
+      <Tabs value={activeTab} onValueChange={setActiveTab}>
+        <TabsList className="mb-6">
+          <TabsTrigger value="general" className="flex items-center">
+            <Settings className="h-4 w-4 mr-2" />
+            General
+          </TabsTrigger>
+          <TabsTrigger value="channels" className="flex items-center">
+            <MessageSquare className="h-4 w-4 mr-2" />
+            Channels
+          </TabsTrigger>
+          <TabsTrigger value="roles" className="flex items-center">
+            <Shield className="h-4 w-4 mr-2" />
+            Roles
+          </TabsTrigger>
+          <TabsTrigger value="members" className="flex items-center">
+            <Users className="h-4 w-4 mr-2" />
+            Members
+          </TabsTrigger>
+        </TabsList>
+
+        {/* General Settings */}
+        <TabsContent value="general">
+          <Card>
+            <CardHeader>
+              <CardTitle>General Settings</CardTitle>
+              <CardDescription>
+                Manage your community's basic information
+              </CardDescription>
+            </CardHeader>
+            <CardContent>
+              <form className="space-y-6">
+                <div className="space-y-2">
+                  <label className="text-sm font-medium">Community Name</label>
+                  <Input
+                    defaultValue={community.name}
+                    placeholder="Enter community name"
+                  />
+                </div>
+
+                <div className="space-y-2">
+                  <label className="text-sm font-medium">Description</label>
+                  <Textarea
+                    defaultValue={community.description}
+                    placeholder="Enter community description"
+                    rows={4}
+                  />
+                </div>
+
+                <div className="space-y-2">
+                  <label className="text-sm font-medium">Community Avatar</label>
+                  <div className="flex items-center space-x-4">
+                    <Avatar className="h-16 w-16">
+                      <AvatarImage src={community.image} />
+                      <AvatarFallback>{community.name.substring(0, 2).toUpperCase()}</AvatarFallback>
+                    </Avatar>
+
+                    <Button variant="outline" size="sm" className="flex items-center">
+                      <Upload className="h-4 w-4 mr-2" />
+                      Upload New Avatar
+                    </Button>
+                  </div>
+                </div>
+
+                <div className="space-y-2">
+                  <label className="text-sm font-medium">Community Rules</label>
+                  <Textarea
+                    defaultValue={community.rules || ""}
+                    placeholder="Enter community rules"
+                    rows={6}
+                  />
+                </div>
+
+                <div className="flex justify-end space-x-2">
+                  <Button variant="outline" type="button">
+                    Cancel
+                  </Button>
+                  <Button type="button" onClick={() => toast.success("Settings saved")}>
+                    <Save className="h-4 w-4 mr-2" />
+                    Save Changes
+                  </Button>
+                </div>
+              </form>
+            </CardContent>
+          </Card>
+
+          <Card className="mt-6">
+            <CardHeader>
+              <CardTitle className="text-red-600">Danger Zone</CardTitle>
+              <CardDescription>
+                Destructive actions that cannot be undone
+              </CardDescription>
+            </CardHeader>
+            <CardContent>
+              <div className="space-y-4">
+                <div className="p-4 border border-red-200 rounded-md bg-red-50">
+                  <h3 className="text-lg font-medium text-red-800 mb-2">Delete Community</h3>
+                  <p className="text-red-600 mb-4">
+                    This action cannot be undone. This will permanently delete the community,
+                    all its channels, and all messages.
+                  </p>
+                  <Button
+                    variant="destructive"
+                    onClick={() => {
+                      if (confirm("Are you sure you want to delete this community? This action cannot be undone.")) {
+                        toast.error("Community deletion is disabled in this demo");
+                      }
+                    }}
+                  >
+                    <Trash2 className="h-4 w-4 mr-2" />
+                    Delete Community
+                  </Button>
+                </div>
+              </div>
+            </CardContent>
+          </Card>
+        </TabsContent>
+
+        {/* Channels Settings */}
+        <TabsContent value="channels">
+          <Card>
+            <CardHeader className="flex flex-row items-center justify-between">
+              <div>
+                <CardTitle>Manage Channels</CardTitle>
+                <CardDescription>
+                  Create, edit, and delete channels in your community
+                </CardDescription>
+              </div>
+              <Button onClick={() => toast.info("Create channel modal would open here")}>
+                <Plus className="h-4 w-4 mr-2" />
+                Create Channel
+              </Button>
+            </CardHeader>
+            <CardContent>
+              <div className="space-y-4">
+                <div className="text-sm font-medium text-gray-500 uppercase">Text Channels</div>
+
+                {/* Sample Text Channels */}
+                {['general', 'announcements', 'help'].map(channel => (
+                  <div
+                    key={channel}
+                    className="flex items-center justify-between p-3 border border-gray-200 rounded-md hover:bg-gray-50"
+                  >
+                    <div className="flex items-center">
+                      <Hash className="h-5 w-5 mr-2 text-gray-500" />
+                      <span>{channel}</span>
+                    </div>
+
+                    <div className="flex items-center space-x-2">
+                      <Button variant="ghost" size="sm">
+                        <Edit className="h-4 w-4" />
+                      </Button>
+                      <Button variant="ghost" size="sm" className="text-red-500">
+                        <Trash2 className="h-4 w-4" />
+                      </Button>
+                    </div>
+                  </div>
+                ))}
+
+                <div className="text-sm font-medium text-gray-500 uppercase mt-6">Voice Channels</div>
+
+                {/* Sample Voice Channels */}
+                {['voice-chat', 'voice-gaming'].map(channel => (
+                  <div
+                    key={channel}
+                    className="flex items-center justify-between p-3 border border-gray-200 rounded-md hover:bg-gray-50"
+                  >
+                    <div className="flex items-center">
+                      <Volume2 className="h-5 w-5 mr-2 text-gray-500" />
+                      <span>{channel}</span>
+                    </div>
+
+                    <div className="flex items-center space-x-2">
+                      <Button variant="ghost" size="sm">
+                        <Edit className="h-4 w-4" />
+                      </Button>
+                      <Button variant="ghost" size="sm" className="text-red-500">
+                        <Trash2 className="h-4 w-4" />
+                      </Button>
+                    </div>
+                  </div>
+                ))}
+              </div>
+            </CardContent>
+          </Card>
+        </TabsContent>
+
+        {/* Roles Settings */}
+        <TabsContent value="roles">
+          <RolesSettings communityId={communityId} isCreatorOnly={isCreatorOnly} />
+        </TabsContent>
+
+        {/* Members Settings */}
+        <TabsContent value="members">
+          <Card>
+            <CardHeader>
+              <CardTitle>Manage Members</CardTitle>
+              <CardDescription>
+                View and manage community members
+              </CardDescription>
+            </CardHeader>
+            <CardContent>
+              <div className="space-y-4">
+                {/* Sample Members */}
+                {[
+                  { name: 'John Doe', role: 'Admin', image: 'https://github.com/shadcn.png' },
+                  { name: 'Jane Smith', role: 'Moderator', image: '' },
+                  { name: 'Bob Johnson', role: 'Member', image: 'https://github.com/shadcn.png' }
+                ].map(member => (
+                  <div
+                    key={member.name}
+                    className="flex items-center justify-between p-3 border border-gray-200 rounded-md hover:bg-gray-50"
+                  >
+                    <div className="flex items-center">
+                      <Avatar className="h-8 w-8 mr-3">
+                        <AvatarImage src={member.image} />
+                        <AvatarFallback>{member.name.substring(0, 2).toUpperCase()}</AvatarFallback>
+                      </Avatar>
+                      <div>
+                        <div className="font-medium">{member.name}</div>
+                        <div className="text-sm text-gray-500">{member.role}</div>
+                      </div>
+                    </div>
+
+                    <div className="flex items-center space-x-2">
+                      <select
+                        className="text-sm border border-gray-300 rounded-md p-1"
+                        defaultValue={member.role}
+                      >
+                        <option>Admin</option>
+                        <option>Moderator</option>
+                        <option>Member</option>
+                      </select>
+
+                      <Button variant="ghost" size="sm" className="text-red-500">
+                        <Trash2 className="h-4 w-4" />
+                      </Button>
+                    </div>
+                  </div>
+                ))}
+              </div>
+            </CardContent>
+          </Card>
+        </TabsContent>
+      </Tabs>
+    </div>
+  );
+}
Index: src/app/(main)/profile/[username]/view/page.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/app/(main)/profile/[username]/view/page.tsx b/src/app/(main)/profile/[username]/view/page.tsx
new file mode 100644
--- /dev/null	(date 1747009942504)
+++ b/src/app/(main)/profile/[username]/view/page.tsx	(date 1747009942504)
@@ -0,0 +1,441 @@
+"use client";
+
+import { useState, useEffect } from "react";
+import { useParams, useRouter } from "next/navigation";
+import { motion } from "framer-motion";
+import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
+import { Button } from "@/components/ui/button";
+import { Card, CardContent } from "@/components/ui/card";
+import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
+import { Separator } from "@/components/ui/separator";
+import {
+  Loader2,
+  UserX,
+  Calendar,
+  MessageSquare,
+  Users,
+  Lock,
+  Info,
+  Grid as GridIcon,
+  Shield
+} from "lucide-react";
+import { toast } from "sonner";
+import { format } from "date-fns";
+import { useAuth } from "@clerk/nextjs";
+import PostFeed from "@/components/post-feed";
+
+interface PublicUser {
+  id: string;
+  username: string;
+  name: string;
+  bio?: string;
+  image?: string;
+  followerCount: number;
+  followingCount: number;
+  communityCount: number;
+  joinedDate: string;
+  isFollowing: boolean;
+  isCurrentUser: boolean;
+  privacySettings?: {
+    profileVisibility: "public" | "followers" | "private";
+    activityVisibility: "public" | "followers" | "private";
+    allowFollowers: boolean;
+    allowMessages: "everyone" | "followers" | "none";
+  };
+}
+
+interface Community {
+  id: string;
+  name: string;
+  image?: string;
+  memberCount: number;
+}
+
+export default function UserProfileView() {
+  const { username } = useParams() as { username: string };
+  const router = useRouter();
+  const { isSignedIn } = useAuth();
+
+  const [user, setUser] = useState<PublicUser | null>(null);
+  const [communities, setCommunities] = useState<Community[]>([]);
+  const [loading, setLoading] = useState(true);
+  const [error, setError] = useState<string | null>(null);
+  const [activeTab, setActiveTab] = useState("about");
+  const [followLoading, setFollowLoading] = useState(false);
+  const [canViewProfile, setCanViewProfile] = useState(true);
+  const [canViewActivity, setCanViewActivity] = useState(true);
+
+  useEffect(() => {
+    const fetchUser = async () => {
+      try {
+        setLoading(true);
+        const res = await fetch(`/api/users/${username}`);
+        if (!res.ok) throw new Error("Failed to fetch user");
+        const data = await response.json();
+        setUser(data);
+
+        // Check privacy settings
+        if (data.privacySettings) {
+          const { profileVisibility, activityVisibility } = data.privacySettings;
+
+          // Determine if current user can view this profile
+          if (profileVisibility === "private") {
+            setCanViewProfile(data.isCurrentUser);
+          } else if (profileVisibility === "followers") {
+            setCanViewProfile(data.isCurrentUser || data.isFollowing);
+          } else {
+            setCanViewProfile(true);
+          }
+
+          // Determine if current user can view this user's activity
+          if (activityVisibility === "private") {
+            setCanViewActivity(data.isCurrentUser);
+          } else if (activityVisibility === "followers") {
+            setCanViewActivity(data.isCurrentUser || data.isFollowing);
+          } else {
+            setCanViewActivity(true);
+          }
+        }
+      } catch (err) {
+        console.error("Failed to fetch user", err);
+        setError("Failed to load user profile");
+      } finally {
+        setLoading(false);
+      }
+    };
+
+    const fetchUserCommunities = async () => {
+      try {
+        const res = await fetch(`/api/users/${username}/communities`);
+        if (!res.ok) throw new Error("Failed to fetch user communities");
+        const data = await res.json();
+        setCommunities(data.communities);
+      } catch (err) {
+        console.error("Failed to fetch user's communities", err);
+      }
+    };
+
+    if (username) {
+      fetchUser();
+      fetchUserCommunities();
+    }
+  }, [username]);
+
+  const handleFollow = async () => {
+    if (!isSignedIn) {
+      toast.error("Please sign in to follow users");
+      return;
+    }
+
+    if (!user) return;
+
+    try {
+      setFollowLoading(true);
+      const action = user.isFollowing ? "unfollow" : "follow";
+      const res = await fetch(`/api/users/${username}/follow-by-id`, {
+        method: "POST",
+        headers: {
+          "Content-Type": "application/json",
+        },
+        body: JSON.stringify({ action, targetId: user.id }),
+      });
+
+      if (!res.ok) throw new Error(`Failed to ${action} user`);
+
+      setUser((prev) => {
+        if (!prev) return null;
+        return {
+          ...prev,
+          isFollowing: !prev.isFollowing,
+          followerCount: prev.isFollowing
+            ? prev.followerCount - 1
+            : prev.followerCount + 1,
+        };
+      });
+
+      toast.success(
+        user.isFollowing
+          ? `Unfollowed @${user.username}`
+          : `Following @${user.username}`
+      );
+    } catch (err) {
+      console.error("Failed to follow/unfollow", err);
+      toast.error("Failed to update follow status");
+    } finally {
+      setFollowLoading(false);
+    }
+  };
+
+  const handleMessage = () => {
+    if (!isSignedIn) {
+      toast.error("Please sign in to send messages");
+      return;
+    }
+
+    if (!user) return;
+
+    // Check if user allows messages
+    if (user.privacySettings?.allowMessages === "none") {
+      toast.error("This user doesn't accept messages");
+      return;
+    }
+
+    if (
+      user.privacySettings?.allowMessages === "followers" &&
+      !user.isFollowing &&
+      !user.isCurrentUser
+    ) {
+      toast.error("You need to follow this user to send messages");
+      return;
+    }
+
+    router.push(`/messages/new?username=${user.username}`);
+  };
+
+  if (loading) {
+    return (
+      <div className="flex items-center justify-center min-h-screen">
+        <Loader2 className="h-8 w-8 animate-spin text-blue-500" />
+      </div>
+    );
+  }
+
+  if (error || !user) {
+    return (
+      <div className="max-w-4xl mx-auto p-6 text-center">
+        <UserX className="h-16 w-16 mx-auto text-gray-400 mb-4" />
+        <h1 className="text-2xl font-bold text-gray-800 mb-2">User Not Found</h1>
+        <p className="text-gray-600 mb-6">
+          The user you're looking for doesn't exist or has been removed.
+        </p>
+        <Button onClick={() => router.push("/")}>Return Home</Button>
+      </div>
+    );
+  }
+
+  if (!canViewProfile) {
+    return (
+      <div className="max-w-4xl mx-auto p-6 text-center">
+        <Lock className="h-16 w-16 mx-auto text-gray-400 mb-4" />
+        <h1 className="text-2xl font-bold text-gray-800 mb-2">Private Profile</h1>
+        <p className="text-gray-600 mb-6">
+          This user's profile is private.
+        </p>
+        <Button onClick={() => router.push("/")}>Return Home</Button>
+      </div>
+    );
+  }
+
+  return (
+    <motion.div
+      initial={{ opacity: 0 }}
+      animate={{ opacity: 1 }}
+      className="max-w-4xl mx-auto p-6"
+    >
+      <Card className="mb-6 overflow-hidden">
+        <div className="h-32 bg-gradient-to-r from-blue-400 to-purple-500"></div>
+        <CardContent className="relative pt-0">
+          <div className="flex flex-col md:flex-row gap-6 -mt-12">
+            <Avatar className="h-24 w-24 border-4 border-white rounded-full">
+              <AvatarImage src={user.image} alt={user.name} />
+              <AvatarFallback className="text-lg">
+                {user.name.substring(0, 2).toUpperCase()}
+              </AvatarFallback>
+            </Avatar>
+
+            <div className="flex-1 pt-12 md:pt-0">
+              <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
+                <div>
+                  <h1 className="text-2xl font-bold">{user.name}</h1>
+                  <p className="text-gray-500">@{user.username}</p>
+                </div>
+
+                <div className="flex gap-3">
+                  {!user.isCurrentUser && (
+                    <>
+                      {user.privacySettings?.allowFollowers !== false && (
+                        <Button
+                          onClick={handleFollow}
+                          variant={user.isFollowing ? "outline" : "default"}
+                          disabled={followLoading}
+                        >
+                          {followLoading ? (
+                            <Loader2 className="h-4 w-4 mr-2 animate-spin" />
+                          ) : null}
+                          {user.isFollowing ? "Following" : "Follow"}
+                        </Button>
+                      )}
+
+                      <Button
+                        variant="outline"
+                        onClick={handleMessage}
+                      >
+                        <MessageSquare className="h-4 w-4 mr-2" />
+                        Message
+                      </Button>
+                    </>
+                  )}
+
+                  {user.isCurrentUser && (
+                    <Button
+                      variant="outline"
+                      onClick={() => router.push("/settings/profile")}
+                    >
+                      Edit Profile
+                    </Button>
+                  )}
+                </div>
+              </div>
+
+              <div className="flex gap-6 mt-4">
+                <div className="flex items-center gap-1">
+                  <Users className="h-4 w-4 text-gray-500" />
+                  <span className="font-medium">{user.followerCount}</span>
+                  <span className="text-gray-500">Followers</span>
+                </div>
+                <div className="flex items-center gap-1">
+                  <Users className="h-4 w-4 text-gray-500" />
+                  <span className="font-medium">{user.followingCount}</span>
+                  <span className="text-gray-500">Following</span>
+                </div>
+                <div className="flex items-center gap-1">
+                  <Shield className="h-4 w-4 text-gray-500" />
+                  <span className="font-medium">{user.communityCount}</span>
+                  <span className="text-gray-500">Communities</span>
+                </div>
+                <div className="flex items-center gap-1">
+                  <Calendar className="h-4 w-4 text-gray-500" />
+                  <span className="text-gray-500">
+                    Joined {format(new Date(user.joinedDate), "MMMM yyyy")}
+                  </span>
+                </div>
+              </div>
+
+              {user.bio && (
+                <div className="mt-4">
+                  <p className="text-gray-700">{user.bio}</p>
+                </div>
+              )}
+            </div>
+          </div>
+        </CardContent>
+      </Card>
+
+      <Tabs value={activeTab} onValueChange={setActiveTab}>
+        <TabsList className="mb-6">
+          <TabsTrigger value="about" className="flex items-center">
+            <Info className="h-4 w-4 mr-2" />
+            About
+          </TabsTrigger>
+          {canViewActivity && (
+            <TabsTrigger value="posts" className="flex items-center">
+              <GridIcon className="h-4 w-4 mr-2" />
+              Posts
+            </TabsTrigger>
+          )}
+          <TabsTrigger value="communities" className="flex items-center">
+            <Users className="h-4 w-4 mr-2" />
+            Communities
+          </TabsTrigger>
+        </TabsList>
+
+        <TabsContent value="about">
+          <Card>
+            <CardContent className="p-6">
+              <div className="space-y-4">
+                <div>
+                  <h3 className="text-lg font-medium mb-2">About {user.name}</h3>
+                  <p className="text-gray-700">
+                    {user.bio || "This user hasn't added a bio yet."}
+                  </p>
+                </div>
+
+                <Separator />
+
+                <div>
+                  <h3 className="text-lg font-medium mb-2">Profile Information</h3>
+                  <div className="space-y-2">
+                    <div className="flex justify-between">
+                      <span className="text-gray-500">Username:</span>
+                      <span>@{user.username}</span>
+                    </div>
+                    <div className="flex justify-between">
+                      <span className="text-gray-500">Joined:</span>
+                      <span>{format(new Date(user.joinedDate), "MMMM d, yyyy")}</span>
+                    </div>
+                    <div className="flex justify-between">
+                      <span className="text-gray-500">Communities:</span>
+                      <span>{user.communityCount}</span>
+                    </div>
+                  </div>
+                </div>
+              </div>
+            </CardContent>
+          </Card>
+        </TabsContent>
+
+        {canViewActivity && (
+          <TabsContent value="posts">
+            <PostFeed
+              userId={user.id}
+              emptyMessage={
+                <div className="text-center p-6">
+                  <GridIcon className="h-12 w-12 text-gray-300 mx-auto mb-4" />
+                  <h3 className="text-lg font-medium text-gray-900 mb-1">No Posts Yet</h3>
+                  <p className="text-gray-500">
+                    {user.isCurrentUser
+                      ? "You haven't created any posts yet."
+                      : `${user.name} hasn't created any posts yet.`}
+                  </p>
+                </div>
+              }
+            />
+          </TabsContent>
+        )}
+
+        <TabsContent value="communities">
+          {communities.length > 0 ? (
+            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
+              {communities.map((community) => (
+                <Card
+                  key={community.id}
+                  className="hover:shadow-md transition-shadow cursor-pointer"
+                  onClick={() => router.push(`/community/${community.id}`)}
+                >
+                  <CardContent className="p-4">
+                    <div className="flex items-center gap-3">
+                      <Avatar className="h-10 w-10">
+                        <AvatarImage src={community.image} alt={community.name} />
+                        <AvatarFallback className="bg-gradient-to-br from-purple-500 to-indigo-600 text-white">
+                          {community.name.charAt(0)}
+                        </AvatarFallback>
+                      </Avatar>
+                      <div>
+                        <h3 className="font-medium">{community.name}</h3>
+                        <p className="text-sm text-gray-500">
+                          {community.memberCount} members
+                        </p>
+                      </div>
+                    </div>
+                  </CardContent>
+                </Card>
+              ))}
+            </div>
+          ) : (
+            <Card>
+              <CardContent className="p-6 text-center">
+                <Users className="h-12 w-12 text-gray-300 mx-auto mb-4" />
+                <h3 className="text-lg font-medium text-gray-900 mb-1">No Communities</h3>
+                <p className="text-gray-500">
+                  {user.isCurrentUser
+                    ? "You haven't joined any communities yet."
+                    : `${user.name} hasn't joined any communities yet.`}
+                </p>
+              </CardContent>
+            </Card>
+          )}
+        </TabsContent>
+      </Tabs>
+    </motion.div>
+  );
+}
Index: src/app/(main)/layout.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>'use client';\r\n\r\nimport { Sidebar } from '@/components/sidebar';\r\nimport { Topbar } from '@/components/topbar';\r\nimport { RightSidebar } from '@/components/right-sidebar';\r\nimport { ClerkProvider } from '@clerk/nextjs';\r\nimport React from 'react';\r\nimport { Plus, ArrowUp } from 'lucide-react';\r\nimport { Button } from '@/components/ui/button';\r\nimport { motion, AnimatePresence } from 'framer-motion';\r\nimport { useState, useEffect } from 'react';\r\nimport { ToastProvider } from '@/components/providers/toast-provider';\r\n\r\nexport default function HomeLayout({ children }: { children: React.ReactNode }) {\r\n    const [showScrollTop, setShowScrollTop] = useState(false);\r\n\r\n    // Handle scroll events for \"back to top\" button with SSR guard\r\n    useEffect(() => {\r\n        // SSR guard - only run in browser environment\r\n        if (typeof window === 'undefined') return;\r\n\r\n        const handleScroll = () => {\r\n            setShowScrollTop(window.scrollY > 500);\r\n        };\r\n\r\n        // Initial check\r\n        handleScroll();\r\n\r\n        window.addEventListener('scroll', handleScroll);\r\n        return () => window.removeEventListener('scroll', handleScroll);\r\n    }, []);\r\n\r\n    const scrollToTop = () => {\r\n        // SSR guard\r\n        if (typeof window === 'undefined') return;\r\n        window.scrollTo({ top: 0, behavior: 'smooth' });\r\n    };\r\n\r\n    return (\r\n        <ClerkProvider>\r\n            <ToastProvider />\r\n            <div className=\"relative min-h-screen bg-[#f8fafc]\">\r\n                {/* Sidebar */}\r\n                <Sidebar />\r\n\r\n                {/* Main content area */}\r\n                <div className=\"flex flex-col md:pl-64 min-h-screen\">\r\n                    {/* Topbar */}\r\n                    <Topbar />\r\n\r\n                    <div className=\"flex flex-1 overflow-x-hidden\">\r\n                        {/* Main Feed content */}\r\n                        <main className=\"flex-1 overflow-y-auto p-4 md:p-6\">\r\n                            <div className=\"max-w-3xl mx-auto\">\r\n                                {children}\r\n                            </div>\r\n                        </main>\r\n\r\n                        {/* Right Sidebar */}\r\n                        <RightSidebar />\r\n                    </div>\r\n                </div>\r\n\r\n                {/* Floating create post button */}\r\n                <motion.div\r\n                    className=\"fixed bottom-6 right-6 z-30\"\r\n                    initial={{ scale: 0 }}\r\n                    animate={{ scale: 1 }}\r\n                    transition={{ delay: 0.5, type: \"spring\", stiffness: 200, damping: 15 }}\r\n                >\r\n                    <Button\r\n                        size=\"lg\"\r\n                        className=\"h-14 w-14 rounded-full shadow-lg bg-[#00AEEF] hover:bg-[#00AEEF]/90\"\r\n                    >\r\n                        <Plus className=\"h-6 w-6 text-white\" />\r\n                        <span className=\"sr-only\">Create new post</span>\r\n                    </Button>\r\n                </motion.div>\r\n\r\n                {/* Scroll to top button */}\r\n                <AnimatePresence>\r\n                    {showScrollTop && (\r\n                        <motion.div\r\n                            className=\"fixed bottom-6 left-6 z-30\"\r\n                            initial={{ opacity: 0, scale: 0.5 }}\r\n                            animate={{ opacity: 1, scale: 1 }}\r\n                            exit={{ opacity: 0, scale: 0.5 }}\r\n                            transition={{ type: \"spring\", stiffness: 300, damping: 20 }}\r\n                        >\r\n                            <Button\r\n                                size=\"icon\"\r\n                                variant=\"secondary\"\r\n                                onClick={scrollToTop}\r\n                                className=\"h-10 w-10 rounded-full shadow-md bg-white hover:bg-gray-50 text-gray-600\"\r\n                            >\r\n                                <ArrowUp className=\"h-5 w-5\" />\r\n                                <span className=\"sr-only\">Back to top</span>\r\n                            </Button>\r\n                        </motion.div>\r\n                    )}\r\n                </AnimatePresence>\r\n            </div>\r\n        </ClerkProvider>\r\n    );\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/app/(main)/layout.tsx b/src/app/(main)/layout.tsx
--- a/src/app/(main)/layout.tsx	(revision 4c74be27f19335e5b956190fea65a1f797f84875)
+++ b/src/app/(main)/layout.tsx	(date 1747009940480)
@@ -1,18 +1,22 @@
 'use client';
 
-import { Sidebar } from '@/components/sidebar';
-import { Topbar } from '@/components/topbar';
-import { RightSidebar } from '@/components/right-sidebar';
+import { Sidebar } from '@/components/enhanced/sidebar';
+import { Topbar } from '@/components/enhanced/topbar';
+import { RightSidebar } from '@/components/enhanced/right-sidebar';
 import { ClerkProvider } from '@clerk/nextjs';
-import React from 'react';
+import React, { useState, useEffect, useCallback } from 'react';
 import { Plus, ArrowUp } from 'lucide-react';
 import { Button } from '@/components/ui/button';
 import { motion, AnimatePresence } from 'framer-motion';
-import { useState, useEffect } from 'react';
 import { ToastProvider } from '@/components/providers/toast-provider';
+import { NotificationProvider } from '@/context/NotificationContext';
+import Link from 'next/link';
+import { SkipToContent } from '@/components/skip-to-content';
+import ErrorBoundary from '@/components/error-boundary';
 
 export default function HomeLayout({ children }: { children: React.ReactNode }) {
     const [showScrollTop, setShowScrollTop] = useState(false);
+    const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
 
     // Handle scroll events for "back to top" button with SSR guard
     useEffect(() => {
@@ -30,76 +34,106 @@
         return () => window.removeEventListener('scroll', handleScroll);
     }, []);
 
-    const scrollToTop = () => {
+    const scrollToTop = useCallback(() => {
         // SSR guard
         if (typeof window === 'undefined') return;
         window.scrollTo({ top: 0, behavior: 'smooth' });
-    };
+    }, []);
 
     return (
         <ClerkProvider>
-            <ToastProvider />
-            <div className="relative min-h-screen bg-[#f8fafc]">
-                {/* Sidebar */}
-                <Sidebar />
+            <NotificationProvider>
+                <ToastProvider />
+                <SkipToContent />
+                <div className="relative min-h-screen bg-gradient-to-b from-gray-50 to-white">
+                    {/* Sidebar */}
+                    <Sidebar
+                        isMobileMenuOpen={isMobileMenuOpen}
+                        setIsMobileMenuOpen={setIsMobileMenuOpen}
+                    />
 
-                {/* Main content area */}
-                <div className="flex flex-col md:pl-64 min-h-screen">
-                    {/* Topbar */}
-                    <Topbar />
+                    {/* Main content area */}
+                    <div className="flex flex-col md:pl-64 min-h-screen transition-all duration-300">
+                        {/* Topbar */}
+                        <Topbar
+                            isMobileMenuOpen={isMobileMenuOpen}
+                            setIsMobileMenuOpen={setIsMobileMenuOpen}
+                        />
 
-                    <div className="flex flex-1 overflow-x-hidden">
-                        {/* Main Feed content */}
-                        <main className="flex-1 overflow-y-auto p-4 md:p-6">
-                            <div className="max-w-3xl mx-auto">
-                                {children}
-                            </div>
-                        </main>
+                        <div className="flex flex-1 overflow-x-hidden">
+                            {/* Main Feed content */}
+                            <main id="main-content" className="flex-1 overflow-y-auto p-4 md:p-6">
+                                <div className="max-w-3xl mx-auto">
+                                    <ErrorBoundary>
+                                        {children}
+                                    </ErrorBoundary>
+                                </div>
+                            </main>
 
-                        {/* Right Sidebar */}
-                        <RightSidebar />
-                    </div>
-                </div>
+                            {/* Right Sidebar */}
+                            <RightSidebar />
+                        </div>
+                    </div>
 
-                {/* Floating create post button */}
-                <motion.div
-                    className="fixed bottom-6 right-6 z-30"
-                    initial={{ scale: 0 }}
-                    animate={{ scale: 1 }}
-                    transition={{ delay: 0.5, type: "spring", stiffness: 200, damping: 15 }}
-                >
-                    <Button
-                        size="lg"
-                        className="h-14 w-14 rounded-full shadow-lg bg-[#00AEEF] hover:bg-[#00AEEF]/90"
-                    >
-                        <Plus className="h-6 w-6 text-white" />
-                        <span className="sr-only">Create new post</span>
-                    </Button>
-                </motion.div>
+                    {/* Floating create post button */}
+                    <motion.div
+                        className="fixed bottom-6 right-6 z-30"
+                        initial={{ scale: 0 }}
+                        animate={{ scale: 1 }}
+                        transition={{ delay: 0.5, type: "spring", stiffness: 200, damping: 15 }}
+                    >
+                        <Link href="/create-post" aria-label="Create new post">
+                            <Button
+                                size="lg"
+                                className="h-14 w-14 rounded-full shadow-lg bg-gradient-to-r from-[#00AEEF] to-[#0099d6] hover:from-[#0099d6] hover:to-[#00AEEF] text-white"
+                                aria-label="Create new post"
+                            >
+                                <Plus className="h-6 w-6 text-white" />
+                                <span className="sr-only">Create new post</span>
+                            </Button>
+                        </Link>
+                    </motion.div>
 
-                {/* Scroll to top button */}
-                <AnimatePresence>
-                    {showScrollTop && (
-                        <motion.div
-                            className="fixed bottom-6 left-6 z-30"
-                            initial={{ opacity: 0, scale: 0.5 }}
-                            animate={{ opacity: 1, scale: 1 }}
-                            exit={{ opacity: 0, scale: 0.5 }}
-                            transition={{ type: "spring", stiffness: 300, damping: 20 }}
-                        >
-                            <Button
-                                size="icon"
-                                variant="secondary"
-                                onClick={scrollToTop}
-                                className="h-10 w-10 rounded-full shadow-md bg-white hover:bg-gray-50 text-gray-600"
-                            >
-                                <ArrowUp className="h-5 w-5" />
-                                <span className="sr-only">Back to top</span>
-                            </Button>
-                        </motion.div>
-                    )}
-                </AnimatePresence>
-            </div>
+                    {/* Scroll to top button */}
+                    <AnimatePresence>
+                        {showScrollTop && (
+                            <motion.div
+                                className="fixed bottom-6 left-6 z-30"
+                                initial={{ opacity: 0, scale: 0.5 }}
+                                animate={{ opacity: 1, scale: 1 }}
+                                exit={{ opacity: 0, scale: 0.5 }}
+                                transition={{ type: "spring", stiffness: 300, damping: 20 }}
+                            >
+                                <Button
+                                    size="icon"
+                                    variant="secondary"
+                                    onClick={scrollToTop}
+                                    className="h-10 w-10 rounded-full shadow-md bg-white hover:bg-gray-50 text-gray-600 focus:ring-2 focus:ring-[#00AEEF] focus:ring-offset-2"
+                                    aria-label="Scroll back to top"
+                                >
+                                    <ArrowUp className="h-5 w-5" />
+                                    <span className="sr-only">Back to top</span>
+                                </Button>
+                            </motion.div>
+                        )}
+                    </AnimatePresence>
+
+                    {/* Mobile menu overlay */}
+                    <AnimatePresence>
+                        {isMobileMenuOpen && (
+                            <motion.div
+                                className="fixed inset-0 bg-black/50 z-40 md:hidden"
+                                initial={{ opacity: 0 }}
+                                animate={{ opacity: 1 }}
+                                exit={{ opacity: 0 }}
+                                onClick={() => setIsMobileMenuOpen(false)}
+                                aria-hidden="true"
+                                role="presentation"
+                            />
+                        )}
+                    </AnimatePresence>
+                </div>
+            </NotificationProvider>
         </ClerkProvider>
     );
 }
Index: src/app/api/search/route.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/app/api/search/route.ts b/src/app/api/search/route.ts
new file mode 100644
--- /dev/null	(date 1747009942629)
+++ b/src/app/api/search/route.ts	(date 1747009942629)
@@ -0,0 +1,177 @@
+import { NextRequest, NextResponse } from 'next/server';
+import { auth } from '@clerk/nextjs/server';
+import connectToDatabase from '@/lib/dbConnect';
+import User from '@/models/User';
+import Post from '@/models/Post';
+import Community from '@/models/Community';
+import Channel from '@/models/Channel';
+import { z } from 'zod';
+
+// Validation schemas
+const SearchSchema = z.object({
+  query: z.string().min(1).max(100),
+  type: z.enum(['all', 'posts', 'communities', 'channels', 'users']).optional().default('all'),
+  limit: z.coerce.number().int().min(1).max(50).optional().default(20),
+});
+
+/**
+ * GET /api/search - Search across the platform
+ */
+export async function GET(req: NextRequest) {
+  try {
+    // Authenticate user
+    const { userId } = await auth();
+    if (!userId) {
+      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
+    }
+
+    await connectToDatabase();
+
+    // Parse query parameters
+    const url = new URL(req.url);
+    const queryParams = {
+      query: url.searchParams.get('query') || '',
+      type: url.searchParams.get('type') as any,
+      limit: url.searchParams.get('limit') ? Number(url.searchParams.get('limit')) : undefined,
+    };
+
+    const validatedParams = SearchSchema.safeParse(queryParams);
+    if (!validatedParams.success) {
+      return NextResponse.json({ 
+        error: 'Invalid query parameters',
+        details: validatedParams.error.format()
+      }, { status: 400 });
+    }
+
+    const { query, type, limit } = validatedParams.data;
+
+    // Find user for access control
+    const user = await User.findOne({ clerkId: userId });
+    if (!user) {
+      return NextResponse.json({ error: 'User not found' }, { status: 404 });
+    }
+
+    // Create regex for case-insensitive search
+    const searchRegex = new RegExp(query.replace(/[-/\\^$*+?.()|[\]{}]/g, '\\$&'), 'i');
+
+    // Initialize results
+    const results: {
+      posts?: any[];
+      communities?: any[];
+      channels?: any[];
+      users?: any[];
+    } = {};
+
+    // Search posts
+    if (type === 'all' || type === 'posts') {
+      const posts = await Post.find({ 
+        $or: [
+          { content: searchRegex },
+          { tags: searchRegex }
+        ]
+      })
+      .sort({ createdAt: -1 })
+      .limit(type === 'all' ? Math.floor(limit / 4) : limit)
+      .populate('author', 'username name image')
+      .populate('community', 'name image')
+      .lean();
+
+      results.posts = posts.map(post => ({
+        id: post._id.toString(),
+        content: post.content,
+        createdAt: post.createdAt,
+        author: post.author ? {
+          id: post.author._id.toString(),
+          username: post.author.username,
+          name: post.author.name,
+          image: post.author.image
+        } : null,
+        community: post.community ? {
+          id: post.community._id.toString(),
+          name: post.community.name,
+          image: post.community.image
+        } : null
+      }));
+    }
+
+    // Search communities
+    if (type === 'all' || type === 'communities') {
+      const communities = await Community.find({ 
+        $or: [
+          { name: searchRegex },
+          { description: searchRegex },
+          { tags: searchRegex }
+        ]
+      })
+      .sort({ memberCount: -1 })
+      .limit(type === 'all' ? Math.floor(limit / 4) : limit)
+      .lean();
+
+      results.communities = communities.map(community => ({
+        id: community._id.toString(),
+        name: community.name,
+        description: community.description,
+        image: community.image,
+        memberCount: community.memberCount,
+        isPrivate: community.isPrivate
+      }));
+    }
+
+    // Search channels
+    if (type === 'all' || type === 'channels') {
+      const channels = await Channel.find({ 
+        $or: [
+          { name: searchRegex },
+          { description: searchRegex }
+        ]
+      })
+      .sort({ createdAt: -1 })
+      .limit(type === 'all' ? Math.floor(limit / 4) : limit)
+      .populate('community', 'name image')
+      .lean();
+
+      results.channels = channels.map(channel => ({
+        id: channel._id.toString(),
+        name: channel.name,
+        description: channel.description,
+        type: channel.type,
+        community: channel.community ? {
+          id: channel.community._id.toString(),
+          name: channel.community.name,
+          image: channel.community.image
+        } : null
+      }));
+    }
+
+    // Search users
+    if (type === 'all' || type === 'users') {
+      const users = await User.find({ 
+        $or: [
+          { username: searchRegex },
+          { name: searchRegex },
+          { bio: searchRegex }
+        ]
+      })
+      .sort({ followerCount: -1 })
+      .limit(type === 'all' ? Math.floor(limit / 4) : limit)
+      .lean();
+
+      results.users = users.map(user => ({
+        id: user._id.toString(),
+        username: user.username,
+        name: user.name,
+        image: user.image,
+        bio: user.bio ? user.bio.substring(0, 100) : null,
+        followerCount: user.followerCount || 0
+      }));
+    }
+
+    return NextResponse.json({
+      query,
+      results
+    }, { status: 200 });
+  } catch (error) {
+    console.error('[SEARCH]', error);
+    return NextResponse.json({ error: 'Failed to perform search' }, { status: 500 });
+  }
+}
Index: src/app/api/bookmarks/[postId]/route.ts.new
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/app/api/bookmarks/[postId]/route.ts.new b/src/app/api/bookmarks/[postId]/route.ts.new
new file mode 100644
--- /dev/null	(date 1747009942579)
+++ b/src/app/api/bookmarks/[postId]/route.ts.new	(date 1747009942579)
@@ -0,0 +1,67 @@
+import { NextRequest, NextResponse } from "next/server";
+import { auth } from "@clerk/nextjs/server";
+import dbConnect from "@/lib/dbConnect";
+import User from "@/models/User";
+import Post from "@/models/Post";
+import { Types } from "mongoose";
+
+export async function POST(
+  req: NextRequest,
+  context: { params: { postId: string } }
+) {
+  try {
+    const { userId } = await auth();
+    if (!userId) {
+      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
+    }
+
+    const { postId } = context.params;
+    if (!Types.ObjectId.isValid(postId)) {
+      return NextResponse.json(
+        { error: "Invalid post ID format" },
+        { status: 400 }
+      );
+    }
+
+    await dbConnect();
+
+    // Find user
+    const user = await User.findOne({ clerkId: userId });
+    if (!user) {
+      return NextResponse.json({ error: "User not found" }, { status: 404 });
+    }
+
+    // Find post
+    const post = await Post.findById(postId);
+    if (!post) {
+      return NextResponse.json({ error: "Post not found" }, { status: 404 });
+    }
+
+    const isSaved = post.savedBy.some(id => id.equals(user._id));
+
+    // Toggle saved status
+    if (isSaved) {
+      // Remove from savedBy
+      post.savedBy = post.savedBy.filter(id => !id.equals(user._id));
+    } else {
+      // Add to savedBy
+      post.savedBy.push(user._id);
+    }
+
+    await post.save();
+
+    return NextResponse.json(
+      {
+        isSaved: !isSaved,
+        savedCount: post.savedBy.length,
+      },
+      { status: 200 }
+    );
+  } catch (error) {
+    console.error("[POST Bookmark] Error:", error);
+    return NextResponse.json(
+      { error: "Failed to toggle bookmark" },
+      { status: 500 }
+    );
+  }
+}
Index: src/app/api/bookmarks/[postId]/route.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/app/api/bookmarks/[postId]/route.ts b/src/app/api/bookmarks/[postId]/route.ts
new file mode 100644
--- /dev/null	(date 1747009942602)
+++ b/src/app/api/bookmarks/[postId]/route.ts	(date 1747009942602)
@@ -0,0 +1,67 @@
+import { NextRequest, NextResponse } from "next/server";
+import { auth } from "@clerk/nextjs/server";
+import dbConnect from "@/lib/dbConnect";
+import User from "@/models/User";
+import Post from "@/models/Post";
+import { Types } from "mongoose";
+
+export async function POST(
+  req: NextRequest,
+  context: { params: { postId: string } }
+) {
+  try {
+    const { userId } = await auth();
+    if (!userId) {
+      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
+    }
+
+    const { postId } = context.params;
+    if (!Types.ObjectId.isValid(postId)) {
+      return NextResponse.json(
+        { error: "Invalid post ID format" },
+        { status: 400 }
+      );
+    }
+
+    await dbConnect();
+
+    // Find user
+    const user = await User.findOne({ clerkId: userId });
+    if (!user) {
+      return NextResponse.json({ error: "User not found" }, { status: 404 });
+    }
+
+    // Find post
+    const post = await Post.findById(postId);
+    if (!post) {
+      return NextResponse.json({ error: "Post not found" }, { status: 404 });
+    }
+
+    const isSaved = post.savedBy.some(id => id.equals(user._id));
+
+    // Toggle saved status
+    if (isSaved) {
+      // Remove from savedBy
+      post.savedBy = post.savedBy.filter(id => !id.equals(user._id));
+    } else {
+      // Add to savedBy
+      post.savedBy.push(user._id);
+    }
+
+    await post.save();
+
+    return NextResponse.json(
+      {
+        isSaved: !isSaved,
+        savedCount: post.savedBy.length,
+      },
+      { status: 200 }
+    );
+  } catch (error) {
+    console.error("[POST Bookmark] Error:", error);
+    return NextResponse.json(
+      { error: "Failed to toggle bookmark" },
+      { status: 500 }
+    );
+  }
+}
Index: src/app/api/users/me/notification-settings/route.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/app/api/users/me/notification-settings/route.ts b/src/app/api/users/me/notification-settings/route.ts
new file mode 100644
--- /dev/null	(date 1747009942700)
+++ b/src/app/api/users/me/notification-settings/route.ts	(date 1747009942700)
@@ -0,0 +1,130 @@
+import { NextRequest, NextResponse } from "next/server";
+import { auth } from "@clerk/nextjs/server";
+import dbConnect from "@/lib/dbConnect";
+import User from "@/models/User";
+import { z } from "zod";
+
+// Zod schema for notification settings validation
+const notificationSettingsSchema = z.object({
+  inApp: z.object({
+    likes: z.boolean(),
+    comments: z.boolean(),
+    follows: z.boolean(),
+    mentions: z.boolean(),
+    messages: z.boolean(),
+    communityInvites: z.boolean(),
+    roleAssignments: z.boolean(),
+  }),
+  email: z.object({
+    likes: z.boolean(),
+    comments: z.boolean(),
+    follows: z.boolean(),
+    mentions: z.boolean(),
+    messages: z.boolean(),
+    communityInvites: z.boolean(),
+    roleAssignments: z.boolean(),
+    digest: z.boolean(),
+  }),
+});
+
+export async function GET(_req: NextRequest) {
+  try {
+    // Get the current user's ID from Clerk
+    const { userId: clerkId } = await auth();
+
+    if (!clerkId) {
+      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
+    }
+
+    // Connect to the database
+    await dbConnect();
+
+    // Find the user in MongoDB
+    const userDoc = await User.findOne({ clerkId }).lean();
+
+    if (!userDoc) {
+      return NextResponse.json({ error: "User not found" }, { status: 404 });
+    }
+
+    // Return default settings if not set
+    const defaultSettings = {
+      inApp: {
+        likes: true,
+        comments: true,
+        follows: true,
+        mentions: true,
+        messages: true,
+        communityInvites: true,
+        roleAssignments: true,
+      },
+      email: {
+        likes: false,
+        comments: true,
+        follows: true,
+        mentions: true,
+        messages: true,
+        communityInvites: true,
+        roleAssignments: true,
+        digest: true,
+      },
+    };
+
+    // Return user's notification settings or defaults
+    return NextResponse.json(userDoc.notificationSettings || defaultSettings);
+  } catch (error) {
+    console.error("[GET /api/users/me/notification-settings] Error:", error);
+    return NextResponse.json(
+      { error: "Failed to fetch notification settings" },
+      { status: 500 }
+    );
+  }
+}
+
+export async function PATCH(req: NextRequest) {
+  try {
+    // Get the current user's ID from Clerk
+    const { userId: clerkId } = await auth();
+
+    if (!clerkId) {
+      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
+    }
+
+    // Parse and validate the request body
+    const body = await req.json();
+
+    const validationResult = notificationSettingsSchema.safeParse(body);
+    if (!validationResult.success) {
+      return NextResponse.json(
+        { error: "Invalid request data", details: validationResult.error.format() },
+        { status: 400 }
+      );
+    }
+
+    const settings = validationResult.data;
+
+    // Connect to the database
+    await dbConnect();
+
+    // Update the user's notification settings
+    const updatedUser = await User.findOneAndUpdate(
+      { clerkId },
+      { notificationSettings: settings },
+      { new: true }
+    );
+
+    if (!updatedUser) {
+      return NextResponse.json({ error: "User not found" }, { status: 404 });
+    }
+
+    return NextResponse.json({
+      success: true,
+      message: "Notification settings updated successfully",
+    });
+  } catch (error) {
+    console.error("[PATCH /api/users/me/notification-settings] Error:", error);
+    return NextResponse.json(
+      { error: "Failed to update notification settings" },
+      { status: 500 }
+    );
+  }
+}
Index: src/components/theme-toggle.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/theme-toggle.tsx b/src/components/theme-toggle.tsx
new file mode 100644
--- /dev/null	(date 1747009942649)
+++ b/src/components/theme-toggle.tsx	(date 1747009942649)
@@ -0,0 +1,39 @@
+"use client";
+
+import { Moon, Sun } from "lucide-react";
+import { useTheme } from "next-themes";
+import { Button } from "@/components/ui/button";
+import { useEffect, useState } from "react";
+
+export function ThemeToggle() {
+  const { theme, setTheme } = useTheme();
+  const [mounted, setMounted] = useState(false);
+
+  // Avoid hydration mismatch by only rendering after mount
+  useEffect(() => {
+    setMounted(true);
+  }, []);
+
+  if (!mounted) {
+    return (
+      <Button variant="ghost" size="icon" className="w-9 h-9 rounded-full">
+        <span className="sr-only">Toggle theme</span>
+        <div className="h-5 w-5 bg-gray-200 rounded-full animate-pulse" />
+      </Button>
+    );
+  }
+
+  return (
+    <Button
+      variant="ghost"
+      size="icon"
+      onClick={() => setTheme(theme === "dark" ? "light" : "dark")}
+      className="w-9 h-9 rounded-full text-gray-600 hover:text-[#00AEEF] hover:bg-blue-50 transition-colors focus:ring-2 focus:ring-[#00AEEF] focus:ring-offset-2"
+      aria-label={`Switch to ${theme === "dark" ? "light" : "dark"} theme`}
+    >
+      <Sun className="h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0" />
+      <Moon className="absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100" />
+      <span className="sr-only">Toggle theme</span>
+    </Button>
+  );
+}
Index: src/app/api/users/me/privacy-settings/route.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/app/api/users/me/privacy-settings/route.ts b/src/app/api/users/me/privacy-settings/route.ts
new file mode 100644
--- /dev/null	(date 1747009942762)
+++ b/src/app/api/users/me/privacy-settings/route.ts	(date 1747009942762)
@@ -0,0 +1,108 @@
+import { NextRequest, NextResponse } from "next/server";
+import { auth } from "@clerk/nextjs/server";
+import dbConnect from "@/lib/dbConnect";
+import User from "@/models/User";
+import { z } from "zod";
+
+// Zod schema for privacy settings validation
+const privacySettingsSchema = z.object({
+  profileVisibility: z.enum(["public", "followers", "private"]),
+  activityVisibility: z.enum(["public", "followers", "private"]),
+  allowFollowers: z.boolean(),
+  allowMessages: z.enum(["everyone", "followers", "none"]),
+  showOnlineStatus: z.boolean(),
+  allowTagging: z.boolean(),
+  allowMentions: z.boolean(),
+  searchable: z.boolean(),
+});
+
+export async function GET(_req: NextRequest) {
+  try {
+    // Get the current user's ID from Clerk
+    const { userId: clerkId } = await auth();
+
+    if (!clerkId) {
+      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
+    }
+
+    // Connect to the database
+    await dbConnect();
+
+    // Find the user in MongoDB
+    const userDoc = await User.findOne({ clerkId }).lean();
+
+    if (!userDoc) {
+      return NextResponse.json({ error: "User not found" }, { status: 404 });
+    }
+
+    // Return default settings if not set
+    const defaultSettings = {
+      profileVisibility: "public",
+      activityVisibility: "public",
+      allowFollowers: true,
+      allowMessages: "everyone",
+      showOnlineStatus: true,
+      allowTagging: true,
+      allowMentions: true,
+      searchable: true,
+    };
+
+    // Return user's privacy settings or defaults
+    return NextResponse.json(userDoc.privacySettings || defaultSettings);
+  } catch (error) {
+    console.error("[GET /api/users/me/privacy-settings] Error:", error);
+    return NextResponse.json(
+      { error: "Failed to fetch privacy settings" },
+      { status: 500 }
+    );
+  }
+}
+
+export async function PATCH(req: NextRequest) {
+  try {
+    // Get the current user's ID from Clerk
+    const { userId: clerkId } = await auth();
+
+    if (!clerkId) {
+      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
+    }
+
+    // Parse and validate the request body
+    const body = await req.json();
+
+    const validationResult = privacySettingsSchema.safeParse(body);
+    if (!validationResult.success) {
+      return NextResponse.json(
+        { error: "Invalid request data", details: validationResult.error.format() },
+        { status: 400 }
+      );
+    }
+
+    const settings = validationResult.data;
+
+    // Connect to the database
+    await dbConnect();
+
+    // Update the user's privacy settings
+    const updatedUser = await User.findOneAndUpdate(
+      { clerkId },
+      { privacySettings: settings },
+      { new: true }
+    );
+
+    if (!updatedUser) {
+      return NextResponse.json({ error: "User not found" }, { status: 404 });
+    }
+
+    return NextResponse.json({
+      success: true,
+      message: "Privacy settings updated successfully",
+    });
+  } catch (error) {
+    console.error("[PATCH /api/users/me/privacy-settings] Error:", error);
+    return NextResponse.json(
+      { error: "Failed to update privacy settings" },
+      { status: 500 }
+    );
+  }
+}
Index: src/components/providers/theme-provider.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/providers/theme-provider.tsx b/src/components/providers/theme-provider.tsx
new file mode 100644
--- /dev/null	(date 1747009942736)
+++ b/src/components/providers/theme-provider.tsx	(date 1747009942736)
@@ -0,0 +1,12 @@
+"use client";
+
+import { ThemeProvider as NextThemesProvider } from "next-themes";
+import { type ThemeProviderProps } from "next-themes/dist/types";
+
+export function ThemeProvider({ children, ...props }: ThemeProviderProps) {
+  return (
+    <NextThemesProvider {...props} enableSystem attribute="class">
+      {children}
+    </NextThemesProvider>
+  );
+}
Index: src/components/global-loading.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/global-loading.tsx b/src/components/global-loading.tsx
new file mode 100644
--- /dev/null	(date 1747009942924)
+++ b/src/components/global-loading.tsx	(date 1747009942924)
@@ -0,0 +1,31 @@
+"use client";
+
+import { Loader2 } from "lucide-react";
+import { motion } from "framer-motion";
+
+export function GlobalLoading() {
+  return (
+    <div className="flex flex-col items-center justify-center min-h-[60vh]">
+      <motion.div
+        initial={{ opacity: 0, y: 10 }}
+        animate={{ opacity: 1, y: 0 }}
+        transition={{ duration: 0.3 }}
+        className="text-center"
+      >
+        <Loader2 className="h-12 w-12 text-[#00AEEF] animate-spin mx-auto mb-4" />
+        <h3 className="text-lg font-medium text-gray-900 dark:text-gray-100">Loading...</h3>
+        <p className="text-sm text-gray-500 dark:text-gray-400 mt-1">
+          Please wait while we prepare your content
+        </p>
+      </motion.div>
+    </div>
+  );
+}
+
+export function MiniLoading() {
+  return (
+    <div className="flex items-center justify-center p-4">
+      <Loader2 className="h-6 w-6 text-[#00AEEF] animate-spin" />
+    </div>
+  );
+}
Index: src/components/error-boundary.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/error-boundary.tsx b/src/components/error-boundary.tsx
new file mode 100644
--- /dev/null	(date 1747009942948)
+++ b/src/components/error-boundary.tsx	(date 1747009942948)
@@ -0,0 +1,67 @@
+"use client";
+
+import React, { Component, ErrorInfo, ReactNode } from "react";
+import { Button } from "@/components/ui/button";
+import { AlertTriangle } from "lucide-react";
+
+interface Props {
+  children: ReactNode;
+  fallback?: ReactNode;
+}
+
+interface State {
+  hasError: boolean;
+  error: Error | null;
+}
+
+class ErrorBoundary extends Component<Props, State> {
+  public state: State = {
+    hasError: false,
+    error: null,
+  };
+
+  public static getDerivedStateFromError(error: Error): State {
+    return { hasError: true, error };
+  }
+
+  public componentDidCatch(error: Error, errorInfo: ErrorInfo) {
+    console.error("Uncaught error:", error, errorInfo);
+  }
+
+  public render() {
+    if (this.state.hasError) {
+      if (this.props.fallback) {
+        return this.props.fallback;
+      }
+
+      return (
+        <div className="flex flex-col items-center justify-center min-h-[50vh] p-6 text-center">
+          <div className="bg-red-50 dark:bg-red-900/20 p-4 rounded-full mb-4">
+            <AlertTriangle className="h-10 w-10 text-red-500" />
+          </div>
+          <h2 className="text-2xl font-bold mb-2">Something went wrong</h2>
+          <p className="text-gray-600 dark:text-gray-400 mb-6 max-w-md">
+            We're sorry, but there was an error loading this page. Please try again or contact support if the problem persists.
+          </p>
+          <div className="flex gap-4">
+            <Button
+              variant="outline"
+              onClick={() => window.location.reload()}
+            >
+              Refresh Page
+            </Button>
+            <Button
+              onClick={() => this.setState({ hasError: false, error: null })}
+            >
+              Try Again
+            </Button>
+          </div>
+        </div>
+      );
+    }
+
+    return this.props.children;
+  }
+}
+
+export default ErrorBoundary;
Index: src/app/(main)/search/page.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/app/(main)/search/page.tsx b/src/app/(main)/search/page.tsx
new file mode 100644
--- /dev/null	(date 1747009942796)
+++ b/src/app/(main)/search/page.tsx	(date 1747009942796)
@@ -0,0 +1,589 @@
+"use client"
+
+import { useState, useEffect, Suspense } from "react"
+import { useSearchParams, useRouter } from "next/navigation"
+import { Search, Loader2, Users, MessageSquare, Hash, User } from "lucide-react"
+import { Input } from "@/components/ui/input"
+import { Button } from "@/components/ui/button"
+import { Tabs, TabsList, TabsTrigger, TabsContent } from "@/components/ui/tabs"
+import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
+import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
+import { Badge } from "@/components/ui/badge"
+import { formatDistanceToNow } from "date-fns"
+import Link from "next/link"
+import { toast } from "sonner"
+
+interface SearchResult {
+  posts?: {
+    id: string;
+    content: string;
+    createdAt: string;
+    author: {
+      id: string;
+      username: string;
+      name: string;
+      image?: string;
+    } | null;
+    community: {
+      id: string;
+      name: string;
+      image?: string;
+    } | null;
+  }[];
+  communities?: {
+    id: string;
+    name: string;
+    description: string;
+    image?: string;
+    memberCount: number;
+    isPrivate: boolean;
+  }[];
+  channels?: {
+    id: string;
+    name: string;
+    description: string;
+    type: string;
+    community: {
+      id: string;
+      name: string;
+      image?: string;
+    } | null;
+  }[];
+  users?: {
+    id: string;
+    username: string;
+    name: string;
+    image?: string;
+    bio: string | null;
+    followerCount: number;
+  }[];
+}
+
+function SearchContent() {
+  const searchParams = useSearchParams()
+  const router = useRouter()
+  const initialQuery = searchParams.get("q") || ""
+  const initialType = searchParams.get("type") || "all"
+
+  const [searchQuery, setSearchQuery] = useState(initialQuery)
+  const [activeTab, setActiveTab] = useState(initialType)
+  const [results, setResults] = useState<SearchResult | null>(null)
+  const [loading, setLoading] = useState(false)
+  const [error, setError] = useState<string | null>(null)
+
+  // Perform search when query or tab changes
+  useEffect(() => {
+    if (initialQuery) {
+      performSearch(initialQuery, initialType as string)
+    }
+  }, [initialQuery, initialType])
+
+  const performSearch = async (query: string, type: string) => {
+    if (!query.trim()) {
+      setResults(null)
+      return
+    }
+
+    try {
+      setLoading(true)
+      setError(null)
+
+      const response = await fetch(`/api/search?query=${encodeURIComponent(query)}&type=${type}`)
+
+      if (!response.ok) {
+        throw new Error('Failed to perform search')
+      }
+
+      const data = await response.json()
+      setResults(data.results)
+    } catch (err) {
+      console.error(err)
+      setError('Failed to perform search')
+      toast.error('Failed to perform search')
+    } finally {
+      setLoading(false)
+    }
+  }
+
+  const handleSearch = (e: React.FormEvent) => {
+    e.preventDefault()
+
+    if (!searchQuery.trim()) {
+      toast.error('Please enter a search query')
+      return
+    }
+
+    // Update URL with search parameters
+    router.push(`/search?q=${encodeURIComponent(searchQuery)}&type=${activeTab}`)
+    performSearch(searchQuery, activeTab)
+  }
+
+  const handleTabChange = (value: string) => {
+    setActiveTab(value)
+
+    if (searchQuery.trim()) {
+      router.push(`/search?q=${encodeURIComponent(searchQuery)}&type=${value}`)
+      performSearch(searchQuery, value)
+    }
+  }
+
+  // Format date
+  const formatDate = (dateString: string) => {
+    try {
+      return formatDistanceToNow(new Date(dateString), { addSuffix: true })
+    } catch (err) {
+      return 'some time ago'
+    }
+  }
+
+  // Truncate text
+  const truncateText = (text: string, maxLength: number) => {
+    if (text.length <= maxLength) return text
+    return text.substring(0, maxLength) + '...'
+  }
+
+  return (
+    <div className="space-y-6">
+      <div className="flex flex-col space-y-4">
+        <h1 className="text-2xl font-semibold text-gray-800">Search ChatterSphere</h1>
+
+        <form onSubmit={handleSearch} className="flex gap-2">
+          <div className="relative flex-1">
+            <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-gray-400" />
+            <Input
+              type="text"
+              placeholder="Search for posts, communities, channels, or users..."
+              className="pl-10"
+              value={searchQuery}
+              onChange={(e) => setSearchQuery(e.target.value)}
+            />
+          </div>
+          <Button type="submit" disabled={loading}>
+            {loading ? <Loader2 className="h-4 w-4 animate-spin mr-2" /> : <Search className="h-4 w-4 mr-2" />}
+            Search
+          </Button>
+        </form>
+      </div>
+
+      <Tabs value={activeTab} onValueChange={handleTabChange} className="w-full">
+        <TabsList className="grid grid-cols-5 md:w-fit">
+          <TabsTrigger value="all" aria-selected={activeTab === "all"}>All</TabsTrigger>
+          <TabsTrigger value="posts" aria-selected={activeTab === "posts"}>Posts</TabsTrigger>
+          <TabsTrigger value="communities" aria-selected={activeTab === "communities"}>Communities</TabsTrigger>
+          <TabsTrigger value="channels" aria-selected={activeTab === "channels"}>Channels</TabsTrigger>
+          <TabsTrigger value="users" aria-selected={activeTab === "users"}>Users</TabsTrigger>
+        </TabsList>
+
+        <div className="mt-6">
+          {loading ? (
+            <div className="flex flex-col items-center justify-center py-12">
+              <Loader2 className="h-8 w-8 animate-spin text-[#00AEEF] mb-4" />
+              <p className="text-gray-500">Searching ChatterSphere...</p>
+            </div>
+          ) : error ? (
+            <div className="text-center py-12">
+              <p className="text-red-500 mb-4">{error}</p>
+              <Button variant="outline" onClick={() => performSearch(searchQuery, activeTab)}>
+                Try Again
+              </Button>
+            </div>
+          ) : !results && initialQuery ? (
+            <div className="text-center py-12">
+              <Search className="h-12 w-12 text-gray-300 mx-auto mb-4" />
+              <h3 className="text-lg font-medium text-gray-800 mb-1">No results found</h3>
+              <p className="text-sm text-gray-500">Try different keywords or filters</p>
+            </div>
+          ) : !results ? (
+            <div className="text-center py-12">
+              <Search className="h-12 w-12 text-gray-300 mx-auto mb-4" />
+              <h3 className="text-lg font-medium text-gray-800 mb-1">Search for something</h3>
+              <p className="text-sm text-gray-500">Find posts, communities, channels, and users</p>
+            </div>
+          ) : (
+            <TabsContent value="all" className="space-y-8 mt-0">
+              {/* Posts Section */}
+              {results.posts && results.posts.length > 0 && (
+                <div>
+                  <div className="flex items-center justify-between mb-4">
+                    <h2 className="text-xl font-medium flex items-center">
+                      <MessageSquare className="h-5 w-5 mr-2 text-[#00AEEF]" />
+                      Posts
+                    </h2>
+                    {results.posts.length >= 5 && (
+                      <Button variant="ghost" size="sm" onClick={() => handleTabChange('posts')}>
+                        View All
+                      </Button>
+                    )}
+                  </div>
+
+                  <div className="grid gap-4">
+                    {results.posts.slice(0, 5).map((post) => (
+                      <Link href={`/posts/${post.id}`} key={post.id}>
+                        <Card className="hover:bg-gray-50 transition-colors">
+                          <CardHeader className="pb-2">
+                            <div className="flex justify-between">
+                              <div className="flex items-center gap-2">
+                                <Avatar className="h-8 w-8">
+                                  <AvatarImage src={post.author?.image} />
+                                  <AvatarFallback>{post.author?.name.charAt(0) || 'U'}</AvatarFallback>
+                                </Avatar>
+                                <div>
+                                  <CardTitle className="text-sm font-medium">{post.author?.name || 'Unknown User'}</CardTitle>
+                                  <CardDescription className="text-xs">@{post.author?.username || 'unknown'}</CardDescription>
+                                </div>
+                              </div>
+                              <CardDescription className="text-xs">{formatDate(post.createdAt)}</CardDescription>
+                            </div>
+                          </CardHeader>
+                          <CardContent>
+                            <p className="text-sm">{truncateText(post.content, 150)}</p>
+                          </CardContent>
+                          {post.community && (
+                            <CardFooter className="pt-0">
+                              <Badge variant="outline" className="flex items-center gap-1">
+                                <span className="h-2 w-2 rounded-full bg-[#00AEEF]"></span>
+                                {post.community.name}
+                              </Badge>
+                            </CardFooter>
+                          )}
+                        </Card>
+                      </Link>
+                    ))}
+                  </div>
+                </div>
+              )}
+
+              {/* Communities Section */}
+              {results.communities && results.communities.length > 0 && (
+                <div>
+                  <div className="flex items-center justify-between mb-4">
+                    <h2 className="text-xl font-medium flex items-center">
+                      <Users className="h-5 w-5 mr-2 text-[#00AEEF]" />
+                      Communities
+                    </h2>
+                    {results.communities.length >= 5 && (
+                      <Button variant="ghost" size="sm" onClick={() => handleTabChange('communities')}>
+                        View All
+                      </Button>
+                    )}
+                  </div>
+
+                  <div className="grid gap-4 md:grid-cols-2">
+                    {results.communities.slice(0, 4).map((community) => (
+                      <Link href={`/communities/${community.id}`} key={community.id}>
+                        <Card className="hover:bg-gray-50 transition-colors h-full">
+                          <CardHeader className="pb-2">
+                            <div className="flex items-center gap-3">
+                              <Avatar className="h-10 w-10">
+                                <AvatarImage src={community.image} />
+                                <AvatarFallback>{community.name.charAt(0)}</AvatarFallback>
+                              </Avatar>
+                              <div>
+                                <CardTitle className="text-base font-medium flex items-center gap-2">
+                                  {community.name}
+                                  {community.isPrivate && (
+                                    <span className="text-xs bg-amber-100 text-amber-800 px-1.5 py-0.5 rounded">Private</span>
+                                  )}
+                                </CardTitle>
+                                <CardDescription className="text-xs">{community.memberCount.toLocaleString()} members</CardDescription>
+                              </div>
+                            </div>
+                          </CardHeader>
+                          <CardContent>
+                            <p className="text-sm">{truncateText(community.description, 100)}</p>
+                          </CardContent>
+                        </Card>
+                      </Link>
+                    ))}
+                  </div>
+                </div>
+              )}
+
+              {/* Channels Section */}
+              {results.channels && results.channels.length > 0 && (
+                <div>
+                  <div className="flex items-center justify-between mb-4">
+                    <h2 className="text-xl font-medium flex items-center">
+                      <Hash className="h-5 w-5 mr-2 text-[#00AEEF]" />
+                      Channels
+                    </h2>
+                    {results.channels.length >= 5 && (
+                      <Button variant="ghost" size="sm" onClick={() => handleTabChange('channels')}>
+                        View All
+                      </Button>
+                    )}
+                  </div>
+
+                  <div className="grid gap-4 md:grid-cols-2">
+                    {results.channels.slice(0, 4).map((channel) => (
+                      <Link
+                        href={`/communities/${channel.community?.id}/${channel.id}`}
+                        key={channel.id}
+                      >
+                        <Card className="hover:bg-gray-50 transition-colors h-full">
+                          <CardHeader className="pb-2">
+                            <div className="flex items-center gap-2">
+                              <Hash className="h-5 w-5 text-gray-500" />
+                              <div>
+                                <CardTitle className="text-base font-medium">{channel.name}</CardTitle>
+                                {channel.community && (
+                                  <CardDescription className="text-xs">in {channel.community.name}</CardDescription>
+                                )}
+                              </div>
+                            </div>
+                          </CardHeader>
+                          <CardContent>
+                            <p className="text-sm">{truncateText(channel.description, 100)}</p>
+                          </CardContent>
+                          <CardFooter className="pt-0">
+                            <Badge variant="outline">
+                              {channel.type === 'TEXT' ? 'Text Channel' : 'Voice Channel'}
+                            </Badge>
+                          </CardFooter>
+                        </Card>
+                      </Link>
+                    ))}
+                  </div>
+                </div>
+              )}
+
+              {/* Users Section */}
+              {results.users && results.users.length > 0 && (
+                <div>
+                  <div className="flex items-center justify-between mb-4">
+                    <h2 className="text-xl font-medium flex items-center">
+                      <User className="h-5 w-5 mr-2 text-[#00AEEF]" />
+                      Users
+                    </h2>
+                    {results.users.length >= 5 && (
+                      <Button variant="ghost" size="sm" onClick={() => handleTabChange('users')}>
+                        View All
+                      </Button>
+                    )}
+                  </div>
+
+                  <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
+                    {results.users.slice(0, 6).map((user) => (
+                      <Link href={`/profile/${user.username}`} key={user.id}>
+                        <Card className="hover:bg-gray-50 transition-colors h-full">
+                          <CardHeader>
+                            <div className="flex items-center gap-3">
+                              <Avatar className="h-12 w-12">
+                                <AvatarImage src={user.image} />
+                                <AvatarFallback>{user.name.charAt(0)}</AvatarFallback>
+                              </Avatar>
+                              <div>
+                                <CardTitle className="text-base font-medium">{user.name}</CardTitle>
+                                <CardDescription className="text-xs">@{user.username}</CardDescription>
+                              </div>
+                            </div>
+                          </CardHeader>
+                          {user.bio && (
+                            <CardContent>
+                              <p className="text-sm">{truncateText(user.bio, 80)}</p>
+                            </CardContent>
+                          )}
+                          <CardFooter className="text-xs text-gray-500">
+                            {user.followerCount} followers
+                          </CardFooter>
+                        </Card>
+                      </Link>
+                    ))}
+                  </div>
+                </div>
+              )}
+
+              {/* No Results */}
+              {(!results.posts || results.posts.length === 0) &&
+               (!results.communities || results.communities.length === 0) &&
+               (!results.channels || results.channels.length === 0) &&
+               (!results.users || results.users.length === 0) && (
+                <div className="text-center py-12">
+                  <Search className="h-12 w-12 text-gray-300 mx-auto mb-4" />
+                  <h3 className="text-lg font-medium text-gray-800 mb-1">No results found</h3>
+                  <p className="text-sm text-gray-500">Try different keywords or filters</p>
+                </div>
+              )}
+            </TabsContent>
+          )}
+
+          {/* Posts Tab */}
+          <TabsContent value="posts" className="mt-0">
+            {results && results.posts && results.posts.length > 0 ? (
+              <div className="grid gap-4">
+                {results.posts.map((post) => (
+                  <Link href={`/posts/${post.id}`} key={post.id}>
+                    <Card className="hover:bg-gray-50 transition-colors">
+                      <CardHeader className="pb-2">
+                        <div className="flex justify-between">
+                          <div className="flex items-center gap-2">
+                            <Avatar className="h-8 w-8">
+                              <AvatarImage src={post.author?.image} />
+                              <AvatarFallback>{post.author?.name.charAt(0) || 'U'}</AvatarFallback>
+                            </Avatar>
+                            <div>
+                              <CardTitle className="text-sm font-medium">{post.author?.name || 'Unknown User'}</CardTitle>
+                              <CardDescription className="text-xs">@{post.author?.username || 'unknown'}</CardDescription>
+                            </div>
+                          </div>
+                          <CardDescription className="text-xs">{formatDate(post.createdAt)}</CardDescription>
+                        </div>
+                      </CardHeader>
+                      <CardContent>
+                        <p className="text-sm">{truncateText(post.content, 200)}</p>
+                      </CardContent>
+                      {post.community && (
+                        <CardFooter className="pt-0">
+                          <Badge variant="outline" className="flex items-center gap-1">
+                            <span className="h-2 w-2 rounded-full bg-[#00AEEF]"></span>
+                            {post.community.name}
+                          </Badge>
+                        </CardFooter>
+                      )}
+                    </Card>
+                  </Link>
+                ))}
+              </div>
+            ) : (
+              <div className="text-center py-12">
+                <MessageSquare className="h-12 w-12 text-gray-300 mx-auto mb-4" />
+                <h3 className="text-lg font-medium text-gray-800 mb-1">No posts found</h3>
+                <p className="text-sm text-gray-500">Try different keywords</p>
+              </div>
+            )}
+          </TabsContent>
+
+          {/* Communities Tab */}
+          <TabsContent value="communities" className="mt-0">
+            {results && results.communities && results.communities.length > 0 ? (
+              <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
+                {results.communities.map((community) => (
+                  <Link href={`/communities/${community.id}`} key={community.id}>
+                    <Card className="hover:bg-gray-50 transition-colors h-full">
+                      <CardHeader>
+                        <div className="flex items-center gap-3">
+                          <Avatar className="h-12 w-12">
+                            <AvatarImage src={community.image} />
+                            <AvatarFallback>{community.name.charAt(0)}</AvatarFallback>
+                          </Avatar>
+                          <div>
+                            <CardTitle className="text-base font-medium flex items-center gap-2">
+                              {community.name}
+                              {community.isPrivate && (
+                                <span className="text-xs bg-amber-100 text-amber-800 px-1.5 py-0.5 rounded">Private</span>
+                              )}
+                            </CardTitle>
+                            <CardDescription className="text-xs">{community.memberCount.toLocaleString()} members</CardDescription>
+                          </div>
+                        </div>
+                      </CardHeader>
+                      <CardContent>
+                        <p className="text-sm">{truncateText(community.description, 150)}</p>
+                      </CardContent>
+                    </Card>
+                  </Link>
+                ))}
+              </div>
+            ) : (
+              <div className="text-center py-12">
+                <Users className="h-12 w-12 text-gray-300 mx-auto mb-4" />
+                <h3 className="text-lg font-medium text-gray-800 mb-1">No communities found</h3>
+                <p className="text-sm text-gray-500">Try different keywords</p>
+              </div>
+            )}
+          </TabsContent>
+
+          {/* Channels Tab */}
+          <TabsContent value="channels" className="mt-0">
+            {results && results.channels && results.channels.length > 0 ? (
+              <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
+                {results.channels.map((channel) => (
+                  <Link
+                    href={`/communities/${channel.community?.id}/${channel.id}`}
+                    key={channel.id}
+                  >
+                    <Card className="hover:bg-gray-50 transition-colors h-full">
+                      <CardHeader>
+                        <div className="flex items-center gap-2">
+                          <Hash className="h-5 w-5 text-gray-500" />
+                          <div>
+                            <CardTitle className="text-base font-medium">{channel.name}</CardTitle>
+                            {channel.community && (
+                              <CardDescription className="text-xs">in {channel.community.name}</CardDescription>
+                            )}
+                          </div>
+                        </div>
+                      </CardHeader>
+                      <CardContent>
+                        <p className="text-sm">{truncateText(channel.description, 150)}</p>
+                      </CardContent>
+                      <CardFooter className="pt-0">
+                        <Badge variant="outline">
+                          {channel.type === 'TEXT' ? 'Text Channel' : 'Voice Channel'}
+                        </Badge>
+                      </CardFooter>
+                    </Card>
+                  </Link>
+                ))}
+              </div>
+            ) : (
+              <div className="text-center py-12">
+                <Hash className="h-12 w-12 text-gray-300 mx-auto mb-4" />
+                <h3 className="text-lg font-medium text-gray-800 mb-1">No channels found</h3>
+                <p className="text-sm text-gray-500">Try different keywords</p>
+              </div>
+            )}
+          </TabsContent>
+
+          {/* Users Tab */}
+          <TabsContent value="users" className="mt-0">
+            {results && results.users && results.users.length > 0 ? (
+              <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
+                {results.users.map((user) => (
+                  <Link href={`/profile/${user.username}`} key={user.id}>
+                    <Card className="hover:bg-gray-50 transition-colors h-full">
+                      <CardHeader>
+                        <div className="flex items-center gap-3">
+                          <Avatar className="h-12 w-12">
+                            <AvatarImage src={user.image} />
+                            <AvatarFallback>{user.name.charAt(0)}</AvatarFallback>
+                          </Avatar>
+                          <div>
+                            <CardTitle className="text-base font-medium">{user.name}</CardTitle>
+                            <CardDescription className="text-xs">@{user.username}</CardDescription>
+                          </div>
+                        </div>
+                      </CardHeader>
+                      {user.bio && (
+                        <CardContent>
+                          <p className="text-sm">{truncateText(user.bio, 150)}</p>
+                        </CardContent>
+                      )}
+                      <CardFooter className="text-xs text-gray-500">
+                        {user.followerCount} followers
+                      </CardFooter>
+                    </Card>
+                  </Link>
+                ))}
+              </div>
+            ) : (
+              <div className="text-center py-12">
+                <User className="h-12 w-12 text-gray-300 mx-auto mb-4" />
+                <h3 className="text-lg font-medium text-gray-800 mb-1">No users found</h3>
+                <p className="text-sm text-gray-500">Try different keywords</p>
+              </div>
+            )}
+          </TabsContent>
+        </div>
+      </Tabs>
+    </div>
+  )
+}
+
+export default function SearchPage() {
+  return (
+    <Suspense fallback={<div className="p-8 flex justify-center"><Loader2 className="h-8 w-8 animate-spin text-gray-400" /></div>}>
+      <SearchContent />
+    </Suspense>
+  )
+}
Index: src/components/skip-to-content.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/skip-to-content.tsx b/src/components/skip-to-content.tsx
new file mode 100644
--- /dev/null	(date 1747009943020)
+++ b/src/components/skip-to-content.tsx	(date 1747009943020)
@@ -0,0 +1,40 @@
+"use client";
+
+import { useCallback, useState } from "react";
+import { cn } from "@/lib/utils";
+
+export function SkipToContent() {
+  const [focused, setFocused] = useState(false);
+
+  const handleFocus = useCallback(() => {
+    setFocused(true);
+  }, []);
+
+  const handleBlur = useCallback(() => {
+    setFocused(false);
+  }, []);
+
+  const handleClick = useCallback(() => {
+    const mainContent = document.querySelector("#main-content");
+    if (mainContent) {
+      mainContent.setAttribute("tabindex", "-1");
+      mainContent.focus();
+      setTimeout(() => mainContent.removeAttribute("tabindex"), 1000);
+    }
+  }, []);
+
+  return (
+    <a
+      href="#main-content"
+      className={cn(
+        "fixed top-4 left-4 z-50 bg-[#00AEEF] text-white px-4 py-2 rounded-md transition-transform duration-200 focus:outline-none focus:ring-2 focus:ring-white focus:ring-offset-2 focus:ring-offset-[#00AEEF]",
+        focused ? "translate-y-0" : "-translate-y-20"
+      )}
+      onFocus={handleFocus}
+      onBlur={handleBlur}
+      onClick={handleClick}
+    >
+      Skip to content
+    </a>
+  );
+}
Index: src/components/seo.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/seo.tsx b/src/components/seo.tsx
new file mode 100644
--- /dev/null	(date 1747009943039)
+++ b/src/components/seo.tsx	(date 1747009943039)
@@ -0,0 +1,45 @@
+import Head from "next/head";
+
+interface SEOProps {
+  title?: string;
+  description?: string;
+  canonicalUrl?: string;
+  ogImage?: string;
+  ogType?: "website" | "article";
+  twitterCard?: "summary" | "summary_large_image";
+}
+
+export default function SEO({
+  title = "ChatterSphere | Connect Through Meaningful Conversations",
+  description = "ChatterSphere helps you build meaningful connections through real-time chat, thriving community, and global interactions in a secure environment.",
+  canonicalUrl,
+  ogImage = "/og-image.png",
+  ogType = "website",
+  twitterCard = "summary_large_image",
+}: SEOProps) {
+  const siteUrl = process.env.NEXT_PUBLIC_APP_URL || "https://chattersphere.example.com";
+  const fullUrl = canonicalUrl ? `${siteUrl}${canonicalUrl}` : siteUrl;
+  const fullOgImageUrl = ogImage.startsWith("http") ? ogImage : `${siteUrl}${ogImage}`;
+
+  return (
+    <Head>
+      <title>{title}</title>
+      <meta name="description" content={description} />
+      <link rel="canonical" href={fullUrl} />
+
+      {/* Open Graph */}
+      <meta property="og:title" content={title} />
+      <meta property="og:description" content={description} />
+      <meta property="og:url" content={fullUrl} />
+      <meta property="og:image" content={fullOgImageUrl} />
+      <meta property="og:type" content={ogType} />
+      <meta property="og:site_name" content="ChatterSphere" />
+
+      {/* Twitter */}
+      <meta name="twitter:card" content={twitterCard} />
+      <meta name="twitter:title" content={title} />
+      <meta name="twitter:description" content={description} />
+      <meta name="twitter:image" content={fullOgImageUrl} />
+    </Head>
+  );
+}
Index: src/app/error.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/app/error.tsx b/src/app/error.tsx
new file mode 100644
--- /dev/null	(date 1747009942966)
+++ b/src/app/error.tsx	(date 1747009942966)
@@ -0,0 +1,41 @@
+"use client";
+
+import { useEffect } from "react";
+import Link from "next/link";
+import { Button } from "@/components/ui/button";
+import { AlertTriangle } from "lucide-react";
+
+export default function Error({
+  error,
+  reset,
+}: {
+  error: Error & { digest?: string };
+  reset: () => void;
+}) {
+  useEffect(() => {
+    // Log the error to an error reporting service
+    console.error(error);
+  }, [error]);
+
+  return (
+    <div className="flex flex-col items-center justify-center min-h-screen p-6 text-center">
+      <div className="bg-red-50 dark:bg-red-900/20 p-6 rounded-full mb-6">
+        <AlertTriangle className="h-16 w-16 text-red-500" />
+      </div>
+      <h2 className="text-2xl font-bold mb-2">Something went wrong</h2>
+      <p className="text-gray-600 dark:text-gray-400 mb-8 max-w-md">
+        We're sorry, but there was an error loading this page. Please try again or contact support if the problem persists.
+      </p>
+      <div className="flex flex-col sm:flex-row gap-4">
+        <Button onClick={reset}>
+          Try Again
+        </Button>
+        <Button variant="outline" asChild>
+          <Link href="/">
+            Go Home
+          </Link>
+        </Button>
+      </div>
+    </div>
+  );
+}
Index: src/app/not-found.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/app/not-found.tsx b/src/app/not-found.tsx
new file mode 100644
--- /dev/null	(date 1747009943002)
+++ b/src/app/not-found.tsx	(date 1747009943002)
@@ -0,0 +1,30 @@
+import Link from "next/link";
+import { Button } from "@/components/ui/button";
+import { FileQuestion } from "lucide-react";
+
+export default function NotFound() {
+  return (
+    <div className="flex flex-col items-center justify-center min-h-screen p-6 text-center">
+      <div className="bg-blue-50 dark:bg-blue-900/20 p-6 rounded-full mb-6">
+        <FileQuestion className="h-16 w-16 text-[#00AEEF]" />
+      </div>
+      <h1 className="text-4xl font-bold mb-2">404</h1>
+      <h2 className="text-2xl font-semibold mb-4">Page Not Found</h2>
+      <p className="text-gray-600 dark:text-gray-400 mb-8 max-w-md">
+        The page you're looking for doesn't exist or has been moved. Let's get you back on track.
+      </p>
+      <div className="flex flex-col sm:flex-row gap-4">
+        <Button asChild>
+          <Link href="/">
+            Go Home
+          </Link>
+        </Button>
+        <Button variant="outline" asChild>
+          <Link href="/search">
+            Search
+          </Link>
+        </Button>
+      </div>
+    </div>
+  );
+}
Index: src/hooks/use-infinite-scroll.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/hooks/use-infinite-scroll.ts b/src/hooks/use-infinite-scroll.ts
new file mode 100644
--- /dev/null	(date 1747009943085)
+++ b/src/hooks/use-infinite-scroll.ts	(date 1747009943085)
@@ -0,0 +1,56 @@
+import { useRef, useCallback, RefObject } from 'react';
+
+interface UseInfiniteScrollOptions {
+  loading: boolean;
+  hasMore: boolean;
+  onLoadMore: () => void;
+  rootMargin?: string;
+  threshold?: number;
+}
+
+/**
+ * A hook that provides infinite scrolling functionality.
+ * 
+ * @param options The options for infinite scrolling
+ * @returns A ref to attach to the last item in the list
+ */
+export function useInfiniteScroll<T extends HTMLElement = HTMLDivElement>({
+  loading,
+  hasMore,
+  onLoadMore,
+  rootMargin = '0px',
+  threshold = 0.1,
+}: UseInfiniteScrollOptions): RefObject<T> {
+  const observer = useRef<IntersectionObserver | null>(null);
+  const lastElementRef = useRef<T>(null);
+
+  const lastElementCallback = useCallback(
+    (node: T | null) => {
+      if (loading) return;
+
+      // Disconnect the previous observer if it exists
+      if (observer.current) {
+        observer.current.disconnect();
+      }
+
+      // Create a new observer
+      observer.current = new IntersectionObserver(
+        (entries) => {
+          if (entries[0].isIntersecting && hasMore) {
+            onLoadMore();
+          }
+        },
+        { rootMargin, threshold }
+      );
+
+      // Observe the new node if it exists
+      if (node) {
+        observer.current.observe(node);
+        lastElementRef.current = node;
+      }
+    },
+    [loading, hasMore, onLoadMore, rootMargin, threshold]
+  );
+
+  return lastElementRef;
+}
Index: src/hooks/use-local-storage.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/hooks/use-local-storage.ts b/src/hooks/use-local-storage.ts
new file mode 100644
--- /dev/null	(date 1747009943108)
+++ b/src/hooks/use-local-storage.ts	(date 1747009943108)
@@ -0,0 +1,66 @@
+import { useState, useEffect } from 'react';
+
+/**
+ * A hook that provides a state that is synchronized with localStorage.
+ * 
+ * @param key The key to store the value under in localStorage
+ * @param initialValue The initial value to use if no value is found in localStorage
+ * @returns A tuple containing the current value and a function to update it
+ */
+export function useLocalStorage<T>(key: string, initialValue: T): [T, (value: T | ((val: T) => T)) => void] {
+  // State to store our value
+  // Pass initial state function to useState so logic is only executed once
+  const [storedValue, setStoredValue] = useState<T>(() => {
+    if (typeof window === 'undefined') {
+      return initialValue;
+    }
+
+    try {
+      // Get from local storage by key
+      const item = window.localStorage.getItem(key);
+      // Parse stored json or if none return initialValue
+      return item ? JSON.parse(item) : initialValue;
+    } catch (error) {
+      // If error also return initialValue
+      console.error(error);
+      return initialValue;
+    }
+  });
+
+  // Return a wrapped version of useState's setter function that
+  // persists the new value to localStorage.
+  const setValue = (value: T | ((val: T) => T)) => {
+    try {
+      // Allow value to be a function so we have same API as useState
+      const valueToStore =
+        value instanceof Function ? value(storedValue) : value;
+      // Save state
+      setStoredValue(valueToStore);
+      // Save to local storage
+      if (typeof window !== 'undefined') {
+        window.localStorage.setItem(key, JSON.stringify(valueToStore));
+      }
+    } catch (error) {
+      // A more advanced implementation would handle the error case
+      console.error(error);
+    }
+  };
+
+  // Listen for changes to this localStorage key in other tabs/windows
+  useEffect(() => {
+    if (typeof window === 'undefined') {
+      return;
+    }
+
+    const handleStorageChange = (e: StorageEvent) => {
+      if (e.key === key && e.newValue) {
+        setStoredValue(JSON.parse(e.newValue));
+      }
+    };
+
+    window.addEventListener('storage', handleStorageChange);
+    return () => window.removeEventListener('storage', handleStorageChange);
+  }, [key]);
+
+  return [storedValue, setValue];
+}
Index: src/hooks/use-debounce.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/hooks/use-debounce.ts b/src/hooks/use-debounce.ts
new file mode 100644
--- /dev/null	(date 1747009943062)
+++ b/src/hooks/use-debounce.ts	(date 1747009943062)
@@ -0,0 +1,26 @@
+import { useState, useEffect } from 'react';
+
+/**
+ * A hook that provides a debounced value.
+ * 
+ * @param value The value to debounce
+ * @param delay The delay in milliseconds
+ * @returns The debounced value
+ */
+export function useDebounce<T>(value: T, delay: number = 500): T {
+  const [debouncedValue, setDebouncedValue] = useState<T>(value);
+
+  useEffect(() => {
+    // Set up the timeout to update the debounced value after the delay
+    const timer = setTimeout(() => {
+      setDebouncedValue(value);
+    }, delay);
+
+    // Clean up the timeout if the value changes before the delay has passed
+    return () => {
+      clearTimeout(timer);
+    };
+  }, [value, delay]);
+
+  return debouncedValue;
+}
Index: src/app/api/users/[username]/follow-by-id/route.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/app/api/users/[username]/follow-by-id/route.ts b/src/app/api/users/[username]/follow-by-id/route.ts
new file mode 100644
--- /dev/null	(date 1747009943174)
+++ b/src/app/api/users/[username]/follow-by-id/route.ts	(date 1747009943174)
@@ -0,0 +1,143 @@
+import { NextRequest, NextResponse } from "next/server";
+import { auth } from "@clerk/nextjs/server";
+import dbConnect from "@/lib/dbConnect";
+import User from "@/models/User";
+import { createNotification } from "@/utils/notificationUtils";
+import { z } from "zod";
+import { Types } from "mongoose";
+
+// Validation schema
+const followSchema = z.object({
+  action: z.enum(["follow", "unfollow"]),
+});
+
+export async function POST(
+  req: NextRequest,
+  { params }: { params: { username: string } }
+) {
+  try {
+    // Get the current user's ID from Clerk
+    const { userId: clerkId } = await auth();
+
+    if (!clerkId) {
+      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
+    }
+
+    // Parse and validate the request body
+    const body = await req.json();
+    const validationResult = followSchema.safeParse(body);
+
+    if (!validationResult.success) {
+      return NextResponse.json(
+        { error: "Invalid request data", details: validationResult.error.format() },
+        { status: 400 }
+      );
+    }
+
+    const { action } = validationResult.data;
+    const username = params.username;
+
+    // Connect to the database
+    await dbConnect();
+
+    // Find the target user by username
+    const targetUser = await User.findOne({ username });
+    if (!targetUser) {
+      return NextResponse.json({ error: "Target user not found" }, { status: 404 });
+    }
+
+    // Find the current user
+    const currentUser = await User.findOne({ clerkId });
+    if (!currentUser) {
+      return NextResponse.json({ error: "Current user not found" }, { status: 404 });
+    }
+
+    // Check if user is trying to follow themselves
+    if (currentUser._id.toString() === targetUser._id.toString()) {
+      return NextResponse.json(
+        { error: "You cannot follow yourself" },
+        { status: 400 }
+      );
+    }
+
+    // Check if target user allows followers
+    if (targetUser.privacySettings?.allowFollowers === false) {
+      return NextResponse.json(
+        { error: "This user does not allow followers" },
+        { status: 403 }
+      );
+    }
+
+    if (action === "follow") {
+      // Check if already following
+      const isAlreadyFollowing = currentUser.following.some(
+        (id) => id.toString() === targetUser._id.toString()
+      );
+
+      if (isAlreadyFollowing) {
+        return NextResponse.json(
+          { error: "You are already following this user" },
+          { status: 400 }
+        );
+      }
+
+      // Add to following list
+      currentUser.following.push(targetUser._id);
+      await currentUser.save();
+
+      // Add to followers list
+      targetUser.followers.push(currentUser._id);
+      await targetUser.save();
+
+      // Create notification
+      await createNotification({
+        recipientId: targetUser._id,
+        senderId: currentUser._id,
+        type: "follow",
+        content: `${currentUser.name} started following you`,
+      });
+
+      return NextResponse.json({
+        success: true,
+        message: "User followed successfully",
+      });
+    } else {
+      // Check if actually following
+      const followingIndex = currentUser.following.findIndex(
+        (id) => id.toString() === targetUser._id.toString()
+      );
+
+      if (followingIndex === -1) {
+        return NextResponse.json(
+          { error: "You are not following this user" },
+          { status: 400 }
+        );
+      }
+
+      // Remove from following list
+      currentUser.following.splice(followingIndex, 1);
+      await currentUser.save();
+
+      // Remove from followers list
+      const followerIndex = targetUser.followers.findIndex(
+        (id) => id.toString() === currentUser._id.toString()
+      );
+
+      if (followerIndex !== -1) {
+        targetUser.followers.splice(followerIndex, 1);
+        await targetUser.save();
+      }
+
+      return NextResponse.json({
+        success: true,
+        message: "User unfollowed successfully",
+      });
+    }
+  } catch (error) {
+    console.error("[POST /api/users/[username]/follow-by-id] Error:", error);
+    return NextResponse.json(
+      { error: "Failed to update follow status" },
+      { status: 500 }
+    );
+  }
+}
Index: src/app/global-error.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/app/global-error.tsx b/src/app/global-error.tsx
new file mode 100644
--- /dev/null	(date 1747009943134)
+++ b/src/app/global-error.tsx	(date 1747009943134)
@@ -0,0 +1,43 @@
+"use client";
+
+import { useEffect } from "react";
+import { Button } from "@/components/ui/button";
+import { AlertOctagon } from "lucide-react";
+
+export default function GlobalError({
+  error,
+  reset,
+}: {
+  error: Error & { digest?: string };
+  reset: () => void;
+}) {
+  useEffect(() => {
+    // Log the error to an error reporting service
+    console.error(error);
+  }, [error]);
+
+  return (
+    <html lang="en">
+      <body>
+        <div className="flex flex-col items-center justify-center min-h-screen p-6 text-center">
+          <div className="bg-red-50 p-6 rounded-full mb-6">
+            <AlertOctagon className="h-16 w-16 text-red-500" />
+          </div>
+          <h1 className="text-4xl font-bold mb-2">500</h1>
+          <h2 className="text-2xl font-semibold mb-4">Server Error</h2>
+          <p className="text-gray-600 mb-8 max-w-md">
+            We're sorry, but something went wrong on our server. Our team has been notified and is working to fix the issue.
+          </p>
+          <div className="flex flex-col sm:flex-row gap-4">
+            <Button onClick={reset}>
+              Try Again
+            </Button>
+            <Button variant="outline" onClick={() => window.location.href = "/"}>
+              Go Home
+            </Button>
+          </div>
+        </div>
+      </body>
+    </html>
+  );
+}
Index: src/app/layout.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import type { Metadata } from \"next\";\r\nimport { Geist, Geist_Mono } from \"next/font/google\";\r\nimport \"./globals.css\";\r\nimport { Viewport } from \"next\";\r\nimport React from \"react\";\r\nimport { ClerkProvider } from \"@clerk/nextjs\";\r\n\r\nconst geistSans = Geist({\r\n  variable: \"--font-geist-sans\",\r\n  subsets: [\"latin\"],\r\n  display: \"swap\",\r\n});\r\n\r\nconst geistMono = Geist_Mono({\r\n  variable: \"--font-geist-mono\",\r\n  subsets: [\"latin\"],\r\n  display: \"swap\",\r\n});\r\n\r\nexport const metadata: Metadata = {\r\n  metadataBase: new URL(process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000'),\r\n  title: \"ChatterSphere | Connect Through Meaningful Conversations\",\r\n  description: \"ChatterSphere helps you build meaningful connections through real-time chat, thriving community, and global interactions in a secure environment.\",\r\n  keywords: [\"chat platform\", \"communities\", \"messaging\", \"social network\"],\r\n  authors: [{ name: \"ChatterSphere Team\" }],\r\n  creator: \"ChatterSphere\",\r\n  publisher: \"ChatterSphere\",\r\n  openGraph: {\r\n    type: \"website\",\r\n    locale: \"en_US\",\r\n    url: \"https://chattersphere.example.com\",\r\n    title: \"ChatterSphere | Connect Through Meaningful Conversations\",\r\n    description: \"Build meaningful connections through real-time chat and thriving community.\",\r\n    siteName: \"ChatterSphere\",\r\n    images: [\r\n      {\r\n        url: \"/og-image.png\",\r\n        width: 1200,\r\n        height: 630,\r\n        alt: \"ChatterSphere - Connect Through Meaningful Conversations\",\r\n      },\r\n    ],\r\n  },\r\n  twitter: {\r\n    card: \"summary_large_image\",\r\n    title: \"ChatterSphere | Connect Through Meaningful Conversations\",\r\n    description: \"Build meaningful connections through real-time chat and thriving community.\",\r\n    images: [\"/twitter-image.png\"],\r\n  },\r\n  verification: {\r\n    google: \"google-site-verification-code\",\r\n    yandex: \"yandex-verification-code\",\r\n  },\r\n  category: \"Social Networking\",\r\n};\r\n\r\nexport const viewport: Viewport = {\r\n  width: \"device-width\",\r\n  initialScale: 1,\r\n  maximumScale: 1,\r\n  themeColor: \"#38BDF8\", // Stay light only\r\n};\r\n\r\nexport default function RootLayout({\r\n  children,\r\n}: Readonly<{\r\n  children: React.ReactNode;\r\n}>) {\r\n  return (\r\n    <ClerkProvider publishableKey={process.env.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY}>\r\n      <html lang=\"en\" className=\"scroll-smooth\">\r\n        <body\r\n          className={`${geistSans.variable} ${geistMono.variable} antialiased font-sans bg-white text-gray-900`}\r\n        >\r\n          {children}\r\n        </body>\r\n      </html>\r\n    </ClerkProvider>\r\n  );\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/app/layout.tsx b/src/app/layout.tsx
--- a/src/app/layout.tsx	(revision 4c74be27f19335e5b956190fea65a1f797f84875)
+++ b/src/app/layout.tsx	(date 1747009940948)
@@ -4,6 +4,9 @@
 import { Viewport } from "next";
 import React from "react";
 import { ClerkProvider } from "@clerk/nextjs";
+import { Toaster } from "sonner";
+import { NotificationProvider } from "@/context/NotificationContext";
+import { ThemeProvider } from "@/components/providers/theme-provider";
 
 const geistSans = Geist({
   variable: "--font-geist-sans",
@@ -58,7 +61,8 @@
   width: "device-width",
   initialScale: 1,
   maximumScale: 1,
-  themeColor: "#38BDF8", // Stay light only
+  themeColor: [{ media: "(prefers-color-scheme: light)", color: "#00AEEF" }, { media: "(prefers-color-scheme: dark)", color: "#111827" }],
+  colorScheme: "light dark",
 };
 
 export default function RootLayout({
@@ -70,9 +74,14 @@
     <ClerkProvider publishableKey={process.env.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY}>
       <html lang="en" className="scroll-smooth">
         <body
-          className={`${geistSans.variable} ${geistMono.variable} antialiased font-sans bg-white text-gray-900`}
+          className={`${geistSans.variable} ${geistMono.variable} antialiased font-sans bg-white text-gray-900 dark:bg-gray-900 dark:text-gray-50`}
         >
-          {children}
+          <ThemeProvider>
+            <NotificationProvider>
+              <Toaster position="top-right" richColors closeButton />
+              {children}
+            </NotificationProvider>
+          </ThemeProvider>
         </body>
       </html>
     </ClerkProvider>
Index: public/robots.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/public/robots.txt b/public/robots.txt
new file mode 100644
--- /dev/null	(date 1747009943150)
+++ b/public/robots.txt	(date 1747009943150)
@@ -0,0 +1,11 @@
+# Allow all crawlers
+User-agent: *
+Allow: /
+
+# Sitemap location
+Sitemap: https://chattersphere.example.com/sitemap.xml
+
+# Disallow specific paths
+Disallow: /api/
+Disallow: /admin/
+Disallow: /private/
Index: src/models/DirectMessage.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/models/DirectMessage.ts b/src/models/DirectMessage.ts
new file mode 100644
--- /dev/null	(date 1747009943233)
+++ b/src/models/DirectMessage.ts	(date 1747009943233)
@@ -0,0 +1,141 @@
+import mongoose, { Document, Schema, Types } from 'mongoose';
+
+export interface IReaction {
+    emoji: string;
+    users: Types.ObjectId[];
+}
+
+export interface IDirectMessage extends Document {
+    content: string;
+    sender: Types.ObjectId;
+    recipient: Types.ObjectId;
+    conversation: Types.ObjectId;
+    attachments: string[];
+    isRead: boolean;
+    isEdited: boolean;
+    reactions: IReaction[];
+    createdAt: Date;
+    updatedAt: Date;
+
+    // Helpers
+    addReaction(emoji: string, userId: Types.ObjectId): Promise<void>;
+    removeReaction(emoji: string, userId: Types.ObjectId): Promise<void>;
+}
+
+// Reaction schema (same as in Message model)
+const ReactionSchema = new Schema<IReaction>(
+    {
+        emoji: {
+            type: String,
+            required: true,
+        },
+        users: {
+            type: [Schema.Types.ObjectId],
+            ref: 'User',
+            default: [],
+        },
+    },
+    { _id: false }
+);
+
+const DirectMessageSchema = new Schema<IDirectMessage>(
+    {
+        content: {
+            type: String,
+            required: true,
+            trim: true,
+            maxlength: 4000,
+        },
+        sender: {
+            type: Schema.Types.ObjectId,
+            ref: 'User',
+            required: true,
+        },
+        recipient: {
+            type: Schema.Types.ObjectId,
+            ref: 'User',
+            required: true,
+        },
+        conversation: {
+            type: Schema.Types.ObjectId,
+            ref: 'Conversation',
+            required: true,
+        },
+        attachments: {
+            type: [String],
+            default: [],
+        },
+        isRead: {
+            type: Boolean,
+            default: false,
+        },
+        isEdited: {
+            type: Boolean,
+            default: false,
+        },
+        reactions: {
+            type: [ReactionSchema],
+            default: [],
+        },
+    },
+    {
+        timestamps: true,
+    }
+);
+
+// Add reaction to a message
+DirectMessageSchema.methods.addReaction = async function (emoji: string, userId: Types.ObjectId): Promise<void> {
+    const existingReaction = this.reactions.find((r: IReaction) => r.emoji === emoji);
+    
+    if (existingReaction) {
+        // Only add user if not already in the list
+        if (!existingReaction.users.some((u: Types.ObjectId) => u.equals(userId))) {
+            existingReaction.users.push(userId);
+        }
+    } else {
+        // Create new reaction
+        this.reactions.push({
+            emoji,
+            users: [userId],
+        });
+    }
+    
+    await this.save();
+};
+
+// Remove reaction from a message
+DirectMessageSchema.methods.removeReaction = async function (emoji: string, userId: Types.ObjectId): Promise<void> {
+    const reactionIndex = this.reactions.findIndex((r: IReaction) => r.emoji === emoji);
+    
+    if (reactionIndex !== -1) {
+        const reaction = this.reactions[reactionIndex];
+        
+        // Remove user from the reaction
+        reaction.users = reaction.users.filter((u: Types.ObjectId) => !u.equals(userId));
+        
+        // If no users left, remove the reaction entirely
+        if (reaction.users.length === 0) {
+            this.reactions.splice(reactionIndex, 1);
+        }
+        
+        await this.save();
+    }
+};
+
+// Static method to get valid mention IDs
+DirectMessageSchema.statics.getValidMentionIds = async function (mentions: string[]): Promise<Types.ObjectId[]> {
+    if (!mentions || !mentions.length) return [];
+    
+    const User = mongoose.model('User');
+    const users = await User.find({ username: { $in: mentions } }).select('_id');
+    
+    return users.map((u: any) => u._id);
+};
+
+// Indexes for efficient querying
+DirectMessageSchema.index({ conversation: 1, createdAt: 1 });
+DirectMessageSchema.index({ sender: 1, recipient: 1 });
+DirectMessageSchema.index({ recipient: 1, isRead: 1 });
+
+export default mongoose.models.DirectMessage || 
+    mongoose.model<IDirectMessage>('DirectMessage', DirectMessageSchema);
Index: src/app/(main)/settings/layout.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/app/(main)/settings/layout.tsx b/src/app/(main)/settings/layout.tsx
new file mode 100644
--- /dev/null	(date 1747009943259)
+++ b/src/app/(main)/settings/layout.tsx	(date 1747009943259)
@@ -0,0 +1,107 @@
+"use client";
+
+import { useState, useEffect } from "react";
+import { usePathname, useRouter } from "next/navigation";
+import Link from "next/link";
+import { User, Settings, Lock, Bell, Shield } from "lucide-react";
+import { Button } from "@/components/ui/button";
+import { useAuth } from "@clerk/nextjs";
+
+interface SettingsLayoutProps {
+  children: React.ReactNode;
+}
+
+export default function SettingsLayout({ children }: SettingsLayoutProps) {
+  const pathname = usePathname();
+  const router = useRouter();
+  const { isLoaded, isSignedIn } = useAuth();
+  const [loading, setLoading] = useState(true);
+
+  useEffect(() => {
+    if (isLoaded) {
+      if (!isSignedIn) {
+        router.push("/sign-in");
+      } else {
+        setLoading(false);
+      }
+    }
+  }, [isLoaded, isSignedIn, router]);
+
+  if (loading) {
+    return (
+      <div className="flex items-center justify-center h-screen">
+        <div className="animate-spin h-8 w-8 border-4 border-blue-500 rounded-full border-t-transparent"></div>
+      </div>
+    );
+  }
+
+  const isActive = (path: string) => pathname === path;
+
+  return (
+    <div className="flex flex-col md:flex-row min-h-screen">
+      {/* Sidebar */}
+      <aside className="w-full md:w-64 bg-white border-r border-gray-200 md:min-h-screen">
+        <div className="p-6">
+          <h2 className="text-xl font-semibold text-gray-800 mb-6">Settings</h2>
+          <nav className="space-y-1">
+            <Link href="/settings/profile" passHref>
+              <Button
+                variant={isActive("/settings/profile") ? "default" : "ghost"}
+                className={`w-full justify-start ${
+                  isActive("/settings/profile")
+                    ? "bg-blue-50 text-blue-700 hover:bg-blue-100 hover:text-blue-800"
+                    : "text-gray-700 hover:bg-gray-100"
+                }`}
+              >
+                <User className="h-4 w-4 mr-3" />
+                Profile
+              </Button>
+            </Link>
+            <Link href="/settings/account" passHref>
+              <Button
+                variant={isActive("/settings/account") ? "default" : "ghost"}
+                className={`w-full justify-start ${
+                  isActive("/settings/account")
+                    ? "bg-blue-50 text-blue-700 hover:bg-blue-100 hover:text-blue-800"
+                    : "text-gray-700 hover:bg-gray-100"
+                }`}
+              >
+                <Lock className="h-4 w-4 mr-3" />
+                Account
+              </Button>
+            </Link>
+            <Link href="/settings/notifications" passHref>
+              <Button
+                variant={isActive("/settings/notifications") ? "default" : "ghost"}
+                className={`w-full justify-start ${
+                  isActive("/settings/notifications")
+                    ? "bg-blue-50 text-blue-700 hover:bg-blue-100 hover:text-blue-800"
+                    : "text-gray-700 hover:bg-gray-100"
+                }`}
+              >
+                <Bell className="h-4 w-4 mr-3" />
+                Notifications
+              </Button>
+            </Link>
+            <Link href="/settings/privacy" passHref>
+              <Button
+                variant={isActive("/settings/privacy") ? "default" : "ghost"}
+                className={`w-full justify-start ${
+                  isActive("/settings/privacy")
+                    ? "bg-blue-50 text-blue-700 hover:bg-blue-100 hover:text-blue-800"
+                    : "text-gray-700 hover:bg-gray-100"
+                }`}
+              >
+                <Shield className="h-4 w-4 mr-3" />
+                Privacy
+              </Button>
+            </Link>
+          </nav>
+        </div>
+      </aside>
+
+      {/* Main Content */}
+      <main className="flex-1 bg-gray-50 min-h-screen">{children}</main>
+    </div>
+  );
+}
Index: src/app/globals.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>@import \"tailwindcss\";\r\n@import \"tailwindcss/utilities\";\r\n@import \"tw-animate-css\";\r\n\r\n@custom-variant dark (&:is(.dark *));\r\n\r\n:root {\r\n  /* Light mode palette */\r\n  --primary:   oklch(0.205 0 0);\r\n  --secondary:   oklch(0.97 0 0);\r\n\r\n  --card:   oklch(1 0 0);\r\n  --card-border:   #E5E7EB;\r\n  --muted:   oklch(0.97 0 0);\r\n  --radius:   0.625rem;\r\n  --background:   oklch(1 0 0);\r\n  --foreground:   oklch(0.145 0 0);\r\n  --card-foreground:   oklch(0.145 0 0);\r\n  --popover:   oklch(1 0 0);\r\n  --popover-foreground:   oklch(0.145 0 0);\r\n  --primary-foreground:   oklch(0.985 0 0);\r\n  --secondary-foreground:   oklch(0.205 0 0);\r\n  --muted-foreground:   oklch(0.556 0 0);\r\n  --accent:   oklch(0.97 0 0);\r\n  --accent-foreground:   oklch(0.205 0 0);\r\n  --destructive:   oklch(0.577 0.245 27.325);\r\n  --border:   oklch(0.922 0 0);\r\n  --input:   oklch(0.922 0 0);\r\n  --ring:   oklch(0.708 0 0);\r\n  --chart-1:   oklch(0.646 0.222 41.116);\r\n  --chart-2:   oklch(0.6 0.118 184.704);\r\n  --chart-3:   oklch(0.398 0.07 227.392);\r\n  --chart-4:   oklch(0.828 0.189 84.429);\r\n  --chart-5:   oklch(0.769 0.188 70.08);\r\n  --sidebar:   oklch(0.985 0 0);\r\n  --sidebar-foreground:   oklch(0.145 0 0);\r\n  --sidebar-primary:   oklch(0.205 0 0);\r\n  --sidebar-primary-foreground:   oklch(0.985 0 0);\r\n  --sidebar-accent:   oklch(0.97 0 0);\r\n  --sidebar-accent-foreground:   oklch(0.205 0 0);\r\n  --sidebar-border:   oklch(0.922 0 0);\r\n  --sidebar-ring:   oklch(0.708 0 0);\r\n}\r\n\r\n.dark {\r\n  /* Dark mode palette */\r\n  --background:   oklch(0.145 0 0);\r\n  --foreground:   oklch(0.985 0 0);\r\n  --primary:   oklch(0.922 0 0);\r\n  --secondary:   oklch(0.269 0 0);\r\n\r\n  --card:   oklch(0.205 0 0);\r\n  --card-border:   #374151;\r\n  --muted:   oklch(0.269 0 0);\r\n  --card-foreground:   oklch(0.985 0 0);\r\n  --popover:   oklch(0.205 0 0);\r\n  --popover-foreground:   oklch(0.985 0 0);\r\n  --primary-foreground:   oklch(0.205 0 0);\r\n  --secondary-foreground:   oklch(0.985 0 0);\r\n  --muted-foreground:   oklch(0.708 0 0);\r\n  --accent:   oklch(0.269 0 0);\r\n  --accent-foreground:   oklch(0.985 0 0);\r\n  --destructive:   oklch(0.704 0.191 22.216);\r\n  --border:   oklch(1 0 0 / 10%);\r\n  --input:   oklch(1 0 0 / 15%);\r\n  --ring:   oklch(0.556 0 0);\r\n  --chart-1:   oklch(0.488 0.243 264.376);\r\n  --chart-2:   oklch(0.696 0.17 162.48);\r\n  --chart-3:   oklch(0.769 0.188 70.08);\r\n  --chart-4:   oklch(0.627 0.265 303.9);\r\n  --chart-5:   oklch(0.645 0.246 16.439);\r\n  --sidebar:   oklch(0.205 0 0);\r\n  --sidebar-foreground:   oklch(0.985 0 0);\r\n  --sidebar-primary:   oklch(0.488 0.243 264.376);\r\n  --sidebar-primary-foreground:   oklch(0.985 0 0);\r\n  --sidebar-accent:   oklch(0.269 0 0);\r\n  --sidebar-accent-foreground:   oklch(0.985 0 0);\r\n  --sidebar-border:   oklch(1 0 0 / 10%);\r\n  --sidebar-ring:   oklch(0.556 0 0);\r\n}\r\n\r\n@theme inline {\r\n  --color-background: var(--background);\r\n  --color-foreground: var(--foreground);\r\n  --color-primary:    var(--primary);\r\n  --color-secondary:  var(--secondary);\r\n  --color-sidebar-ring:   var(--sidebar-ring);\r\n  --color-sidebar-border:   var(--sidebar-border);\r\n  --color-sidebar-accent-foreground:   var(--sidebar-accent-foreground);\r\n  --color-sidebar-accent:   var(--sidebar-accent);\r\n  --color-sidebar-primary-foreground:   var(--sidebar-primary-foreground);\r\n  --color-sidebar-primary:   var(--sidebar-primary);\r\n  --color-sidebar-foreground:   var(--sidebar-foreground);\r\n  --color-sidebar:   var(--sidebar);\r\n  --color-chart-5:   var(--chart-5);\r\n  --color-chart-4:   var(--chart-4);\r\n  --color-chart-3:   var(--chart-3);\r\n  --color-chart-2:   var(--chart-2);\r\n  --color-chart-1:   var(--chart-1);\r\n  --color-ring:   var(--ring);\r\n  --color-input:   var(--input);\r\n  --color-border:   var(--border);\r\n  --color-destructive:   var(--destructive);\r\n  --color-accent-foreground:   var(--accent-foreground);\r\n  --color-accent:   var(--accent);\r\n  --color-muted-foreground:   var(--muted-foreground);\r\n  --color-muted:   var(--muted);\r\n  --color-secondary-foreground:   var(--secondary-foreground);\r\n  --color-primary-foreground:   var(--primary-foreground);\r\n  --color-popover-foreground:   var(--popover-foreground);\r\n  --color-popover:   var(--popover);\r\n  --color-card-foreground:   var(--card-foreground);\r\n  --color-card:   var(--card);\r\n  --radius-sm:   calc(var(--radius) - 4px);\r\n  --radius-md:   calc(var(--radius) - 2px);\r\n  --radius-lg:   var(--radius);\r\n  --radius-xl:   calc(var(--radius) + 4px);\r\n}\r\n\r\n/* your global reset / base styles */\r\n\r\n/* Add smooth transitions for theme changes */\r\n* {\r\n  transition-property: color, background-color, border-color, text-decoration-color, fill, stroke;\r\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\r\n  transition-duration: 150ms;\r\n}\r\n\r\n/* Utility classes for dark mode */\r\n.dark .bg-gray-50 {\r\n  background-color: #1F2937;\r\n}\r\n\r\n.dark .bg-white {\r\n  background-color: #111827;\r\n}\r\n\r\n.dark .border-gray-100,\r\n.dark .border-gray-200 {\r\n  border-color: #374151;\r\n}\r\n\r\n.dark .text-gray-500,\r\n.dark .text-gray-600 {\r\n  color: #9CA3AF;\r\n}\r\n\r\n/* Ensure SVG fills change with theme */\r\n.dark .fill-white {\r\n  fill: #111827;\r\n}\r\n\r\n.dark .fill-gray-50 {\r\n  fill: #1F2937;\r\n}\r\n\r\n/* Post editor styles */\r\n.empty-editor:empty:before {\r\n  content: attr(data-placeholder);\r\n  color: #9CA3AF;\r\n  pointer-events: none;\r\n  position: absolute;\r\n}\r\n\r\n@layer base {\r\n  * {\r\n    @apply border-border outline-ring/50;\r\n  }\r\n  body {\r\n    @apply bg-background text-foreground;\r\n  }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/app/globals.css b/src/app/globals.css
--- a/src/app/globals.css	(revision 4c74be27f19335e5b956190fea65a1f797f84875)
+++ b/src/app/globals.css	(date 1747009940970)
@@ -127,6 +127,10 @@
 }
 
 /* Utility classes for dark mode */
+.dark .bg-gradient-to-b.from-gray-50.to-white {
+  background-image: linear-gradient(to bottom, #1F2937, #111827);
+}
+
 .dark .bg-gray-50 {
   background-color: #1F2937;
 }
@@ -145,6 +149,27 @@
   color: #9CA3AF;
 }
 
+.dark .text-gray-700,
+.dark .text-gray-800,
+.dark .text-gray-900 {
+  color: #E5E7EB;
+}
+
+.dark .shadow-sm,
+.dark .shadow-md,
+.dark .shadow-lg {
+  --tw-shadow-color: rgba(0, 0, 0, 0.3);
+}
+
+.dark .hover\:bg-gray-50:hover,
+.dark .hover\:bg-gray-100:hover {
+  background-color: #374151;
+}
+
+.dark .hover\:text-gray-700:hover {
+  color: #F3F4F6;
+}
+
 /* Ensure SVG fills change with theme */
 .dark .fill-white {
   fill: #111827;
Index: src/app/(main)/settings/account/page.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/app/(main)/settings/account/page.tsx b/src/app/(main)/settings/account/page.tsx
new file mode 100644
--- /dev/null	(date 1747009943208)
+++ b/src/app/(main)/settings/account/page.tsx	(date 1747009943208)
@@ -0,0 +1,492 @@
+"use client";
+
+import { useState, useEffect } from "react";
+import { useRouter } from "next/navigation";
+import { motion } from "framer-motion";
+import { Button } from "@/components/ui/button";
+import { Input } from "@/components/ui/input";
+import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
+import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
+import { Loader2, Save, AlertCircle, User, Mail, Lock, Shield } from "lucide-react";
+import { toast } from "sonner";
+import { useAuth } from "@clerk/nextjs";
+
+interface UserAccount {
+  id: string;
+  email: string;
+  emailVerified: boolean;
+  createdAt: string;
+}
+
+export default function AccountSettingsPage() {
+  const router = useRouter();
+  const { isLoaded, isSignedIn } = useAuth();
+  const [loading, setLoading] = useState(true);
+  const [submitting, setSubmitting] = useState(false);
+  const [error, setError] = useState<string | null>(null);
+  const [account, setAccount] = useState<UserAccount | null>(null);
+  const [activeTab, setActiveTab] = useState("email");
+  const [emailForm, setEmailForm] = useState({
+    email: "",
+    currentPassword: "",
+  });
+  const [passwordForm, setPasswordForm] = useState({
+    currentPassword: "",
+    newPassword: "",
+    confirmPassword: "",
+  });
+  const [emailFieldErrors, setEmailFieldErrors] = useState<Record<string, string>>({});
+  const [passwordFieldErrors, setPasswordFieldErrors] = useState<Record<string, string>>({});
+
+  useEffect(() => {
+    async function fetchUserAccount() {
+      try {
+        setLoading(true);
+        const response = await fetch("/api/users/me/account");
+        if (!response.ok) throw new Error("Failed to fetch account");
+        const data = await response.json();
+        setAccount(data);
+        setEmailForm({
+          email: data.email || "",
+          currentPassword: "",
+        });
+      } catch (err) {
+        setError((err as Error).message);
+        toast.error("Failed to load account");
+      } finally {
+        setLoading(false);
+      }
+    }
+
+    if (isLoaded && isSignedIn) {
+      fetchUserAccount();
+    } else if (isLoaded && !isSignedIn) {
+      router.push("/sign-in");
+    }
+  }, [isLoaded, isSignedIn, router]);
+
+  const handleEmailChange = (e: React.ChangeEvent<HTMLInputElement>) => {
+    const { name, value } = e.target;
+    setEmailForm((prev) => ({ ...prev, [name]: value }));
+    // Clear error when user types
+    if (emailFieldErrors[name]) {
+      setEmailFieldErrors((prev) => ({ ...prev, [name]: "" }));
+    }
+  };
+
+  const handlePasswordChange = (e: React.ChangeEvent<HTMLInputElement>) => {
+    const { name, value } = e.target;
+    setPasswordForm((prev) => ({ ...prev, [name]: value }));
+    // Clear error when user types
+    if (passwordFieldErrors[name]) {
+      setPasswordFieldErrors((prev) => ({ ...prev, [name]: "" }));
+    }
+  };
+
+  const validateEmailForm = () => {
+    const errors: Record<string, string> = {};
+    if (!emailForm.email.trim()) {
+      errors.email = "Email is required";
+    } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(emailForm.email)) {
+      errors.email = "Invalid email format";
+    }
+    if (!emailForm.currentPassword.trim()) {
+      errors.currentPassword = "Current password is required";
+    }
+    setEmailFieldErrors(errors);
+    return Object.keys(errors).length === 0;
+  };
+
+  const validatePasswordForm = () => {
+    const errors: Record<string, string> = {};
+    if (!passwordForm.currentPassword.trim()) {
+      errors.currentPassword = "Current password is required";
+    }
+    if (!passwordForm.newPassword.trim()) {
+      errors.newPassword = "New password is required";
+    } else if (passwordForm.newPassword.length < 8) {
+      errors.newPassword = "Password must be at least 8 characters";
+    }
+    if (!passwordForm.confirmPassword.trim()) {
+      errors.confirmPassword = "Please confirm your password";
+    } else if (passwordForm.newPassword !== passwordForm.confirmPassword) {
+      errors.confirmPassword = "Passwords do not match";
+    }
+    setPasswordFieldErrors(errors);
+    return Object.keys(errors).length === 0;
+  };
+
+  const handleEmailSubmit = async (e: React.FormEvent) => {
+    e.preventDefault();
+    if (!validateEmailForm()) return;
+
+    try {
+      setSubmitting(true);
+      const response = await fetch("/api/users/me/email", {
+        method: "POST",
+        headers: {
+          "Content-Type": "application/json",
+        },
+        body: JSON.stringify(emailForm),
+      });
+
+      if (!response.ok) {
+        const errorData = await response.json();
+        if (response.status === 400 && errorData.details) {
+          const serverFieldErrors: Record<string, string> = {};
+          Object.entries(errorData.details).forEach(([field, error]) => {
+            if (typeof error === "object" && Array.isArray((error as any)._errors)) {
+              serverFieldErrors[field] = (error as any)._errors[0];
+            }
+          });
+          setEmailFieldErrors(serverFieldErrors);
+          throw new Error("Validation failed");
+        }
+        throw new Error(errorData.error || "Update failed");
+      }
+
+      toast.success("Email update request sent. Please check your inbox for verification.");
+      setEmailForm((prev) => ({ ...prev, currentPassword: "" }));
+    } catch (err) {
+      toast.error((err as Error).message);
+    } finally {
+      setSubmitting(false);
+    }
+  };
+
+  const handlePasswordSubmit = async (e: React.FormEvent) => {
+    e.preventDefault();
+    if (!validatePasswordForm()) return;
+
+    try {
+      setSubmitting(true);
+      const response = await fetch("/api/users/me/password", {
+        method: "POST",
+        headers: {
+          "Content-Type": "application/json",
+        },
+        body: JSON.stringify(passwordForm),
+      });
+
+      if (!response.ok) {
+        const errorData = await response.json();
+        if (response.status === 400 && errorData.details) {
+          const serverFieldErrors: Record<string, string> = {};
+          Object.entries(errorData.details).forEach(([field, error]) => {
+            if (typeof error === "object" && Array.isArray((error as any)._errors)) {
+              serverFieldErrors[field] = (error as any)._errors[0];
+            }
+          });
+          setPasswordFieldErrors(serverFieldErrors);
+          throw new Error("Validation failed");
+        }
+        throw new Error(errorData.error || "Update failed");
+      }
+
+      toast.success("Password updated successfully");
+      setPasswordForm({
+        currentPassword: "",
+        newPassword: "",
+        confirmPassword: "",
+      });
+    } catch (err) {
+      toast.error((err as Error).message);
+    } finally {
+      setSubmitting(false);
+    }
+  };
+
+  if (loading) {
+    return (
+      <div className="flex items-center justify-center h-full">
+        <Loader2 className="h-8 w-8 animate-spin text-blue-500" />
+      </div>
+    );
+  }
+
+  if (error) {
+    return (
+      <div className="max-w-2xl mx-auto p-6">
+        <div className="bg-red-50 border border-red-200 rounded-lg p-4 flex items-start">
+          <AlertCircle className="h-5 w-5 text-red-500 mt-0.5 mr-3" />
+          <div>
+            <h3 className="text-red-800 font-medium">Error</h3>
+            <p className="text-red-700 text-sm">{error}</p>
+          </div>
+        </div>
+        <Button className="mt-4" onClick={() => window.location.reload()}>
+          Try Again
+        </Button>
+      </div>
+    );
+  }
+
+  return (
+    <motion.div
+      initial={{ opacity: 0 }}
+      animate={{ opacity: 1 }}
+      className="max-w-2xl mx-auto p-6"
+    >
+      <div className="mb-8">
+        <h1 className="text-2xl font-bold text-gray-900">Account Settings</h1>
+        <p className="text-gray-500">Manage your account settings and security</p>
+      </div>
+
+      <Tabs value={activeTab} onValueChange={setActiveTab}>
+        <TabsList className="mb-6">
+          <TabsTrigger value="email" className="flex items-center">
+            <Mail className="h-4 w-4 mr-2" />
+            Email
+          </TabsTrigger>
+          <TabsTrigger value="password" className="flex items-center">
+            <Lock className="h-4 w-4 mr-2" />
+            Password
+          </TabsTrigger>
+          <TabsTrigger value="security" className="flex items-center">
+            <Shield className="h-4 w-4 mr-2" />
+            Security
+          </TabsTrigger>
+        </TabsList>
+
+        <TabsContent value="email">
+          <Card>
+            <CardHeader>
+              <CardTitle>Email Address</CardTitle>
+              <CardDescription>
+                Update your email address. You'll need to verify the new email.
+              </CardDescription>
+            </CardHeader>
+            <CardContent>
+              <form onSubmit={handleEmailSubmit} className="space-y-4">
+                <div>
+                  <label className="block text-sm font-medium text-gray-700 mb-1">
+                    Current Email
+                  </label>
+                  <Input
+                    type="text"
+                    value={account?.email || ""}
+                    disabled
+                    className="bg-gray-50"
+                  />
+                  {account?.emailVerified ? (
+                    <p className="text-xs text-green-600 mt-1">Verified</p>
+                  ) : (
+                    <p className="text-xs text-amber-600 mt-1">Not verified</p>
+                  )}
+                </div>
+
+                <div>
+                  <label className="block text-sm font-medium text-gray-700 mb-1">
+                    New Email
+                  </label>
+                  <Input
+                    type="email"
+                    name="email"
+                    value={emailForm.email}
+                    onChange={handleEmailChange}
+                    required
+                  />
+                  {emailFieldErrors.email && (
+                    <p className="text-sm text-red-600 mt-1">{emailFieldErrors.email}</p>
+                  )}
+                </div>
+
+                <div>
+                  <label className="block text-sm font-medium text-gray-700 mb-1">
+                    Current Password
+                  </label>
+                  <Input
+                    type="password"
+                    name="currentPassword"
+                    value={emailForm.currentPassword}
+                    onChange={handleEmailChange}
+                    required
+                  />
+                  {emailFieldErrors.currentPassword && (
+                    <p className="text-sm text-red-600 mt-1">{emailFieldErrors.currentPassword}</p>
+                  )}
+                </div>
+
+                <Button type="submit" disabled={submitting} className="w-full">
+                  {submitting ? (
+                    <>
+                      <Loader2 className="h-4 w-4 mr-2 animate-spin" />
+                      Updating...
+                    </>
+                  ) : (
+                    <>
+                      <Save className="h-4 w-4 mr-2" />
+                      Update Email
+                    </>
+                  )}
+                </Button>
+              </form>
+            </CardContent>
+          </Card>
+        </TabsContent>
+
+        <TabsContent value="password">
+          <Card>
+            <CardHeader>
+              <CardTitle>Change Password</CardTitle>
+              <CardDescription>
+                Update your password to keep your account secure.
+              </CardDescription>
+            </CardHeader>
+            <CardContent>
+              <form onSubmit={handlePasswordSubmit} className="space-y-4">
+                <div>
+                  <label className="block text-sm font-medium text-gray-700 mb-1">
+                    Current Password
+                  </label>
+                  <Input
+                    type="password"
+                    name="currentPassword"
+                    value={passwordForm.currentPassword}
+                    onChange={handlePasswordChange}
+                    required
+                  />
+                  {passwordFieldErrors.currentPassword && (
+                    <p className="text-sm text-red-600 mt-1">{passwordFieldErrors.currentPassword}</p>
+                  )}
+                </div>
+
+                <div>
+                  <label className="block text-sm font-medium text-gray-700 mb-1">
+                    New Password
+                  </label>
+                  <Input
+                    type="password"
+                    name="newPassword"
+                    value={passwordForm.newPassword}
+                    onChange={handlePasswordChange}
+                    required
+                  />
+                  {passwordFieldErrors.newPassword && (
+                    <p className="text-sm text-red-600 mt-1">{passwordFieldErrors.newPassword}</p>
+                  )}
+                </div>
+
+                <div>
+                  <label className="block text-sm font-medium text-gray-700 mb-1">
+                    Confirm New Password
+                  </label>
+                  <Input
+                    type="password"
+                    name="confirmPassword"
+                    value={passwordForm.confirmPassword}
+                    onChange={handlePasswordChange}
+                    required
+                  />
+                  {passwordFieldErrors.confirmPassword && (
+                    <p className="text-sm text-red-600 mt-1">{passwordFieldErrors.confirmPassword}</p>
+                  )}
+                </div>
+
+                <Button type="submit" disabled={submitting} className="w-full">
+                  {submitting ? (
+                    <>
+                      <Loader2 className="h-4 w-4 mr-2 animate-spin" />
+                      Updating...
+                    </>
+                  ) : (
+                    <>
+                      <Save className="h-4 w-4 mr-2" />
+                      Update Password
+                    </>
+                  )}
+                </Button>
+              </form>
+            </CardContent>
+          </Card>
+        </TabsContent>
+
+        <TabsContent value="security">
+          <Card>
+            <CardHeader>
+              <CardTitle>Security Settings</CardTitle>
+              <CardDescription>
+                Manage your account security settings.
+              </CardDescription>
+            </CardHeader>
+            <CardContent>
+              <div className="space-y-4">
+                <div>
+                  <h3 className="text-lg font-medium">Account Information</h3>
+                  <p className="text-sm text-gray-500 mb-4">
+                    Basic information about your account.
+                  </p>
+
+                  <div className="space-y-2">
+                    <div className="flex justify-between py-2 border-b border-gray-100">
+                      <span className="text-gray-600">Account ID</span>
+                      <span className="font-mono text-sm">{account?.id}</span>
+                    </div>
+                    <div className="flex justify-between py-2 border-b border-gray-100">
+                      <span className="text-gray-600">Created</span>
+                      <span>
+                        {account?.createdAt
+                          ? new Date(account.createdAt).toLocaleDateString()
+                          : "Unknown"}
+                      </span>
+                    </div>
+                    <div className="flex justify-between py-2 border-b border-gray-100">
+                      <span className="text-gray-600">Email Verified</span>
+                      <span>
+                        {account?.emailVerified ? (
+                          <span className="text-green-600">Yes</span>
+                        ) : (
+                          <span className="text-red-600">No</span>
+                        )}
+                      </span>
+                    </div>
+                  </div>
+                </div>
+
+                <div className="pt-4">
+                  <h3 className="text-lg font-medium">Account Actions</h3>
+                  <p className="text-sm text-gray-500 mb-4">
+                    Manage your account access and data.
+                  </p>
+
+                  <div className="space-y-3">
+                    <Button
+                      variant="outline"
+                      className="w-full justify-start"
+                      onClick={() => toast.info("This feature is coming soon")}
+                    >
+                      <Shield className="h-4 w-4 mr-2" />
+                      Enable Two-Factor Authentication
+                    </Button>
+
+                    <Button
+                      variant="outline"
+                      className="w-full justify-start"
+                      onClick={() => toast.info("This feature is coming soon")}
+                    >
+                      <User className="h-4 w-4 mr-2" />
+                      Download Your Data
+                    </Button>
+
+                    <Button
+                      variant="destructive"
+                      className="w-full justify-start"
+                      onClick={() => {
+                        if (confirm("Are you sure you want to delete your account? This action cannot be undone.")) {
+                          toast.info("This feature is coming soon");
+                        }
+                      }}
+                    >
+                      <AlertCircle className="h-4 w-4 mr-2" />
+                      Delete Account
+                    </Button>
+                  </div>
+                </div>
+              </div>
+            </CardContent>
+          </Card>
+        </TabsContent>
+      </Tabs>
+    </motion.div>
+  );
+}
Index: src/app/api/conversations/route.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/app/api/conversations/route.ts b/src/app/api/conversations/route.ts
new file mode 100644
--- /dev/null	(date 1747009943336)
+++ b/src/app/api/conversations/route.ts	(date 1747009943336)
@@ -0,0 +1,204 @@
+import { NextRequest, NextResponse } from 'next/server';
+import { auth } from '@clerk/nextjs/server';
+import connectToDatabase from '@/lib/dbConnect';
+import User from '@/models/User';
+import Conversation from '@/models/Conversation';
+import DirectMessage from '@/models/DirectMessage';
+import { z } from 'zod';
+import { Types } from 'mongoose';
+
+// Validation schemas
+const PaginationSchema = z.object({
+  page: z.coerce.number().int().min(1).default(1),
+  limit: z.coerce.number().int().min(1).max(50).default(20),
+});
+
+const CreateConversationSchema = z.object({
+  recipientId: z.string().min(1),
+  initialMessage: z.string().min(1).max(4000).optional(),
+});
+
+/**
+ * GET /api/conversations - Get user's conversations
+ */
+export async function GET(req: NextRequest) {
+  try {
+    // Authenticate user
+    const { userId } = await auth();
+    if (!userId) {
+      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
+    }
+
+    await connectToDatabase();
+
+    // Find user
+    const user = await User.findOne({ clerkId: userId });
+    if (!user) {
+      return NextResponse.json({ error: 'User not found' }, { status: 404 });
+    }
+
+    // Parse query parameters
+    const url = new URL(req.url);
+    const queryParams = {
+      page: url.searchParams.get('page') ? Number(url.searchParams.get('page')) : undefined,
+      limit: url.searchParams.get('limit') ? Number(url.searchParams.get('limit')) : undefined,
+    };
+
+    const validatedParams = PaginationSchema.safeParse(queryParams);
+    if (!validatedParams.success) {
+      return NextResponse.json({ 
+        error: 'Invalid query parameters',
+        details: validatedParams.error.format()
+      }, { status: 400 });
+    }
+
+    const { page, limit } = validatedParams.data;
+    const skip = (page - 1) * limit;
+
+    // Find conversations where user is a participant
+    const conversations = await Conversation.find({
+      participants: user._id
+    })
+      .sort({ lastActivity: -1 })
+      .skip(skip)
+      .limit(limit)
+      .populate({
+        path: 'participants',
+        match: { _id: { $ne: user._id } }, // Only populate the other participant
+        select: 'username name image'
+      })
+      .populate('lastMessage', 'content createdAt isRead')
+      .lean();
+
+    // Get total count for pagination
+    const totalConversations = await Conversation.countDocuments({
+      participants: user._id
+    });
+
+    // Get unread counts for each conversation
+    const conversationsWithUnreadCount = await Promise.all(
+      conversations.map(async (conversation) => {
+        const unreadCount = await DirectMessage.countDocuments({
+          conversation: conversation._id,
+          recipient: user._id,
+          isRead: false
+        });
+
+        return {
+          id: conversation._id.toString(),
+          participant: conversation.participants[0] ? {
+            id: conversation.participants[0]._id.toString(),
+            username: conversation.participants[0].username,
+            name: conversation.participants[0].name,
+            image: conversation.participants[0].image
+          } : null,
+          lastMessage: conversation.lastMessage ? {
+            id: conversation.lastMessage._id.toString(),
+            content: conversation.lastMessage.content,
+            createdAt: conversation.lastMessage.createdAt,
+            isRead: conversation.lastMessage.isRead
+          } : null,
+          lastActivity: conversation.lastActivity,
+          unreadCount
+        };
+      })
+    );
+
+    return NextResponse.json({
+      conversations: conversationsWithUnreadCount,
+      pagination: {
+        page,
+        limit,
+        totalItems: totalConversations,
+        totalPages: Math.ceil(totalConversations / limit),
+        hasMore: skip + conversations.length < totalConversations
+      }
+    }, { status: 200 });
+  } catch (error) {
+    console.error('[GET CONVERSATIONS]', error);
+    return NextResponse.json({ error: 'Failed to fetch conversations' }, { status: 500 });
+  }
+}
+
+/**
+ * POST /api/conversations - Create a new conversation
+ */
+export async function POST(req: NextRequest) {
+  try {
+    // Authenticate user
+    const { userId } = await auth();
+    if (!userId) {
+      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
+    }
+
+    await connectToDatabase();
+
+    // Find user
+    const user = await User.findOne({ clerkId: userId });
+    if (!user) {
+      return NextResponse.json({ error: 'User not found' }, { status: 404 });
+    }
+
+    // Validate request body
+    const body = await req.json();
+    const validatedBody = CreateConversationSchema.safeParse(body);
+    if (!validatedBody.success) {
+      return NextResponse.json({ 
+        error: 'Invalid request body',
+        details: validatedBody.error.format()
+      }, { status: 400 });
+    }
+
+    const { recipientId, initialMessage } = validatedBody.data;
+
+    // Validate recipient exists
+    const recipient = await User.findById(recipientId);
+    if (!recipient) {
+      return NextResponse.json({ error: 'Recipient not found' }, { status: 404 });
+    }
+
+    // Check if trying to message self
+    if (user._id.toString() === recipientId) {
+      return NextResponse.json({ error: 'Cannot create conversation with yourself' }, { status: 400 });
+    }
+
+    // Find or create conversation
+    const conversation = await Conversation.findOrCreateConversation(user._id, recipient._id);
+
+    // If initial message provided, create it
+    if (initialMessage) {
+      const message = await DirectMessage.create({
+        content: initialMessage,
+        sender: user._id,
+        recipient: recipient._id,
+        conversation: conversation._id,
+        isRead: false
+      });
+
+      // Update conversation's last message and activity
+      conversation.lastMessage = message._id;
+      conversation.lastActivity = new Date();
+      await conversation.save();
+    }
+
+    // Format response
+    const formattedConversation = {
+      id: conversation._id.toString(),
+      participant: {
+        id: recipient._id.toString(),
+        username: recipient.username,
+        name: recipient.name,
+        image: recipient.image
+      },
+      lastActivity: conversation.lastActivity,
+      createdAt: conversation.createdAt
+    };
+
+    return NextResponse.json({
+      conversation: formattedConversation
+    }, { status: 201 });
+  } catch (error) {
+    console.error('[CREATE CONVERSATION]', error);
+    return NextResponse.json({ error: 'Failed to create conversation' }, { status: 500 });
+  }
+}
Index: src/app/api/posts/route.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// src/app/api/posts/route.ts\r\nimport { NextRequest, NextResponse } from \"next/server\";\r\nimport { auth } from \"@clerk/nextjs/server\";\r\nimport dbConnect from \"@/lib/dbConnect\";\r\nimport User from \"@/models/User\";\r\nimport Post from \"@/models/Post\";\r\nimport Community from \"@/models/Community\";\r\nimport { Types } from \"mongoose\";\r\n\r\ntype RawPost = {\r\n  _id: Types.ObjectId;\r\n  author:\r\n      | Types.ObjectId\r\n      | {\r\n    _id: Types.ObjectId;\r\n    username: string;\r\n    name: string;\r\n    image?: string;\r\n  };\r\n  community?:\r\n      | Types.ObjectId\r\n      | {\r\n    _id: Types.ObjectId;\r\n    name: string;\r\n    image?: string;\r\n  };\r\n  content: string;\r\n  upvotes: Types.ObjectId[];\r\n  downvotes: Types.ObjectId[];\r\n  comments: Types.ObjectId[];\r\n  createdAt: Date;\r\n  updatedAt: Date;\r\n};\r\n\r\nexport async function GET(req: NextRequest) {\r\n  try {\r\n    console.log('[GET] Received request to fetch posts');\r\n\r\n    const { userId } = await auth();\r\n    console.log(`[GET] User ID from auth: ${userId || 'not authenticated'}`);\r\n\r\n    console.log('[GET] Connecting to database...');\r\n    await dbConnect();\r\n    console.log('[GET] Connected to database');\r\n\r\n    const url = req.nextUrl;\r\n    const page = parseInt(url.searchParams.get(\"page\") ?? \"1\", 10);\r\n    const limit = parseInt(url.searchParams.get(\"limit\") ?? \"10\", 10);\r\n    const communityIdParam = url.searchParams.get(\"communityId\") ?? undefined;\r\n    const skip = (page - 1) * limit;\r\n\r\n    console.log(`[GET] Fetching posts: page=${page}, limit=${limit}${communityIdParam ? `, communityId=${communityIdParam}` : ''}`);\r\n\r\n\r\n    const filter: Record<string, unknown> = {};\r\n\r\n    if (communityIdParam) {\r\n      filter.community = new Types.ObjectId(communityIdParam);\r\n    } else if (userId) {\r\n      const me = await User.findOne({ clerkId: userId }).select(\"_id\");\r\n      if (me) {\r\n        const joined = await Community.find({ members: me._id }).select(\"_id\");\r\n        const joinedIds = joined.map((c: { _id: Types.ObjectId }) => c._id);\r\n        filter.community = { $in: joinedIds };\r\n      }\r\n    }\r\n\r\n    // Fetch posts with error handling\r\n    let rawPosts;\r\n    try {\r\n      rawPosts = await Post.find(filter)\r\n          .sort({ createdAt: -1 })\r\n          .skip(skip)\r\n          .limit(limit)\r\n          .populate(\"author\", \"username name image\")\r\n          .populate(\"community\", \"name image\")\r\n          .lean<RawPost[]>();\r\n\r\n      console.log(`[GET] Successfully fetched ${rawPosts.length} posts`);\r\n    } catch (fetchError) {\r\n      console.error('[GET] Error fetching posts:', fetchError);\r\n      return NextResponse.json({\r\n        error: \"Failed to fetch posts\",\r\n        details: fetchError instanceof Error ? fetchError.message : 'Unknown error'\r\n      }, { status: 500 });\r\n    }\r\n\r\n    // Count total posts\r\n    let total;\r\n    try {\r\n      total = await Post.countDocuments(filter);\r\n      console.log(`[GET] Total posts count: ${total}`);\r\n    } catch (countError) {\r\n      console.error('[GET] Error counting posts:', countError);\r\n      return NextResponse.json({\r\n        error: \"Failed to count posts\",\r\n        details: countError instanceof Error ? countError.message : 'Unknown error'\r\n      }, { status: 500 });\r\n    }\r\n\r\n    let meId: Types.ObjectId | null = null;\r\n    if (userId) {\r\n      const me = await User.findOne({ clerkId: userId }).select(\"_id\");\r\n      if (me) meId = me._id;\r\n    }\r\n\r\n    const posts = rawPosts.map((p) => {\r\n      // Author\r\n      let authorInfo: {\r\n        id: string;\r\n        username: string;\r\n        name: string;\r\n        image?: string;\r\n      };\r\n      if (\r\n          typeof p.author === \"object\" &&\r\n          \"_id\" in p.author &&\r\n          \"username\" in p.author\r\n      ) {\r\n        const a = p.author as {\r\n          _id: Types.ObjectId;\r\n          username: string;\r\n          name: string;\r\n          image?: string;\r\n        };\r\n        authorInfo = {\r\n          id: a._id.toString(),\r\n          username: a.username,\r\n          name: a.name,\r\n          image: a.image,\r\n        };\r\n      } else {\r\n        authorInfo = { id: \"\", username: \"\", name: \"\" };\r\n      }\r\n\r\n      // Community\r\n      let communityInfo:\r\n          | {\r\n        id: string;\r\n        name: string;\r\n        image?: string;\r\n      }\r\n          | undefined;\r\n      if (\r\n          p.community &&\r\n          typeof p.community === \"object\" &&\r\n          \"_id\" in p.community &&\r\n          \"name\" in p.community\r\n      ) {\r\n        const c = p.community as {\r\n          _id: Types.ObjectId;\r\n          name: string;\r\n          image?: string;\r\n        };\r\n        communityInfo = {\r\n          id: c._id.toString(),\r\n          name: c.name,\r\n          image: c.image,\r\n        };\r\n      } else {\r\n        communityInfo = undefined;\r\n      }\r\n\r\n      const upvotes = p.upvotes ?? [];\r\n      const downvotes = p.downvotes ?? [];\r\n      const comments = p.comments ?? [];\r\n\r\n      const isUpvoted = meId ? upvotes.some((u) => u.equals(meId)) : false;\r\n      const isDownvoted = meId ? downvotes.some((d) => d.equals(meId)) : false;\r\n\r\n      return {\r\n        id: p._id.toString(),\r\n        author: authorInfo,\r\n        content: p.content,\r\n        community: communityInfo,\r\n        upvoteCount: upvotes.length,\r\n        downvoteCount: downvotes.length,\r\n        voteCount: upvotes.length - downvotes.length,\r\n        commentCount: comments.length,\r\n        isUpvoted,\r\n        isDownvoted,\r\n        createdAt: p.createdAt.toISOString(),\r\n        updatedAt: p.updatedAt.toISOString(),\r\n      };\r\n    });\r\n\r\n    return NextResponse.json(\r\n        {\r\n          posts,\r\n          pagination: {\r\n            page,\r\n            limit,\r\n            totalPosts: total,\r\n            hasMore: total > skip + posts.length,\r\n          },\r\n        },\r\n        { status: 200 }\r\n    );\r\n  } catch (error) {\r\n    console.error(\"[GET] Error fetching posts:\", error);\r\n    return NextResponse.json({ error: \"Failed to fetch posts\" }, { status: 500 });\r\n  }\r\n}\r\n\r\nexport async function POST(req: NextRequest) {\r\n  try {\r\n    console.log('[POST] Received post creation request');\r\n\r\n    const { userId } = await auth();\r\n    if (!userId) {\r\n      console.log('[POST] Unauthorized request - no userId');\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\r\n    }\r\n\r\n    console.log('[POST] Connecting to database...');\r\n    await dbConnect();\r\n    console.log('[POST] Connected to database');\r\n\r\n    const { content, communityId } = (await req.json()) as {\r\n      content: string;\r\n      communityId?: string;\r\n    };\r\n\r\n    console.log(`[POST] Received content (${content.length} chars)${communityId ? ` for community ${communityId}` : ''}`);\r\n\r\n\r\n    if (!content.trim()) {\r\n      return NextResponse.json(\r\n          { error: \"Post content is required\" },\r\n          { status: 400 }\r\n      );\r\n    }\r\n    if (content.length > 50000) {\r\n      return NextResponse.json(\r\n          { error: \"Post too long; max 50000 chars\" },\r\n          { status: 400 }\r\n      );\r\n    }\r\n\r\n    const sanitized = content\r\n        .replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi, \"\")\r\n        .replace(/on\\w+=\"[^\"]*\"/g, \"\")\r\n        .replace(/javascript:[^\\s\"']+/g, \"\");\r\n\r\n    console.log(`[POST] Looking for user with clerkId: ${userId}`);\r\n    let user = await User.findOne({ clerkId: userId });\r\n\r\n    if (!user) {\r\n      console.log(`[POST] User with clerkId ${userId} not found in database`);\r\n\r\n      // Create a new user if not found\r\n      console.log(`[POST] Attempting to create a new user for clerkId: ${userId}`);\r\n      try {\r\n        // This is a fallback mechanism - ideally the webhook should create the user\r\n        const newUser = await User.create({\r\n          clerkId: userId,\r\n          username: `user_${userId.slice(0, 8)}`,\r\n          name: `User ${userId.slice(0, 6)}`,\r\n          email: `user_${userId.slice(0, 8)}@example.com`,\r\n          following: [],\r\n          followers: [],\r\n          communities: []\r\n        });\r\n\r\n        console.log(`[POST] Created new user with id: ${newUser._id}`);\r\n        user = newUser;\r\n      } catch (userCreateError) {\r\n        console.error('[POST] Failed to create user:', userCreateError);\r\n        return NextResponse.json({\r\n          error: \"User not found and automatic creation failed\",\r\n          details: userCreateError instanceof Error ? userCreateError.message : 'Unknown error'\r\n        }, { status: 404 });\r\n      }\r\n    } else {\r\n      console.log(`[POST] Found user: ${user.username} (${user._id})`);\r\n    }\r\n\r\n    const newPost = await Post.create({\r\n      author: user._id,\r\n      content: sanitized,\r\n      upvotes: [],\r\n      downvotes: [],\r\n      comments: [],\r\n      community: communityId,\r\n    });\r\n\r\n    if (communityId) {\r\n      const com = await Community.findById(communityId);\r\n      if (!com) {\r\n        return NextResponse.json(\r\n            { error: \"Community not found\" },\r\n            { status: 404 }\r\n        );\r\n      }\r\n      if (!com.members.some((m: Types.ObjectId) => m.equals(user._id))) {\r\n        return NextResponse.json(\r\n            { error: \"Must join community first\" },\r\n            { status: 403 }\r\n        );\r\n      }\r\n      await com.updateOne({ $push: { posts: newPost._id } });\r\n    }\r\n\r\n    await newPost.populate(\"author\", \"username name image\");\r\n    if (communityId) {\r\n      await newPost.populate(\"community\", \"name image\");\r\n    }\r\n\r\n    return NextResponse.json(\r\n        {\r\n          post: {\r\n            id: newPost._id.toString(),\r\n            author: {\r\n              id: newPost.author._id.toString(),\r\n              username: newPost.author.username,\r\n              name: newPost.author.name,\r\n              image: newPost.author.image,\r\n            },\r\n            content: newPost.content,\r\n            community: newPost.community\r\n                ? {\r\n                  id: newPost.community._id.toString(),\r\n                  name: newPost.community.name,\r\n                  image: newPost.community.image,\r\n                }\r\n                : undefined,\r\n            upvoteCount: 0,\r\n            downvoteCount: 0,\r\n            voteCount: 0,\r\n            commentCount: 0,\r\n            isUpvoted: false,\r\n            isDownvoted: false,\r\n            createdAt: newPost.createdAt.toISOString(),\r\n            updatedAt: newPost.updatedAt.toISOString(),\r\n          },\r\n        },\r\n        { status: 201 }\r\n    );\r\n  } catch (error) {\r\n    console.error(\"[POST] Error creating post:\", error);\r\n    return NextResponse.json({\r\n      error: \"Failed to create post\",\r\n      details: error instanceof Error ? error.message : 'Unknown error'\r\n    }, { status: 500 });\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/app/api/posts/route.ts b/src/app/api/posts/route.ts
--- a/src/app/api/posts/route.ts	(revision 4c74be27f19335e5b956190fea65a1f797f84875)
+++ b/src/app/api/posts/route.ts	(date 1747009941092)
@@ -3,45 +3,55 @@
 import { auth } from "@clerk/nextjs/server";
 import dbConnect from "@/lib/dbConnect";
 import User from "@/models/User";
-import Post from "@/models/Post";
+import Post, { IPost } from "@/models/Post";
 import Community from "@/models/Community";
 import { Types } from "mongoose";
+import { LeanDocument } from "@/types/mongoose";
+import { PostResponse, UserInfo, CommunityInfo } from "@/types/api";
 
-type RawPost = {
+// Type for fetched posts with populated fields
+type PopulatedAuthor = {
   _id: Types.ObjectId;
-  author:
-      | Types.ObjectId
-      | {
-    _id: Types.ObjectId;
-    username: string;
-    name: string;
-    image?: string;
-  };
-  community?:
-      | Types.ObjectId
-      | {
-    _id: Types.ObjectId;
-    name: string;
-    image?: string;
-  };
-  content: string;
+  username: string;
+  name: string;
+  image?: string;
+};
+
+type PopulatedCommunity = {
+  _id: Types.ObjectId;
+  name: string;
+  image?: string;
+};
+
+type RawPost = LeanDocument<IPost> & {
+  author: PopulatedAuthor;
+  community?: PopulatedCommunity;
+  mediaFiles: string[];
   upvotes: Types.ObjectId[];
   downvotes: Types.ObjectId[];
   comments: Types.ObjectId[];
+  savedBy: Types.ObjectId[];
   createdAt: Date;
   updatedAt: Date;
 };
 
+interface PostPaginationResponse {
+  posts: PostResponse[];
+  pagination: {
+    page: number;
+    limit: number;
+    totalPosts: number;
+    hasMore: boolean;
+  };
+}
+
+// ---------------- GET Handler ----------------
 export async function GET(req: NextRequest) {
   try {
-    console.log('[GET] Received request to fetch posts');
+    console.log("[POSTS:GET] Fetching posts...");
 
     const { userId } = await auth();
-    console.log(`[GET] User ID from auth: ${userId || 'not authenticated'}`);
-
-    console.log('[GET] Connecting to database...');
     await dbConnect();
-    console.log('[GET] Connected to database');
 
     const url = req.nextUrl;
     const page = parseInt(url.searchParams.get("page") ?? "1", 10);
@@ -49,192 +59,128 @@
     const communityIdParam = url.searchParams.get("communityId") ?? undefined;
     const skip = (page - 1) * limit;
 
-    console.log(`[GET] Fetching posts: page=${page}, limit=${limit}${communityIdParam ? `, communityId=${communityIdParam}` : ''}`);
-
-
-    const filter: Record<string, unknown> = {};
+    // Build the query with proper typing
+    const filter: { community?: Types.ObjectId | { $in: Types.ObjectId[] } } = {};
 
     if (communityIdParam) {
       filter.community = new Types.ObjectId(communityIdParam);
     } else if (userId) {
-      const me = await User.findOne({ clerkId: userId }).select("_id");
+      const me = await User.findOne({ clerkId: userId }).select("_id").lean<{ _id: Types.ObjectId }>();
       if (me) {
-        const joined = await Community.find({ members: me._id }).select("_id");
-        const joinedIds = joined.map((c: { _id: Types.ObjectId }) => c._id);
-        filter.community = { $in: joinedIds };
+        const joined = await Community.find({ members: me._id }).select("_id").lean<Array<{ _id: Types.ObjectId }>>();
+        filter.community = { $in: joined.map((c) => c._id) };
       }
     }
 
-    // Fetch posts with error handling
-    let rawPosts;
-    try {
-      rawPosts = await Post.find(filter)
+    const [rawPosts, total] = await Promise.all([
+      Post.find(filter)
           .sort({ createdAt: -1 })
           .skip(skip)
           .limit(limit)
           .populate("author", "username name image")
           .populate("community", "name image")
-          .lean<RawPost[]>();
-
-      console.log(`[GET] Successfully fetched ${rawPosts.length} posts`);
-    } catch (fetchError) {
-      console.error('[GET] Error fetching posts:', fetchError);
-      return NextResponse.json({
-        error: "Failed to fetch posts",
-        details: fetchError instanceof Error ? fetchError.message : 'Unknown error'
-      }, { status: 500 });
-    }
+          .lean<RawPost[]>(),
+      Post.countDocuments(filter),
+    ]);
 
-    // Count total posts
-    let total;
-    try {
-      total = await Post.countDocuments(filter);
-      console.log(`[GET] Total posts count: ${total}`);
-    } catch (countError) {
-      console.error('[GET] Error counting posts:', countError);
-      return NextResponse.json({
-        error: "Failed to count posts",
-        details: countError instanceof Error ? countError.message : 'Unknown error'
-      }, { status: 500 });
-    }
-
+    // Get current user ID if authenticated
     let meId: Types.ObjectId | null = null;
     if (userId) {
-      const me = await User.findOne({ clerkId: userId }).select("_id");
-      if (me) meId = me._id;
+      const me = await User.findOne({ clerkId: userId }).select("_id").lean<{ _id: Types.ObjectId }>();
+      meId = me?._id || null;
     }
 
-    const posts = rawPosts.map((p) => {
-      // Author
-      let authorInfo: {
-        id: string;
-        username: string;
-        name: string;
-        image?: string;
+    // Transform raw posts to response format
+    const posts: PostResponse[] = rawPosts.map((p) => {
+      // Create author info
+      const authorInfo: UserInfo = {
+        id: p.author._id.toString(),
+        username: p.author.username,
+        name: p.author.name,
+        image: p.author.image,
       };
-      if (
-          typeof p.author === "object" &&
-          "_id" in p.author &&
-          "username" in p.author
-      ) {
-        const a = p.author as {
-          _id: Types.ObjectId;
-          username: string;
-          name: string;
-          image?: string;
-        };
-        authorInfo = {
-          id: a._id.toString(),
-          username: a.username,
-          name: a.name,
-          image: a.image,
-        };
-      } else {
-        authorInfo = { id: "", username: "", name: "" };
-      }
 
-      // Community
-      let communityInfo:
-          | {
-        id: string;
-        name: string;
-        image?: string;
-      }
-          | undefined;
-      if (
-          p.community &&
-          typeof p.community === "object" &&
-          "_id" in p.community &&
-          "name" in p.community
-      ) {
-        const c = p.community as {
-          _id: Types.ObjectId;
-          name: string;
-          image?: string;
-        };
-        communityInfo = {
-          id: c._id.toString(),
-          name: c.name,
-          image: c.image,
-        };
-      } else {
-        communityInfo = undefined;
-      }
+      // Create community info if available
+      const communityInfo: CommunityInfo | undefined = p.community ? {
+        id: p.community._id.toString(),
+        name: p.community.name,
+        image: p.community.image,
+      } : undefined;
 
-      const upvotes = p.upvotes ?? [];
-      const downvotes = p.downvotes ?? [];
-      const comments = p.comments ?? [];
+      const upvotes = p.upvotes || [];
+      const downvotes = p.downvotes || [];
+      const comments = p.comments || [];
+      const savedBy = p.savedBy || [];
 
       const isUpvoted = meId ? upvotes.some((u) => u.equals(meId)) : false;
       const isDownvoted = meId ? downvotes.some((d) => d.equals(meId)) : false;
+      const isSaved = meId ? savedBy.some((s) => s.equals(meId)) : false;
 
+      // Create post response object
       return {
         id: p._id.toString(),
         author: authorInfo,
-        content: p.content,
         community: communityInfo,
+        content: p.content,
+        mediaFiles: p.mediaFiles || [],
         upvoteCount: upvotes.length,
         downvoteCount: downvotes.length,
         voteCount: upvotes.length - downvotes.length,
         commentCount: comments.length,
+        savedCount: savedBy.length,
         isUpvoted,
         isDownvoted,
+        isSaved,
         createdAt: p.createdAt.toISOString(),
         updatedAt: p.updatedAt.toISOString(),
       };
     });
 
-    return NextResponse.json(
-        {
-          posts,
-          pagination: {
-            page,
-            limit,
-            totalPosts: total,
-            hasMore: total > skip + posts.length,
-          },
-        },
-        { status: 200 }
-    );
+    // Prepare the response
+    const response: PostPaginationResponse = {
+      posts,
+      pagination: {
+        page,
+        limit,
+        totalPosts: total,
+        hasMore: total > skip + posts.length,
+      },
+    };
+
+    return NextResponse.json(response, { status: 200 });
+
   } catch (error) {
-    console.error("[GET] Error fetching posts:", error);
+    console.error("[POSTS:GET] Unexpected error:", error);
     return NextResponse.json({ error: "Failed to fetch posts" }, { status: 500 });
   }
 }
 
+// ---------------- POST Handler ----------------
 export async function POST(req: NextRequest) {
   try {
-    console.log('[POST] Received post creation request');
+    console.log("[POSTS:POST] Creating a new post...");
 
     const { userId } = await auth();
     if (!userId) {
-      console.log('[POST] Unauthorized request - no userId');
       return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
     }
 
-    console.log('[POST] Connecting to database...');
     await dbConnect();
-    console.log('[POST] Connected to database');
 
-    const { content, communityId } = (await req.json()) as {
+    // Parse request body with proper typing
+    interface CreatePostRequest {
       content: string;
       communityId?: string;
-    };
+      mediaFiles?: string[];
+    }
 
-    console.log(`[POST] Received content (${content.length} chars)${communityId ? ` for community ${communityId}` : ''}`);
-
+    const { content, communityId, mediaFiles } = await req.json() as CreatePostRequest;
 
     if (!content.trim()) {
-      return NextResponse.json(
-          { error: "Post content is required" },
-          { status: 400 }
-      );
+      return NextResponse.json({ error: "Post content is required" }, { status: 400 });
     }
     if (content.length > 50000) {
-      return NextResponse.json(
-          { error: "Post too long; max 50000 chars" },
-          { status: 400 }
-      );
+      return NextResponse.json({ error: "Post too long. Maximum 50,000 characters allowed" }, { status: 400 });
     }
 
     const sanitized = content
@@ -242,63 +188,49 @@
         .replace(/on\w+="[^"]*"/g, "")
         .replace(/javascript:[^\s"']+/g, "");
 
-    console.log(`[POST] Looking for user with clerkId: ${userId}`);
     let user = await User.findOne({ clerkId: userId });
-
     if (!user) {
-      console.log(`[POST] User with clerkId ${userId} not found in database`);
-
-      // Create a new user if not found
-      console.log(`[POST] Attempting to create a new user for clerkId: ${userId}`);
-      try {
-        // This is a fallback mechanism - ideally the webhook should create the user
-        const newUser = await User.create({
-          clerkId: userId,
-          username: `user_${userId.slice(0, 8)}`,
-          name: `User ${userId.slice(0, 6)}`,
-          email: `user_${userId.slice(0, 8)}@example.com`,
-          following: [],
-          followers: [],
-          communities: []
-        });
+      user = await User.create({
+        clerkId: userId,
+        username: `user_${userId.slice(0, 8)}`,
+        name: `User ${userId.slice(0, 6)}`,
+        email: `user_${userId.slice(0, 8)}@example.com`,
+        following: [],
+        followers: [],
+        communities: [],
+      });
+    }
 
-        console.log(`[POST] Created new user with id: ${newUser._id}`);
-        user = newUser;
-      } catch (userCreateError) {
-        console.error('[POST] Failed to create user:', userCreateError);
-        return NextResponse.json({
-          error: "User not found and automatic creation failed",
-          details: userCreateError instanceof Error ? userCreateError.message : 'Unknown error'
-        }, { status: 404 });
+    // Handle media file extraction
+    const extractedMediaFiles = mediaFiles || [];
+    if (!extractedMediaFiles.length) {
+      const imgRegex = /<img[^>]+src="([^"]+)"/g;
+      let match;
+      while ((match = imgRegex.exec(sanitized)) !== null) {
+        extractedMediaFiles.push(match[1]);
       }
-    } else {
-      console.log(`[POST] Found user: ${user.username} (${user._id})`);
     }
 
     const newPost = await Post.create({
       author: user._id,
       content: sanitized,
+      mediaFiles: extractedMediaFiles,
+      community: communityId || undefined,
       upvotes: [],
       downvotes: [],
       comments: [],
-      community: communityId,
+      savedBy: [],
     });
 
     if (communityId) {
-      const com = await Community.findById(communityId);
-      if (!com) {
-        return NextResponse.json(
-            { error: "Community not found" },
-            { status: 404 }
-        );
+      const community = await Community.findById(communityId);
+      if (!community) {
+        return NextResponse.json({ error: "Community not found" }, { status: 404 });
       }
-      if (!com.members.some((m: Types.ObjectId) => m.equals(user._id))) {
-        return NextResponse.json(
-            { error: "Must join community first" },
-            { status: 403 }
-        );
+      if (!community.members.some((m: Types.ObjectId) => m.equals(user._id))) {
+        return NextResponse.json({ error: "Must join the community to post" }, { status: 403 });
       }
-      await com.updateOne({ $push: { posts: newPost._id } });
+      await community.updateOne({ $push: { posts: newPost._id } });
     }
 
     await newPost.populate("author", "username name image");
@@ -306,41 +238,36 @@
       await newPost.populate("community", "name image");
     }
 
-    return NextResponse.json(
-        {
-          post: {
-            id: newPost._id.toString(),
-            author: {
-              id: newPost.author._id.toString(),
-              username: newPost.author.username,
-              name: newPost.author.name,
-              image: newPost.author.image,
-            },
-            content: newPost.content,
-            community: newPost.community
-                ? {
-                  id: newPost.community._id.toString(),
-                  name: newPost.community.name,
-                  image: newPost.community.image,
-                }
-                : undefined,
-            upvoteCount: 0,
-            downvoteCount: 0,
-            voteCount: 0,
-            commentCount: 0,
-            isUpvoted: false,
-            isDownvoted: false,
-            createdAt: newPost.createdAt.toISOString(),
-            updatedAt: newPost.updatedAt.toISOString(),
-          },
-        },
-        { status: 201 }
-    );
+    return NextResponse.json({
+      post: {
+        id: newPost._id.toString(),
+        author: {
+          id: newPost.author._id.toString(),
+          username: newPost.author.username,
+          name: newPost.author.name,
+          image: newPost.author.image,
+        },
+        content: newPost.content,
+        mediaFiles: newPost.mediaFiles || [],
+        community: newPost.community ? {
+          id: newPost.community._id.toString(),
+          name: newPost.community.name,
+          image: newPost.community.image,
+        } : undefined,
+        upvoteCount: 0,
+        downvoteCount: 0,
+        voteCount: 0,
+        commentCount: 0,
+        savedCount: 0,
+        isUpvoted: false,
+        isDownvoted: false,
+        createdAt: newPost.createdAt.toISOString(),
+        updatedAt: newPost.updatedAt.toISOString(),
+      },
+    }, { status: 201 });
+
   } catch (error) {
-    console.error("[POST] Error creating post:", error);
-    return NextResponse.json({
-      error: "Failed to create post",
-      details: error instanceof Error ? error.message : 'Unknown error'
-    }, { status: 500 });
+    console.error("[POSTS:POST] Unexpected error:", error);
+    return NextResponse.json({ error: "Failed to create post" }, { status: 500 });
   }
 }
Index: src/models/Conversation.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/models/Conversation.ts b/src/models/Conversation.ts
new file mode 100644
--- /dev/null	(date 1747009943282)
+++ b/src/models/Conversation.ts	(date 1747009943282)
@@ -0,0 +1,88 @@
+import mongoose, { Document, Schema, Types } from 'mongoose';
+
+export interface IConversation extends Document {
+    participants: Types.ObjectId[];
+    lastMessage?: Types.ObjectId;
+    lastActivity: Date;
+    createdAt: Date;
+    updatedAt: Date;
+    
+    // Virtual fields
+    unreadCount?: number;
+}
+
+const ConversationSchema = new Schema<IConversation>(
+    {
+        participants: {
+            type: [Schema.Types.ObjectId],
+            ref: 'User',
+            required: true,
+            validate: {
+                validator: function(participants: Types.ObjectId[]) {
+                    // Ensure exactly 2 participants for direct messages
+                    return participants.length === 2;
+                },
+                message: 'A conversation must have exactly 2 participants'
+            }
+        },
+        lastMessage: {
+            type: Schema.Types.ObjectId,
+            ref: 'DirectMessage'
+        },
+        lastActivity: {
+            type: Date,
+            default: Date.now
+        }
+    },
+    {
+        timestamps: true,
+        toJSON: { virtuals: true },
+        toObject: { virtuals: true }
+    }
+);
+
+// Ensure unique conversations between the same two users
+ConversationSchema.index({ participants: 1 }, { unique: true });
+
+// Add virtual for unread count
+ConversationSchema.virtual('unreadCount').get(function() {
+    return this._unreadCount || 0;
+});
+
+ConversationSchema.set('toJSON', {
+    virtuals: true,
+    transform: function(doc, ret) {
+        ret.id = ret._id;
+        delete ret._id;
+        delete ret.__v;
+        return ret;
+    }
+});
+
+// Helper method to find or create a conversation between two users
+ConversationSchema.statics.findOrCreateConversation = async function(
+    userId1: Types.ObjectId | string,
+    userId2: Types.ObjectId | string
+): Promise<Document> {
+    // Convert string IDs to ObjectIds if needed
+    const id1 = typeof userId1 === 'string' ? new Types.ObjectId(userId1) : userId1;
+    const id2 = typeof userId2 === 'string' ? new Types.ObjectId(userId2) : userId2;
+    
+    // Try to find existing conversation
+    const existingConversation = await this.findOne({
+        participants: { $all: [id1, id2] }
+    });
+    
+    if (existingConversation) {
+        return existingConversation;
+    }
+    
+    // Create new conversation if none exists
+    return await this.create({
+        participants: [id1, id2],
+        lastActivity: new Date()
+    });
+};
+
+export default mongoose.models.Conversation || 
+    mongoose.model<IConversation>('Conversation', ConversationSchema);
Index: src/components/post-card.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"use client\";\r\n\r\nimport { useState } from \"react\";\r\nimport { ArrowUp, ArrowDown, MessageSquare, Bookmark, Share2 } from \"lucide-react\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Badge } from \"@/components/ui/badge\";\r\nimport { motion } from \"framer-motion\";\r\nimport { type Post } from \"@/context/PostContext\";\r\nimport Link from \"next/link\";\r\nimport Image from \"next/image\";\r\nimport { formatDistanceToNow } from \"date-fns\";\r\nimport DOMPurify from \"isomorphic-dompurify\";\r\n\r\ninterface PostCardProps {\r\n    post: Post;\r\n    onVote?: (postId: string, voteType: 'upvote' | 'downvote') => Promise<void>;\r\n}\r\n\r\nexport default function PostCard({ post, onVote }: PostCardProps) {\r\n    const [upvoteCount, setUpvoteCount] = useState(post.upvoteCount);\r\n    const [downvoteCount, setDownvoteCount] = useState(post.downvoteCount);\r\n    const [voteCount, setVoteCount] = useState(post.voteCount);\r\n    const [isUpvoted, setIsUpvoted] = useState(post.isUpvoted);\r\n    const [isDownvoted, setIsDownvoted] = useState(post.isDownvoted);\r\n    const [saved, setSaved] = useState(false);\r\n\r\n    const handleUpvote = async () => {\r\n        if (onVote) {\r\n            await onVote(post.id, 'upvote');\r\n        } else {\r\n            // Optimistic update if no onVote handler is provided\r\n            if (isUpvoted) {\r\n                setVoteCount(voteCount - 1);\r\n                setUpvoteCount(upvoteCount - 1);\r\n                setIsUpvoted(false);\r\n            } else {\r\n                setVoteCount(isDownvoted ? voteCount + 2 : voteCount + 1);\r\n                setUpvoteCount(upvoteCount + 1);\r\n                if (isDownvoted) {\r\n                    setDownvoteCount(downvoteCount - 1);\r\n                    setIsDownvoted(false);\r\n                }\r\n                setIsUpvoted(true);\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleDownvote = async () => {\r\n        if (onVote) {\r\n            await onVote(post.id, 'downvote');\r\n        } else {\r\n            // Optimistic update if no onVote handler is provided\r\n            if (isDownvoted) {\r\n                setVoteCount(voteCount + 1);\r\n                setDownvoteCount(downvoteCount - 1);\r\n                setIsDownvoted(false);\r\n            } else {\r\n                setVoteCount(isUpvoted ? voteCount - 2 : voteCount - 1);\r\n                setDownvoteCount(downvoteCount + 1);\r\n                if (isUpvoted) {\r\n                    setUpvoteCount(upvoteCount - 1);\r\n                    setIsUpvoted(false);\r\n                }\r\n                setIsDownvoted(true);\r\n            }\r\n        }\r\n    };\r\n\r\n    const toggleSave = () => {\r\n        setSaved(!saved);\r\n    };\r\n\r\n    return (\r\n        <motion.div\r\n            className=\"bg-white rounded-lg border border-gray-100 overflow-hidden transition-all duration-200 hover:shadow-md hover:border-gray-200\"\r\n            whileHover={{ y: -2 }}\r\n        >\r\n            <div className=\"p-4 md:p-5\">\r\n                <div className=\"flex items-center gap-2 mb-3\">\r\n                    <div className=\"flex items-center gap-2\">\r\n                        {post.author.image ? (\r\n                            <div className=\"relative h-8 w-8 rounded-full overflow-hidden\">\r\n                                <Image\r\n                                    src={post.author.image}\r\n                                    alt={post.author.name}\r\n                                    fill\r\n                                    className=\"object-cover\"\r\n                                />\r\n                            </div>\r\n                        ) : (\r\n                            <div className=\"h-8 w-8 rounded-full bg-gray-200 flex items-center justify-center\">\r\n                                <span className=\"text-xs font-medium text-gray-600\">\r\n                                    {post.author.name.charAt(0).toUpperCase()}\r\n                                </span>\r\n                            </div>\r\n                        )}\r\n                        <div>\r\n                            <Link href={`/profile/${post.author._id}`} className=\"text-sm font-medium text-gray-900 hover:text-[#00AEEF] transition-colors\">\r\n                                {post.author.name}\r\n                            </Link>\r\n                            <div className=\"flex items-center gap-2\">\r\n                                <span className=\"text-xs text-gray-500\">\r\n                                    {formatDistanceToNow(new Date(post.createdAt), { addSuffix: true })}\r\n                                </span>\r\n                                {post.community && (\r\n                                    <>\r\n                                        <span className=\"text-xs text-gray-500\">•</span>\r\n                                        <Link href={`/community/${post.community._id}`}>\r\n                                            <Badge variant=\"outline\" className=\"text-xs bg-blue-50 text-[#00AEEF] hover:bg-blue-100 border-blue-100\">\r\n                                                {post.community.name}\r\n                                            </Badge>\r\n                                        </Link>\r\n                                    </>\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n\r\n                <div\r\n                    className=\"text-gray-700 text-sm mb-4 post-content prose prose-sm max-w-none prose-headings:font-semibold prose-h3:text-lg prose-h4:text-base prose-p:mb-3 prose-ul:ml-6 prose-ol:ml-6 prose-li:mb-1 prose-strong:font-semibold prose-em:italic\"\r\n                    dangerouslySetInnerHTML={{ __html: DOMPurify.sanitize(post.content) }}\r\n                    aria-label=\"Post content\"\r\n                />\r\n\r\n                <div className=\"flex items-center justify-between\">\r\n                    <div className=\"flex items-center gap-4\">\r\n                        {/* Voting */}\r\n                        <div className=\"flex items-center gap-1\">\r\n                            <Button\r\n                                variant=\"ghost\"\r\n                                size=\"icon\"\r\n                                className={cn(\r\n                                    \"h-8 w-8 rounded-full hover:bg-blue-50\",\r\n                                    isUpvoted ? \"text-[#00AEEF]\" : \"text-gray-500 hover:text-[#00AEEF]\",\r\n                                )}\r\n                                onClick={handleUpvote}\r\n                            >\r\n                                <ArrowUp className=\"h-4 w-4\" />\r\n                                <span className=\"sr-only\">Upvote</span>\r\n                            </Button>\r\n\r\n                            <span\r\n                                className={cn(\r\n                                    \"text-sm font-medium\",\r\n                                    isUpvoted ? \"text-[#00AEEF]\" : isDownvoted ? \"text-red-500\" : \"text-gray-600\",\r\n                                )}\r\n                            >\r\n                {voteCount}\r\n              </span>\r\n\r\n                            <Button\r\n                                variant=\"ghost\"\r\n                                size=\"icon\"\r\n                                className={cn(\r\n                                    \"h-8 w-8 rounded-full hover:bg-blue-50\",\r\n                                    isDownvoted ? \"text-red-500\" : \"text-gray-500 hover:text-red-500\",\r\n                                )}\r\n                                onClick={handleDownvote}\r\n                            >\r\n                                <ArrowDown className=\"h-4 w-4\" />\r\n                                <span className=\"sr-only\">Downvote</span>\r\n                            </Button>\r\n                        </div>\r\n\r\n                        {/* Comments */}\r\n                        <Button variant=\"ghost\" size=\"sm\" className=\"h-8 gap-1 text-gray-500 hover:text-[#00AEEF] hover:bg-blue-50\">\r\n                            <MessageSquare className=\"h-4 w-4\" />\r\n                            <span className=\"text-xs\">{post.commentCount}</span>\r\n                        </Button>\r\n                    </div>\r\n\r\n                    <div className=\"flex items-center gap-1\">\r\n                        {/* Save */}\r\n                        <Button\r\n                            variant=\"ghost\"\r\n                            size=\"icon\"\r\n                            className={cn(\r\n                                \"h-8 w-8 rounded-full hover:bg-blue-50\",\r\n                                saved ? \"text-[#00AEEF]\" : \"text-gray-500 hover:text-[#00AEEF]\",\r\n                            )}\r\n                            onClick={toggleSave}\r\n                        >\r\n                            <Bookmark className=\"h-4 w-4\" fill={saved ? \"#00AEEF\" : \"none\"} />\r\n                            <span className=\"sr-only\">Save</span>\r\n                        </Button>\r\n\r\n                        {/* Share */}\r\n                        <Button\r\n                            variant=\"ghost\"\r\n                            size=\"icon\"\r\n                            className=\"h-8 w-8 rounded-full text-gray-500 hover:text-[#00AEEF] hover:bg-blue-50\"\r\n                        >\r\n                            <Share2 className=\"h-4 w-4\" />\r\n                            <span className=\"sr-only\">Share</span>\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </motion.div>\r\n    );\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/post-card.tsx b/src/components/post-card.tsx
--- a/src/components/post-card.tsx	(revision 4c74be27f19335e5b956190fea65a1f797f84875)
+++ b/src/components/post-card.tsx	(date 1747009941156)
@@ -1,7 +1,8 @@
 "use client";
 
-import { useState } from "react";
-import { ArrowUp, ArrowDown, MessageSquare, Bookmark, Share2 } from "lucide-react";
+import { useState, useRef, useCallback } from "react";
+import { usePosts } from "@/context/PostContext";
+import { ArrowUp, ArrowDown, MessageSquare, Bookmark, Share2, Check } from "lucide-react";
 import { cn } from "@/lib/utils";
 import { Button } from "@/components/ui/button";
 import { Badge } from "@/components/ui/badge";
@@ -10,66 +11,104 @@
 import Link from "next/link";
 import Image from "next/image";
 import { formatDistanceToNow } from "date-fns";
-import DOMPurify from "isomorphic-dompurify";
+import SanitizedHtml from "@/components/sanitized-html";
+import { toast } from "sonner";
+import CommentSection from "@/components/comment-section";
 
 interface PostCardProps {
     post: Post;
-    onVote?: (postId: string, voteType: 'upvote' | 'downvote') => Promise<void>;
+    onVote?: (postId: string, voteType: "upvote" | "downvote") => Promise<void>;
+    onSave?: (postId: string) => Promise<void>;
+    onUnsave?: (postId: string) => Promise<void>;
+    showUnsaveButton?: boolean;
 }
 
-export default function PostCard({ post, onVote }: PostCardProps) {
-    const [upvoteCount, setUpvoteCount] = useState(post.upvoteCount);
-    const [downvoteCount, setDownvoteCount] = useState(post.downvoteCount);
+// Convert event handlers to use the Action suffix for client components
+type VoteActionType = (postId: string, voteType: "upvote" | "downvote") => Promise<void>;
+type SaveActionType = (postId: string) => Promise<void>;
+type ShareActionType = () => Promise<void>;
+type ToggleCommentsActionType = () => void;
+
+export default function PostCard({ post, onVote, onSave, onUnsave, showUnsaveButton = false }: PostCardProps) {
     const [voteCount, setVoteCount] = useState(post.voteCount);
     const [isUpvoted, setIsUpvoted] = useState(post.isUpvoted);
     const [isDownvoted, setIsDownvoted] = useState(post.isDownvoted);
-    const [saved, setSaved] = useState(false);
+    const [isSaved, setIsSaved] = useState(post.isSaved || false);
+    const [isShareCopied, setIsShareCopied] = useState(false);
+    const [showComments, setShowComments] = useState(false);
+    const commentSectionRef = useRef<HTMLDivElement>(null);
 
-    const handleUpvote = async () => {
+    // Convert handlers to use the Action suffix for client components
+    const handleUpvoteAction = useCallback<VoteActionType>(async () => {
         if (onVote) {
-            await onVote(post.id, 'upvote');
+            await onVote(post.id, "upvote");
         } else {
-            // Optimistic update if no onVote handler is provided
             if (isUpvoted) {
-                setVoteCount(voteCount - 1);
-                setUpvoteCount(upvoteCount - 1);
+                setVoteCount((prev) => prev - 1);
                 setIsUpvoted(false);
             } else {
-                setVoteCount(isDownvoted ? voteCount + 2 : voteCount + 1);
-                setUpvoteCount(upvoteCount + 1);
-                if (isDownvoted) {
-                    setDownvoteCount(downvoteCount - 1);
-                    setIsDownvoted(false);
-                }
-                setIsUpvoted(true);
+                setVoteCount((prev) => prev + (isDownvoted ? 2 : 1));
+                setIsUpvoted(true);
+                setIsDownvoted(false);
             }
         }
-    };
+    }, [isDownvoted, isUpvoted, onVote, post.id]);
 
-    const handleDownvote = async () => {
+    const handleDownvoteAction = useCallback<VoteActionType>(async () => {
         if (onVote) {
-            await onVote(post.id, 'downvote');
+            await onVote(post.id, "downvote");
         } else {
-            // Optimistic update if no onVote handler is provided
             if (isDownvoted) {
-                setVoteCount(voteCount + 1);
-                setDownvoteCount(downvoteCount - 1);
+                setVoteCount((prev) => prev + 1);
                 setIsDownvoted(false);
             } else {
-                setVoteCount(isUpvoted ? voteCount - 2 : voteCount - 1);
-                setDownvoteCount(downvoteCount + 1);
-                if (isUpvoted) {
-                    setUpvoteCount(upvoteCount - 1);
-                    setIsUpvoted(false);
+                setVoteCount((prev) => prev - (isUpvoted ? 2 : 1));
+                setIsDownvoted(true);
+                setIsUpvoted(false);
+            }
+        }
+    }, [isDownvoted, isUpvoted, onVote, post.id]);
+
+    const toggleSaveAction = useCallback<SaveActionType>(async () => {
+        try {
+            if (showUnsaveButton && onUnsave) {
+                await onUnsave(post.id);
+            } else {
+                setIsSaved(!isSaved);
+                if (onSave) {
+                    await onSave(post.id);
                 }
-                setIsDownvoted(true);
             }
+            // eslint-disable-next-line @typescript-eslint/no-unused-vars
+        } catch (error) {
+            if (!showUnsaveButton) {
+                setIsSaved(!isSaved);
+            }
+            toast.error("Failed to save/unsave post");
         }
-    };
+    }, [isSaved, post.id, onSave, showUnsaveButton, onUnsave]);
+
+    const handleShareAction = useCallback<ShareActionType>(async () => {
+        try {
+            const postUrl = `${window.location.origin}/post/${post.id}`;
+            await navigator.clipboard.writeText(postUrl);
+            setIsShareCopied(true);
+            toast.success("Link copied to clipboard");
+
+            setTimeout(() => setIsShareCopied(false), 2000);
+        } catch {
+            toast.error("Failed to copy link");
+        }
+    }, [post.id]);
 
-    const toggleSave = () => {
-        setSaved(!saved);
-    };
+    const toggleCommentsAction = useCallback<ToggleCommentsActionType>(() => {
+        setShowComments(!showComments);
+        if (!showComments) {
+            setTimeout(() => {
+                commentSectionRef.current?.scrollIntoView({ behavior: "smooth" });
+            }, 100);
+        }
+    }, [showComments]);
 
     return (
         <motion.div
@@ -77,36 +116,32 @@
             whileHover={{ y: -2 }}
         >
             <div className="p-4 md:p-5">
+                {/* Author + Community */}
                 <div className="flex items-center gap-2 mb-3">
                     <div className="flex items-center gap-2">
                         {post.author.image ? (
                             <div className="relative h-8 w-8 rounded-full overflow-hidden">
-                                <Image
-                                    src={post.author.image}
-                                    alt={post.author.name}
-                                    fill
-                                    className="object-cover"
-                                />
+                                <Image src={post.author.image} alt={post.author.name} fill className="object-cover" />
                             </div>
                         ) : (
                             <div className="h-8 w-8 rounded-full bg-gray-200 flex items-center justify-center">
-                                <span className="text-xs font-medium text-gray-600">
-                                    {post.author.name.charAt(0).toUpperCase()}
-                                </span>
+                <span className="text-xs font-medium text-gray-600">
+                  {post.author.name.charAt(0).toUpperCase()}
+                </span>
                             </div>
                         )}
                         <div>
-                            <Link href={`/profile/${post.author._id}`} className="text-sm font-medium text-gray-900 hover:text-[#00AEEF] transition-colors">
+                            <Link href={`/profile/${post.author.id}`} className="text-sm font-medium text-gray-900 hover:text-[#00AEEF] transition-colors">
                                 {post.author.name}
                             </Link>
                             <div className="flex items-center gap-2">
-                                <span className="text-xs text-gray-500">
-                                    {formatDistanceToNow(new Date(post.createdAt), { addSuffix: true })}
-                                </span>
+                <span className="text-xs text-gray-500">
+                  {formatDistanceToNow(new Date(post.createdAt), { addSuffix: true })}
+                </span>
                                 {post.community && (
                                     <>
                                         <span className="text-xs text-gray-500">•</span>
-                                        <Link href={`/community/${post.community._id}`}>
+                                        <Link href={`/communities/${post.community.id}`}>
                                             <Badge variant="outline" className="text-xs bg-blue-50 text-[#00AEEF] hover:bg-blue-100 border-blue-100">
                                                 {post.community.name}
                                             </Badge>
@@ -118,14 +153,50 @@
                     </div>
                 </div>
 
-
-
-                <div
+                {/* Post Content */}
+                <SanitizedHtml
+                    content={post.content}
                     className="text-gray-700 text-sm mb-4 post-content prose prose-sm max-w-none prose-headings:font-semibold prose-h3:text-lg prose-h4:text-base prose-p:mb-3 prose-ul:ml-6 prose-ol:ml-6 prose-li:mb-1 prose-strong:font-semibold prose-em:italic"
-                    dangerouslySetInnerHTML={{ __html: DOMPurify.sanitize(post.content) }}
-                    aria-label="Post content"
                 />
 
+                {/* Post Media */}
+                {post.mediaFiles && post.mediaFiles.length > 0 && (
+                    <div className="mb-4 overflow-hidden rounded-md">
+                        {post.mediaFiles.length === 1 ? (
+                            <div className="relative rounded-md overflow-hidden">
+                                {post.mediaFiles[0].endsWith(".mp4") ? (
+                                    <video
+                                        src={post.mediaFiles[0]}
+                                        controls
+                                        className="w-full max-h-[500px] object-contain"
+                                    />
+                                ) : (
+                                    <Image
+                                        src={post.mediaFiles[0]}
+                                        alt="Post media"
+                                        width={600}
+                                        height={400}
+                                        className="w-full max-h-[500px] object-contain"
+                                    />
+                                )}
+                            </div>
+                        ) : (
+                            <div className="grid grid-cols-2 gap-1">
+                                {post.mediaFiles.slice(0, 4).map((media, idx) => (
+                                    <div key={idx} className="relative aspect-square overflow-hidden rounded-md">
+                                        {media.endsWith(".mp4") ? (
+                                            <video src={media} controls className="w-full h-full object-cover" />
+                                        ) : (
+                                            <Image src={media} alt={`Media ${idx + 1}`} fill className="object-cover" />
+                                        )}
+                                    </div>
+                                ))}
+                            </div>
+                        )}
+                    </div>
+                )}
+
+                {/* Action Buttons */}
                 <div className="flex items-center justify-between">
                     <div className="flex items-center gap-4">
                         {/* Voting */}
@@ -133,72 +204,71 @@
                             <Button
                                 variant="ghost"
                                 size="icon"
-                                className={cn(
-                                    "h-8 w-8 rounded-full hover:bg-blue-50",
-                                    isUpvoted ? "text-[#00AEEF]" : "text-gray-500 hover:text-[#00AEEF]",
-                                )}
-                                onClick={handleUpvote}
+                                className={cn("h-8 w-8 rounded-full hover:bg-blue-50", isUpvoted ? "text-[#00AEEF]" : "text-gray-500 hover:text-[#00AEEF]")}
+                                onClick={() => handleUpvoteAction(post.id, "upvote")}
                             >
                                 <ArrowUp className="h-4 w-4" />
-                                <span className="sr-only">Upvote</span>
                             </Button>
 
-                            <span
-                                className={cn(
-                                    "text-sm font-medium",
-                                    isUpvoted ? "text-[#00AEEF]" : isDownvoted ? "text-red-500" : "text-gray-600",
-                                )}
-                            >
+                            <span className={cn("text-sm font-medium", isUpvoted ? "text-[#00AEEF]" : isDownvoted ? "text-red-500" : "text-gray-600")}>
                 {voteCount}
               </span>
 
                             <Button
                                 variant="ghost"
                                 size="icon"
-                                className={cn(
-                                    "h-8 w-8 rounded-full hover:bg-blue-50",
-                                    isDownvoted ? "text-red-500" : "text-gray-500 hover:text-red-500",
-                                )}
-                                onClick={handleDownvote}
+                                className={cn("h-8 w-8 rounded-full hover:bg-blue-50", isDownvoted ? "text-red-500" : "text-gray-500 hover:text-red-500")}
+                                onClick={() => handleDownvoteAction(post.id, "downvote")}
                             >
                                 <ArrowDown className="h-4 w-4" />
-                                <span className="sr-only">Downvote</span>
                             </Button>
                         </div>
 
                         {/* Comments */}
-                        <Button variant="ghost" size="sm" className="h-8 gap-1 text-gray-500 hover:text-[#00AEEF] hover:bg-blue-50">
+                        <Button
+                            variant="ghost"
+                            size="sm"
+                            className={cn("h-8 gap-1 hover:bg-blue-50", showComments ? "text-[#00AEEF]" : "text-gray-500 hover:text-[#00AEEF]")}
+                            onClick={toggleCommentsAction}
+                        >
                             <MessageSquare className="h-4 w-4" />
                             <span className="text-xs">{post.commentCount}</span>
                         </Button>
                     </div>
 
+                    {/* Save / Share */}
                     <div className="flex items-center gap-1">
-                        {/* Save */}
                         <Button
                             variant="ghost"
-                            size="icon"
-                            className={cn(
-                                "h-8 w-8 rounded-full hover:bg-blue-50",
-                                saved ? "text-[#00AEEF]" : "text-gray-500 hover:text-[#00AEEF]",
-                            )}
-                            onClick={toggleSave}
+                            size="sm"
+                            className={cn("h-8 gap-1 hover:bg-blue-50", isSaved || showUnsaveButton ? "text-[#00AEEF]" : "text-gray-500 hover:text-[#00AEEF]")}
+                            onClick={() => toggleSaveAction(post.id)}
                         >
-                            <Bookmark className="h-4 w-4" fill={saved ? "#00AEEF" : "none"} />
-                            <span className="sr-only">Save</span>
+                            <Bookmark className="h-4 w-4" fill={isSaved || showUnsaveButton ? "#00AEEF" : "none"} />
+                            <span className="text-xs">{showUnsaveButton ? "Remove" : isSaved ? "Saved" : "Save"}</span>
                         </Button>
 
-                        {/* Share */}
                         <Button
                             variant="ghost"
                             size="icon"
                             className="h-8 w-8 rounded-full text-gray-500 hover:text-[#00AEEF] hover:bg-blue-50"
+                            onClick={() => handleShareAction()}
                         >
-                            <Share2 className="h-4 w-4" />
-                            <span className="sr-only">Share</span>
+                            {isShareCopied ? (
+                                <Check className="h-4 w-4 text-green-500" />
+                            ) : (
+                                <Share2 className="h-4 w-4" />
+                            )}
                         </Button>
                     </div>
                 </div>
+
+                {/* Comment Section */}
+                {showComments && (
+                    <div ref={commentSectionRef} className="mt-4 border-t border-gray-100 pt-4">
+                        <CommentSection postId={post.id} initialCommentCount={post.commentCount} />
+                    </div>
+                )}
             </div>
         </motion.div>
     );
Index: src/app/api/conversations/[conversationId]/messages/route.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/app/api/conversations/[conversationId]/messages/route.ts b/src/app/api/conversations/[conversationId]/messages/route.ts
new file mode 100644
--- /dev/null	(date 1747009943392)
+++ b/src/app/api/conversations/[conversationId]/messages/route.ts	(date 1747009943392)
@@ -0,0 +1,278 @@
+import { NextRequest, NextResponse } from 'next/server';
+import { auth } from '@clerk/nextjs/server';
+import connectToDatabase from '@/lib/dbConnect';
+import User from '@/models/User';
+import Conversation from '@/models/Conversation';
+import DirectMessage from '@/models/DirectMessage';
+import { z } from 'zod';
+import { Types } from 'mongoose';
+
+// Validation schemas
+const ParamsSchema = z.object({
+  conversationId: z.string().min(1)
+});
+
+const PaginationSchema = z.object({
+  limit: z.coerce.number().int().min(1).max(100).default(50),
+  before: z.string().optional(),
+  after: z.string().optional(),
+});
+
+const CreateMessageSchema = z.object({
+  content: z.string().min(1).max(4000),
+  attachments: z.array(z.string()).optional(),
+});
+
+/**
+ * GET /api/conversations/[conversationId]/messages - Get messages in a conversation
+ */
+export async function GET(
+  req: NextRequest,
+  { params }: { params: { conversationId: string } }
+) {
+  try {
+    // Authenticate user
+    const { userId } = await auth();
+    if (!userId) {
+      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
+    }
+
+    // Validate parameters
+    const validatedParams = ParamsSchema.safeParse(params);
+    if (!validatedParams.success) {
+      return NextResponse.json({ 
+        error: 'Invalid parameters',
+        details: validatedParams.error.format()
+      }, { status: 400 });
+    }
+
+    const { conversationId } = validatedParams.data;
+
+    // Validate ObjectId
+    if (!Types.ObjectId.isValid(conversationId)) {
+      return NextResponse.json({ error: 'Invalid conversation ID format' }, { status: 400 });
+    }
+
+    // Validate query parameters
+    const url = new URL(req.url);
+    const queryParams = {
+      limit: url.searchParams.get('limit') ? Number(url.searchParams.get('limit')) : undefined,
+      before: url.searchParams.get('before') || undefined,
+      after: url.searchParams.get('after') || undefined,
+    };
+
+    const validatedQuery = PaginationSchema.safeParse(queryParams);
+    if (!validatedQuery.success) {
+      return NextResponse.json({ 
+        error: 'Invalid query parameters',
+        details: validatedQuery.error.format()
+      }, { status: 400 });
+    }
+
+    const { limit, before, after } = validatedQuery.data;
+
+    await connectToDatabase();
+
+    // Find user
+    const user = await User.findOne({ clerkId: userId });
+    if (!user) {
+      return NextResponse.json({ error: 'User not found' }, { status: 404 });
+    }
+
+    // Find conversation and ensure user is a participant
+    const conversation = await Conversation.findOne({
+      _id: conversationId,
+      participants: user._id
+    });
+
+    if (!conversation) {
+      return NextResponse.json({ error: 'Conversation not found' }, { status: 404 });
+    }
+
+    // Build query
+    const createdAtFilter: any = {};
+    if (before) createdAtFilter.$lt = new Date(before);
+    if (after) createdAtFilter.$gt = new Date(after);
+    
+    const query: any = { conversation: conversationId };
+    if (before || after) query.createdAt = createdAtFilter;
+
+    // Fetch messages
+    const messages = await DirectMessage.find(query)
+      .sort({ createdAt: before ? -1 : 1 })
+      .limit(limit)
+      .populate('sender', 'username name image')
+      .lean();
+
+    // Mark messages as read if user is the recipient
+    const messagesToMarkAsRead = messages.filter(
+      (msg) => !msg.isRead && msg.recipient.toString() === user._id.toString()
+    );
+
+    if (messagesToMarkAsRead.length > 0) {
+      await DirectMessage.updateMany(
+        { 
+          _id: { $in: messagesToMarkAsRead.map(msg => msg._id) },
+          recipient: user._id,
+          isRead: false
+        },
+        { isRead: true }
+      );
+    }
+
+    // Format messages
+    const formattedMessages = messages.map(message => ({
+      id: message._id.toString(),
+      content: message.content,
+      sender: {
+        id: message.sender._id.toString(),
+        username: message.sender.username,
+        name: message.sender.name,
+        image: message.sender.image
+      },
+      isRead: message.isRead,
+      isEdited: message.isEdited,
+      attachments: message.attachments || [],
+      reactions: message.reactions.map(reaction => ({
+        emoji: reaction.emoji,
+        count: reaction.users.length,
+        hasReacted: reaction.users.some(u => u.toString() === user._id.toString())
+      })),
+      createdAt: message.createdAt.toISOString(),
+      updatedAt: message.updatedAt.toISOString()
+    }));
+
+    // Determine if there are more messages
+    const hasMore = formattedMessages.length === limit;
+    
+    // Get next cursor
+    const nextCursor = hasMore && formattedMessages.length > 0
+      ? formattedMessages[formattedMessages.length - 1].createdAt
+      : null;
+
+    return NextResponse.json({
+      messages: formattedMessages,
+      pagination: {
+        hasMore,
+        nextCursor
+      }
+    }, { status: 200 });
+  } catch (error) {
+    console.error('[GET MESSAGES]', error);
+    return NextResponse.json({ error: 'Failed to fetch messages' }, { status: 500 });
+  }
+}
+
+/**
+ * POST /api/conversations/[conversationId]/messages - Send a message in a conversation
+ */
+export async function POST(
+  req: NextRequest,
+  { params }: { params: { conversationId: string } }
+) {
+  try {
+    // Authenticate user
+    const { userId } = await auth();
+    if (!userId) {
+      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
+    }
+
+    // Validate parameters
+    const validatedParams = ParamsSchema.safeParse(params);
+    if (!validatedParams.success) {
+      return NextResponse.json({ 
+        error: 'Invalid parameters',
+        details: validatedParams.error.format()
+      }, { status: 400 });
+    }
+
+    const { conversationId } = validatedParams.data;
+
+    // Validate ObjectId
+    if (!Types.ObjectId.isValid(conversationId)) {
+      return NextResponse.json({ error: 'Invalid conversation ID format' }, { status: 400 });
+    }
+
+    // Validate request body
+    const body = await req.json();
+    const validatedBody = CreateMessageSchema.safeParse(body);
+    if (!validatedBody.success) {
+      return NextResponse.json({ 
+        error: 'Invalid request body',
+        details: validatedBody.error.format()
+      }, { status: 400 });
+    }
+
+    const { content, attachments = [] } = validatedBody.data;
+
+    await connectToDatabase();
+
+    // Find user
+    const user = await User.findOne({ clerkId: userId });
+    if (!user) {
+      return NextResponse.json({ error: 'User not found' }, { status: 404 });
+    }
+
+    // Find conversation and ensure user is a participant
+    const conversation = await Conversation.findOne({
+      _id: conversationId,
+      participants: user._id
+    });
+
+    if (!conversation) {
+      return NextResponse.json({ error: 'Conversation not found' }, { status: 404 });
+    }
+
+    // Find the recipient (the other participant)
+    const recipient = conversation.participants.find(
+      p => !p.equals(user._id)
+    );
+
+    if (!recipient) {
+      return NextResponse.json({ error: 'Recipient not found' }, { status: 404 });
+    }
+
+    // Create message
+    const message = await DirectMessage.create({
+      content,
+      sender: user._id,
+      recipient,
+      conversation: conversationId,
+      attachments,
+      isRead: false
+    });
+
+    // Update conversation's last message and activity
+    conversation.lastMessage = message._id;
+    conversation.lastActivity = new Date();
+    await conversation.save();
+
+    // Populate sender for response
+    await message.populate('sender', 'username name image');
+
+    // Format response
+    const formattedMessage = {
+      id: message._id.toString(),
+      content: message.content,
+      sender: {
+        id: message.sender._id.toString(),
+        username: message.sender.username,
+        name: message.sender.name,
+        image: message.sender.image
+      },
+      isRead: message.isRead,
+      isEdited: message.isEdited,
+      attachments: message.attachments,
+      reactions: [],
+      createdAt: message.createdAt.toISOString(),
+      updatedAt: message.updatedAt.toISOString()
+    };
+
+    return NextResponse.json({
+      message: formattedMessage
+    }, { status: 201 });
+  } catch (error) {
+    console.error('[SEND MESSAGE]', error);
+    return NextResponse.json({ error: 'Failed to send message' }, { status: 500 });
+  }
+}
Index: src/app/api/conversations/[conversationId]/route.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/app/api/conversations/[conversationId]/route.ts b/src/app/api/conversations/[conversationId]/route.ts
new file mode 100644
--- /dev/null	(date 1747009943364)
+++ b/src/app/api/conversations/[conversationId]/route.ts	(date 1747009943364)
@@ -0,0 +1,168 @@
+import { NextRequest, NextResponse } from 'next/server';
+import { auth } from '@clerk/nextjs/server';
+import connectToDatabase from '@/lib/dbConnect';
+import User from '@/models/User';
+import Conversation from '@/models/Conversation';
+import DirectMessage from '@/models/DirectMessage';
+import { z } from 'zod';
+import { Types } from 'mongoose';
+
+// Validation schemas
+const ParamsSchema = z.object({
+  conversationId: z.string().min(1)
+});
+
+/**
+ * GET /api/conversations/[conversationId] - Get a specific conversation
+ */
+export async function GET(
+  req: NextRequest,
+  { params }: { params: { conversationId: string } }
+) {
+  try {
+    // Authenticate user
+    const { userId } = await auth();
+    if (!userId) {
+      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
+    }
+
+    // Validate parameters
+    const validatedParams = ParamsSchema.safeParse(params);
+    if (!validatedParams.success) {
+      return NextResponse.json({ 
+        error: 'Invalid parameters',
+        details: validatedParams.error.format()
+      }, { status: 400 });
+    }
+
+    const { conversationId } = validatedParams.data;
+
+    // Validate ObjectId
+    if (!Types.ObjectId.isValid(conversationId)) {
+      return NextResponse.json({ error: 'Invalid conversation ID format' }, { status: 400 });
+    }
+
+    await connectToDatabase();
+
+    // Find user
+    const user = await User.findOne({ clerkId: userId });
+    if (!user) {
+      return NextResponse.json({ error: 'User not found' }, { status: 404 });
+    }
+
+    // Find conversation and ensure user is a participant
+    const conversation = await Conversation.findOne({
+      _id: conversationId,
+      participants: user._id
+    })
+      .populate({
+        path: 'participants',
+        match: { _id: { $ne: user._id } }, // Only populate the other participant
+        select: 'username name image'
+      })
+      .populate('lastMessage', 'content createdAt isRead')
+      .lean();
+
+    if (!conversation) {
+      return NextResponse.json({ error: 'Conversation not found' }, { status: 404 });
+    }
+
+    // Get unread count
+    const unreadCount = await DirectMessage.countDocuments({
+      conversation: conversation._id,
+      recipient: user._id,
+      isRead: false
+    });
+
+    // Format response
+    const formattedConversation = {
+      id: conversation._id.toString(),
+      participant: conversation.participants[0] ? {
+        id: conversation.participants[0]._id.toString(),
+        username: conversation.participants[0].username,
+        name: conversation.participants[0].name,
+        image: conversation.participants[0].image
+      } : null,
+      lastMessage: conversation.lastMessage ? {
+        id: conversation.lastMessage._id.toString(),
+        content: conversation.lastMessage.content,
+        createdAt: conversation.lastMessage.createdAt,
+        isRead: conversation.lastMessage.isRead
+      } : null,
+      lastActivity: conversation.lastActivity,
+      createdAt: conversation.createdAt,
+      unreadCount
+    };
+
+    return NextResponse.json({
+      conversation: formattedConversation
+    }, { status: 200 });
+  } catch (error) {
+    console.error('[GET CONVERSATION]', error);
+    return NextResponse.json({ error: 'Failed to fetch conversation' }, { status: 500 });
+  }
+}
+
+/**
+ * DELETE /api/conversations/[conversationId] - Delete a conversation
+ */
+export async function DELETE(
+  req: NextRequest,
+  { params }: { params: { conversationId: string } }
+) {
+  try {
+    // Authenticate user
+    const { userId } = await auth();
+    if (!userId) {
+      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
+    }
+
+    // Validate parameters
+    const validatedParams = ParamsSchema.safeParse(params);
+    if (!validatedParams.success) {
+      return NextResponse.json({ 
+        error: 'Invalid parameters',
+        details: validatedParams.error.format()
+      }, { status: 400 });
+    }
+
+    const { conversationId } = validatedParams.data;
+
+    // Validate ObjectId
+    if (!Types.ObjectId.isValid(conversationId)) {
+      return NextResponse.json({ error: 'Invalid conversation ID format' }, { status: 400 });
+    }
+
+    await connectToDatabase();
+
+    // Find user
+    const user = await User.findOne({ clerkId: userId });
+    if (!user) {
+      return NextResponse.json({ error: 'User not found' }, { status: 404 });
+    }
+
+    // Find conversation and ensure user is a participant
+    const conversation = await Conversation.findOne({
+      _id: conversationId,
+      participants: user._id
+    });
+
+    if (!conversation) {
+      return NextResponse.json({ error: 'Conversation not found' }, { status: 404 });
+    }
+
+    // Delete all messages in the conversation
+    await DirectMessage.deleteMany({ conversation: conversationId });
+
+    // Delete the conversation
+    await Conversation.findByIdAndDelete(conversationId);
+
+    return NextResponse.json({
+      success: true,
+      message: 'Conversation deleted'
+    }, { status: 200 });
+  } catch (error) {
+    console.error('[DELETE CONVERSATION]', error);
+    return NextResponse.json({ error: 'Failed to delete conversation' }, { status: 500 });
+  }
+}
Index: src/app/api/users/me/account/route.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/app/api/users/me/account/route.ts b/src/app/api/users/me/account/route.ts
new file mode 100644
--- /dev/null	(date 1747009943444)
+++ b/src/app/api/users/me/account/route.ts	(date 1747009943444)
@@ -0,0 +1,66 @@
+import { NextRequest, NextResponse } from "next/server";
+import { auth } from "@clerk/nextjs/server";
+import dbConnect from "@/lib/dbConnect";
+import User from "@/models/User";
+
+interface UserAccountResponse {
+  id: string;
+  email: string;
+  emailVerified: boolean;
+  createdAt: string;
+}
+
+export async function GET(_req: NextRequest) {
+  try {
+    // Get the current user's ID from Clerk
+    const { userId: clerkId } = await auth();
+
+    if (!clerkId) {
+      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
+    }
+
+    // Connect to the database
+    await dbConnect();
+
+    // Find the user in MongoDB
+    const userDoc = await User.findOne({ clerkId }).lean();
+
+    if (!userDoc) {
+      return NextResponse.json({ error: "User not found" }, { status: 404 });
+    }
+
+    // Get user details from Clerk
+    const clerkResponse = await fetch(`https://api.clerk.dev/v1/users/${clerkId}`, {
+      headers: {
+        Authorization: `Bearer ${process.env.CLERK_SECRET_KEY}`,
+        "Content-Type": "application/json",
+      },
+    });
+
+    if (!clerkResponse.ok) {
+      console.error("[GET /api/users/me/account] Clerk API error:", await clerkResponse.text());
+      return NextResponse.json(
+        { error: "Failed to fetch user details from authentication service" },
+        { status: 500 }
+      );
+    }
+
+    const clerkUser = await clerkResponse.json();
+
+    // Format the response
+    const account: UserAccountResponse = {
+      id: userDoc._id.toString(),
+      email: userDoc.email,
+      emailVerified: clerkUser.email_addresses[0]?.verification?.status === "verified",
+      createdAt: userDoc.createdAt.toISOString(),
+    };
+
+    return NextResponse.json(account);
+  } catch (error) {
+    console.error("[GET /api/users/me/account] Error:", error);
+    return NextResponse.json(
+      { error: "Failed to fetch user account" },
+      { status: 500 }
+    );
+  }
+}
Index: src/app/api/conversations/[conversationId]/messages/[messageId]/route.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/app/api/conversations/[conversationId]/messages/[messageId]/route.ts b/src/app/api/conversations/[conversationId]/messages/[messageId]/route.ts
new file mode 100644
--- /dev/null	(date 1747009943422)
+++ b/src/app/api/conversations/[conversationId]/messages/[messageId]/route.ts	(date 1747009943422)
@@ -0,0 +1,292 @@
+import { NextRequest, NextResponse } from 'next/server';
+import { auth } from '@clerk/nextjs/server';
+import connectToDatabase from '@/lib/dbConnect';
+import User from '@/models/User';
+import Conversation from '@/models/Conversation';
+import DirectMessage from '@/models/DirectMessage';
+import { z } from 'zod';
+import { Types } from 'mongoose';
+
+// Validation schemas
+const ParamsSchema = z.object({
+  conversationId: z.string().min(1),
+  messageId: z.string().min(1)
+});
+
+const UpdateMessageSchema = z.object({
+  content: z.string().min(1).max(4000)
+});
+
+const ReactionSchema = z.object({
+  emoji: z.string().min(1).max(10)
+});
+
+/**
+ * GET /api/conversations/[conversationId]/messages/[messageId] - Get a specific message
+ */
+export async function GET(
+  req: NextRequest,
+  { params }: { params: { conversationId: string; messageId: string } }
+) {
+  try {
+    // Authenticate user
+    const { userId } = await auth();
+    if (!userId) {
+      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
+    }
+
+    // Validate parameters
+    const validatedParams = ParamsSchema.safeParse(params);
+    if (!validatedParams.success) {
+      return NextResponse.json({ 
+        error: 'Invalid parameters',
+        details: validatedParams.error.format()
+      }, { status: 400 });
+    }
+
+    const { conversationId, messageId } = validatedParams.data;
+
+    // Validate ObjectIds
+    if (!Types.ObjectId.isValid(conversationId) || !Types.ObjectId.isValid(messageId)) {
+      return NextResponse.json({ error: 'Invalid ID format' }, { status: 400 });
+    }
+
+    await connectToDatabase();
+
+    // Find user
+    const user = await User.findOne({ clerkId: userId });
+    if (!user) {
+      return NextResponse.json({ error: 'User not found' }, { status: 404 });
+    }
+
+    // Find conversation and ensure user is a participant
+    const conversation = await Conversation.findOne({
+      _id: conversationId,
+      participants: user._id
+    });
+
+    if (!conversation) {
+      return NextResponse.json({ error: 'Conversation not found' }, { status: 404 });
+    }
+
+    // Find message
+    const message = await DirectMessage.findOne({
+      _id: messageId,
+      conversation: conversationId
+    })
+      .populate('sender', 'username name image')
+      .lean();
+
+    if (!message) {
+      return NextResponse.json({ error: 'Message not found' }, { status: 404 });
+    }
+
+    // Mark as read if user is recipient and message is unread
+    if (message.recipient.toString() === user._id.toString() && !message.isRead) {
+      await DirectMessage.findByIdAndUpdate(messageId, { isRead: true });
+      message.isRead = true;
+    }
+
+    // Format response
+    const formattedMessage = {
+      id: message._id.toString(),
+      content: message.content,
+      sender: {
+        id: message.sender._id.toString(),
+        username: message.sender.username,
+        name: message.sender.name,
+        image: message.sender.image
+      },
+      isRead: message.isRead,
+      isEdited: message.isEdited,
+      attachments: message.attachments || [],
+      reactions: message.reactions.map(reaction => ({
+        emoji: reaction.emoji,
+        count: reaction.users.length,
+        hasReacted: reaction.users.some(u => u.toString() === user._id.toString())
+      })),
+      createdAt: message.createdAt.toISOString(),
+      updatedAt: message.updatedAt.toISOString()
+    };
+
+    return NextResponse.json({
+      message: formattedMessage
+    }, { status: 200 });
+  } catch (error) {
+    console.error('[GET MESSAGE]', error);
+    return NextResponse.json({ error: 'Failed to fetch message' }, { status: 500 });
+  }
+}
+
+/**
+ * PATCH /api/conversations/[conversationId]/messages/[messageId] - Update a message
+ */
+export async function PATCH(
+  req: NextRequest,
+  { params }: { params: { conversationId: string; messageId: string } }
+) {
+  try {
+    // Authenticate user
+    const { userId } = await auth();
+    if (!userId) {
+      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
+    }
+
+    // Validate parameters
+    const validatedParams = ParamsSchema.safeParse(params);
+    if (!validatedParams.success) {
+      return NextResponse.json({ 
+        error: 'Invalid parameters',
+        details: validatedParams.error.format()
+      }, { status: 400 });
+    }
+
+    const { conversationId, messageId } = validatedParams.data;
+
+    // Validate ObjectIds
+    if (!Types.ObjectId.isValid(conversationId) || !Types.ObjectId.isValid(messageId)) {
+      return NextResponse.json({ error: 'Invalid ID format' }, { status: 400 });
+    }
+
+    // Validate request body
+    const body = await req.json();
+    const validatedBody = UpdateMessageSchema.safeParse(body);
+    if (!validatedBody.success) {
+      return NextResponse.json({ 
+        error: 'Invalid request body',
+        details: validatedBody.error.format()
+      }, { status: 400 });
+    }
+
+    const { content } = validatedBody.data;
+
+    await connectToDatabase();
+
+    // Find user
+    const user = await User.findOne({ clerkId: userId });
+    if (!user) {
+      return NextResponse.json({ error: 'User not found' }, { status: 404 });
+    }
+
+    // Find message
+    const message = await DirectMessage.findById(messageId)
+      .populate('sender', 'username name image');
+
+    if (!message) {
+      return NextResponse.json({ error: 'Message not found' }, { status: 404 });
+    }
+
+    // Ensure user is the sender
+    if (message.sender._id.toString() !== user._id.toString()) {
+      return NextResponse.json({ error: 'Not authorized to edit this message' }, { status: 403 });
+    }
+
+    // Update message
+    message.content = content;
+    message.isEdited = true;
+    await message.save();
+
+    // Format response
+    const formattedMessage = {
+      id: message._id.toString(),
+      content: message.content,
+      sender: {
+        id: message.sender._id.toString(),
+        username: message.sender.username,
+        name: message.sender.name,
+        image: message.sender.image
+      },
+      isRead: message.isRead,
+      isEdited: message.isEdited,
+      attachments: message.attachments,
+      reactions: message.reactions.map(reaction => ({
+        emoji: reaction.emoji,
+        count: reaction.users.length,
+        hasReacted: reaction.users.some(u => u.equals(user._id))
+      })),
+      createdAt: message.createdAt.toISOString(),
+      updatedAt: message.updatedAt.toISOString()
+    };
+
+    return NextResponse.json({
+      message: formattedMessage
+    }, { status: 200 });
+  } catch (error) {
+    console.error('[UPDATE MESSAGE]', error);
+    return NextResponse.json({ error: 'Failed to update message' }, { status: 500 });
+  }
+}
+
+/**
+ * DELETE /api/conversations/[conversationId]/messages/[messageId] - Delete a message
+ */
+export async function DELETE(
+  req: NextRequest,
+  { params }: { params: { conversationId: string; messageId: string } }
+) {
+  try {
+    // Authenticate user
+    const { userId } = await auth();
+    if (!userId) {
+      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
+    }
+
+    // Validate parameters
+    const validatedParams = ParamsSchema.safeParse(params);
+    if (!validatedParams.success) {
+      return NextResponse.json({ 
+        error: 'Invalid parameters',
+        details: validatedParams.error.format()
+      }, { status: 400 });
+    }
+
+    const { conversationId, messageId } = validatedParams.data;
+
+    // Validate ObjectIds
+    if (!Types.ObjectId.isValid(conversationId) || !Types.ObjectId.isValid(messageId)) {
+      return NextResponse.json({ error: 'Invalid ID format' }, { status: 400 });
+    }
+
+    await connectToDatabase();
+
+    // Find user
+    const user = await User.findOne({ clerkId: userId });
+    if (!user) {
+      return NextResponse.json({ error: 'User not found' }, { status: 404 });
+    }
+
+    // Find message
+    const message = await DirectMessage.findById(messageId);
+    if (!message) {
+      return NextResponse.json({ error: 'Message not found' }, { status: 404 });
+    }
+
+    // Ensure user is the sender
+    if (message.sender.toString() !== user._id.toString()) {
+      return NextResponse.json({ error: 'Not authorized to delete this message' }, { status: 403 });
+    }
+
+    // Delete message
+    await DirectMessage.findByIdAndDelete(messageId);
+
+    // Update conversation's last message if needed
+    const conversation = await Conversation.findById(conversationId);
+    if (conversation && conversation.lastMessage?.toString() === messageId) {
+      // Find the new last message
+      const newLastMessage = await DirectMessage.findOne({ conversation: conversationId })
+        .sort({ createdAt: -1 })
+        .limit(1);
+
+      conversation.lastMessage = newLastMessage ? newLastMessage._id : undefined;
+      await conversation.save();
+    }
+
+    return NextResponse.json({
+      success: true,
+      message: 'Message deleted'
+    }, { status: 200 });
+  } catch (error) {
+    console.error('[DELETE MESSAGE]', error);
+    return NextResponse.json({ error: 'Failed to delete message' }, { status: 500 });
+  }
+}
Index: src/app/api/conversations/[conversationId]/read/route.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/app/api/conversations/[conversationId]/read/route.ts b/src/app/api/conversations/[conversationId]/read/route.ts
new file mode 100644
--- /dev/null	(date 1747009943516)
+++ b/src/app/api/conversations/[conversationId]/read/route.ts	(date 1747009943516)
@@ -0,0 +1,81 @@
+import { NextRequest, NextResponse } from 'next/server';
+import { auth } from '@clerk/nextjs/server';
+import connectToDatabase from '@/lib/dbConnect';
+import User from '@/models/User';
+import Conversation from '@/models/Conversation';
+import DirectMessage from '@/models/DirectMessage';
+import { z } from 'zod';
+import { Types } from 'mongoose';
+
+// Validation schemas
+const ParamsSchema = z.object({
+  conversationId: z.string().min(1)
+});
+
+/**
+ * POST /api/conversations/[conversationId]/read - Mark all messages as read
+ */
+export async function POST(
+  req: NextRequest,
+  { params }: { params: { conversationId: string } }
+) {
+  try {
+    // Authenticate user
+    const { userId } = await auth();
+    if (!userId) {
+      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
+    }
+
+    // Validate parameters
+    const validatedParams = ParamsSchema.safeParse(params);
+    if (!validatedParams.success) {
+      return NextResponse.json({ 
+        error: 'Invalid parameters',
+        details: validatedParams.error.format()
+      }, { status: 400 });
+    }
+
+    const { conversationId } = validatedParams.data;
+
+    // Validate ObjectId
+    if (!Types.ObjectId.isValid(conversationId)) {
+      return NextResponse.json({ error: 'Invalid conversation ID format' }, { status: 400 });
+    }
+
+    await connectToDatabase();
+
+    // Find user
+    const user = await User.findOne({ clerkId: userId });
+    if (!user) {
+      return NextResponse.json({ error: 'User not found' }, { status: 404 });
+    }
+
+    // Find conversation and ensure user is a participant
+    const conversation = await Conversation.findOne({
+      _id: conversationId,
+      participants: user._id
+    });
+
+    if (!conversation) {
+      return NextResponse.json({ error: 'Conversation not found' }, { status: 404 });
+    }
+
+    // Mark all messages as read where user is the recipient
+    const result = await DirectMessage.updateMany(
+      {
+        conversation: conversationId,
+        recipient: user._id,
+        isRead: false
+      },
+      { isRead: true }
+    );
+
+    return NextResponse.json({
+      success: true,
+      messagesRead: result.modifiedCount
+    }, { status: 200 });
+  } catch (error) {
+    console.error('[MARK MESSAGES READ]', error);
+    return NextResponse.json({ error: 'Failed to mark messages as read' }, { status: 500 });
+  }
+}
Index: src/components/messages/message-list.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/messages/message-list.tsx b/src/components/messages/message-list.tsx
new file mode 100644
--- /dev/null	(date 1747009943546)
+++ b/src/components/messages/message-list.tsx	(date 1747009943546)
@@ -0,0 +1,294 @@
+"use client";
+
+import React, { useState, useEffect, useRef } from "react";
+import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
+import { Button } from "@/components/ui/button";
+import { Loader2 } from "lucide-react";
+import { formatDistanceToNow } from "date-fns";
+import { toast } from "sonner";
+import { MessageItem } from "./message-item";
+
+interface Message {
+  id: string;
+  content: string;
+  sender: {
+    id: string;
+    username: string;
+    name: string;
+    image?: string;
+  };
+  isRead: boolean;
+  isEdited: boolean;
+  attachments: string[];
+  reactions: {
+    emoji: string;
+    count: number;
+    hasReacted: boolean;
+  }[];
+  createdAt: string;
+  updatedAt: string;
+}
+
+interface MessageListProps {
+  conversationId: string;
+  currentUserId: string;
+  onNewMessage?: () => void;
+}
+
+export function MessageList({ conversationId, currentUserId, onNewMessage }: MessageListProps) {
+  const [messages, setMessages] = useState<Message[]>([]);
+  const [loading, setLoading] = useState(true);
+  const [error, setError] = useState<string | null>(null);
+  const [hasMore, setHasMore] = useState(false);
+  const [loadingMore, setLoadingMore] = useState(false);
+  const [nextCursor, setNextCursor] = useState<string | null>(null);
+  const messagesEndRef = useRef<HTMLDivElement | null>(null);
+  const observerRef = useRef<IntersectionObserver | null>(null);
+  const topMessageRef = useRef<HTMLDivElement | null>(null);
+
+  // Fetch initial messages
+  useEffect(() => {
+    const fetchMessages = async () => {
+      try {
+        setLoading(true);
+        setError(null);
+        
+        const response = await fetch(`/api/conversations/${conversationId}/messages`);
+        
+        if (!response.ok) {
+          throw new Error("Failed to fetch messages");
+        }
+        
+        const data = await response.json();
+        setMessages(data.messages);
+        setHasMore(data.pagination.hasMore);
+        setNextCursor(data.pagination.nextCursor);
+        
+        // Mark conversation as read
+        await fetch(`/api/conversations/${conversationId}/read`, {
+          method: "POST"
+        });
+      } catch (err) {
+        console.error(err);
+        setError("Failed to load messages");
+        toast.error("Failed to load messages");
+      } finally {
+        setLoading(false);
+      }
+    };
+    
+    if (conversationId) {
+      fetchMessages();
+    }
+  }, [conversationId]);
+
+  // Scroll to bottom on initial load
+  useEffect(() => {
+    if (!loading && messages.length > 0) {
+      scrollToBottom();
+    }
+  }, [loading, messages.length]);
+
+  // Set up intersection observer for infinite scrolling
+  useEffect(() => {
+    if (topMessageRef.current && hasMore) {
+      observerRef.current = new IntersectionObserver(
+        (entries) => {
+          if (entries[0].isIntersecting) {
+            loadMoreMessages();
+          }
+        },
+        { threshold: 0.1 }
+      );
+      
+      observerRef.current.observe(topMessageRef.current);
+    }
+    
+    return () => {
+      if (observerRef.current) {
+        observerRef.current.disconnect();
+      }
+    };
+  }, [hasMore, topMessageRef.current]);
+
+  // Poll for new messages
+  useEffect(() => {
+    const pollInterval = setInterval(async () => {
+      if (!messages.length || loading) return;
+      
+      try {
+        const latestMessageDate = messages[messages.length - 1].createdAt;
+        
+        const response = await fetch(
+          `/api/conversations/${conversationId}/messages?after=${latestMessageDate}`
+        );
+        
+        if (!response.ok) {
+          throw new Error("Failed to fetch new messages");
+        }
+        
+        const data = await response.json();
+        
+        if (data.messages.length > 0) {
+          setMessages(prevMessages => [...prevMessages, ...data.messages]);
+          
+          // Scroll to bottom for new messages
+          scrollToBottom();
+          
+          // Mark conversation as read
+          await fetch(`/api/conversations/${conversationId}/read`, {
+            method: "POST"
+          });
+          
+          // Notify parent
+          if (onNewMessage) {
+            onNewMessage();
+          }
+        }
+      } catch (err) {
+        console.error(err);
+      }
+    }, 5000); // Poll every 5 seconds
+    
+    return () => clearInterval(pollInterval);
+  }, [conversationId, messages, loading, onNewMessage]);
+
+  // Load more messages
+  const loadMoreMessages = async () => {
+    if (!hasMore || loadingMore || !nextCursor) return;
+    
+    try {
+      setLoadingMore(true);
+      
+      const response = await fetch(
+        `/api/conversations/${conversationId}/messages?before=${nextCursor}`
+      );
+      
+      if (!response.ok) {
+        throw new Error("Failed to fetch more messages");
+      }
+      
+      const data = await response.json();
+      
+      // Preserve scroll position
+      const scrollContainer = document.querySelector(".messages-container");
+      const oldHeight = scrollContainer?.scrollHeight || 0;
+      
+      setMessages(prevMessages => [...data.messages, ...prevMessages]);
+      setHasMore(data.pagination.hasMore);
+      setNextCursor(data.pagination.nextCursor);
+      
+      // Restore scroll position
+      if (scrollContainer) {
+        const newHeight = scrollContainer.scrollHeight;
+        scrollContainer.scrollTop = newHeight - oldHeight;
+      }
+    } catch (err) {
+      console.error(err);
+      toast.error("Failed to load more messages");
+    } finally {
+      setLoadingMore(false);
+    }
+  };
+
+  // Scroll to bottom
+  const scrollToBottom = () => {
+    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
+  };
+
+  // Handle message update
+  const handleMessageUpdate = (updatedMessage: Message) => {
+    setMessages(prevMessages => 
+      prevMessages.map(msg => 
+        msg.id === updatedMessage.id ? updatedMessage : msg
+      )
+    );
+  };
+
+  // Handle message delete
+  const handleMessageDelete = (messageId: string) => {
+    setMessages(prevMessages => 
+      prevMessages.filter(msg => msg.id !== messageId)
+    );
+  };
+
+  // Group messages by date
+  const groupedMessages: { [date: string]: Message[] } = {};
+  messages.forEach(message => {
+    const date = new Date(message.createdAt).toLocaleDateString();
+    if (!groupedMessages[date]) {
+      groupedMessages[date] = [];
+    }
+    groupedMessages[date].push(message);
+  });
+
+  return (
+    <div className="flex-1 overflow-y-auto p-4 messages-container">
+      {/* Loading indicator for more messages */}
+      {loadingMore && (
+        <div className="flex justify-center py-2">
+          <Loader2 className="h-5 w-5 animate-spin text-gray-400" />
+        </div>
+      )}
+      
+      {loading ? (
+        <div className="flex flex-col items-center justify-center h-full">
+          <Loader2 className="h-8 w-8 animate-spin text-[#00AEEF] mb-4" />
+          <p className="text-gray-500">Loading messages...</p>
+        </div>
+      ) : error ? (
+        <div className="flex flex-col items-center justify-center h-full">
+          <p className="text-red-500 mb-4">{error}</p>
+          <Button variant="outline" onClick={() => window.location.reload()}>
+            Try Again
+          </Button>
+        </div>
+      ) : messages.length === 0 ? (
+        <div className="flex flex-col items-center justify-center h-full text-center">
+          <p className="text-gray-500">No messages yet. Start the conversation!</p>
+        </div>
+      ) : (
+        <>
+          {/* Message groups by date */}
+          {Object.entries(groupedMessages).map(([date, dateMessages], dateIndex) => (
+            <div key={date} className="mb-6">
+              {/* Date separator */}
+              <div className="flex items-center justify-center mb-4">
+                <div className="h-px bg-gray-200 flex-1"></div>
+                <span className="px-4 text-xs text-gray-500 font-medium">
+                  {new Date(date).toLocaleDateString(undefined, { 
+                    weekday: 'long', 
+                    year: 'numeric', 
+                    month: 'long', 
+                    day: 'numeric' 
+                  })}
+                </span>
+                <div className="h-px bg-gray-200 flex-1"></div>
+              </div>
+              
+              {/* Messages for this date */}
+              {dateMessages.map((message, messageIndex) => (
+                <div
+                  key={message.id}
+                  ref={dateIndex === 0 && messageIndex === 0 ? topMessageRef : null}
+                  className="mb-4"
+                >
+                  <MessageItem
+                    message={message}
+                    isCurrentUser={message.sender.id === currentUserId}
+                    conversationId={conversationId}
+                    onUpdate={handleMessageUpdate}
+                    onDelete={handleMessageDelete}
+                  />
+                </div>
+              ))}
+            </div>
+          ))}
+          
+          {/* Invisible element for scrolling to bottom */}
+          <div ref={messagesEndRef} />
+        </>
+      )}
+    </div>
+  );
+}
Index: src/app/api/conversations/[conversationId]/messages/[messageId]/reactions/route.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/app/api/conversations/[conversationId]/messages/[messageId]/reactions/route.ts b/src/app/api/conversations/[conversationId]/messages/[messageId]/reactions/route.ts
new file mode 100644
--- /dev/null	(date 1747009943470)
+++ b/src/app/api/conversations/[conversationId]/messages/[messageId]/reactions/route.ts	(date 1747009943470)
@@ -0,0 +1,174 @@
+import { NextRequest, NextResponse } from 'next/server';
+import { auth } from '@clerk/nextjs/server';
+import connectToDatabase from '@/lib/dbConnect';
+import User from '@/models/User';
+import DirectMessage from '@/models/DirectMessage';
+import { z } from 'zod';
+import { Types } from 'mongoose';
+
+// Validation schemas
+const ParamsSchema = z.object({
+  conversationId: z.string().min(1),
+  messageId: z.string().min(1)
+});
+
+const ReactionSchema = z.object({
+  emoji: z.string().min(1).max(10)
+});
+
+/**
+ * POST /api/conversations/[conversationId]/messages/[messageId]/reactions - Add a reaction
+ */
+export async function POST(
+  req: NextRequest,
+  { params }: { params: { conversationId: string; messageId: string } }
+) {
+  try {
+    // Authenticate user
+    const { userId } = await auth();
+    if (!userId) {
+      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
+    }
+
+    // Validate parameters
+    const validatedParams = ParamsSchema.safeParse(params);
+    if (!validatedParams.success) {
+      return NextResponse.json({ 
+        error: 'Invalid parameters',
+        details: validatedParams.error.format()
+      }, { status: 400 });
+    }
+
+    const { conversationId, messageId } = validatedParams.data;
+
+    // Validate ObjectIds
+    if (!Types.ObjectId.isValid(conversationId) || !Types.ObjectId.isValid(messageId)) {
+      return NextResponse.json({ error: 'Invalid ID format' }, { status: 400 });
+    }
+
+    // Validate request body
+    const body = await req.json();
+    const validatedBody = ReactionSchema.safeParse(body);
+    if (!validatedBody.success) {
+      return NextResponse.json({ 
+        error: 'Invalid request body',
+        details: validatedBody.error.format()
+      }, { status: 400 });
+    }
+
+    const { emoji } = validatedBody.data;
+
+    await connectToDatabase();
+
+    // Find user
+    const user = await User.findOne({ clerkId: userId });
+    if (!user) {
+      return NextResponse.json({ error: 'User not found' }, { status: 404 });
+    }
+
+    // Find message
+    const message = await DirectMessage.findOne({
+      _id: messageId,
+      conversation: conversationId
+    });
+
+    if (!message) {
+      return NextResponse.json({ error: 'Message not found' }, { status: 404 });
+    }
+
+    // Add reaction
+    await message.addReaction(emoji, user._id);
+
+    // Get updated reactions
+    const updatedMessage = await DirectMessage.findById(messageId);
+    const reactions = updatedMessage?.reactions.map(reaction => ({
+      emoji: reaction.emoji,
+      count: reaction.users.length,
+      hasReacted: reaction.users.some(u => u.equals(user._id))
+    })) || [];
+
+    return NextResponse.json({
+      success: true,
+      reactions
+    }, { status: 200 });
+  } catch (error) {
+    console.error('[ADD REACTION]', error);
+    return NextResponse.json({ error: 'Failed to add reaction' }, { status: 500 });
+  }
+}
+
+/**
+ * DELETE /api/conversations/[conversationId]/messages/[messageId]/reactions - Remove a reaction
+ */
+export async function DELETE(
+  req: NextRequest,
+  { params }: { params: { conversationId: string; messageId: string } }
+) {
+  try {
+    // Authenticate user
+    const { userId } = await auth();
+    if (!userId) {
+      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
+    }
+
+    // Validate parameters
+    const validatedParams = ParamsSchema.safeParse(params);
+    if (!validatedParams.success) {
+      return NextResponse.json({ 
+        error: 'Invalid parameters',
+        details: validatedParams.error.format()
+      }, { status: 400 });
+    }
+
+    const { conversationId, messageId } = validatedParams.data;
+
+    // Validate ObjectIds
+    if (!Types.ObjectId.isValid(conversationId) || !Types.ObjectId.isValid(messageId)) {
+      return NextResponse.json({ error: 'Invalid ID format' }, { status: 400 });
+    }
+
+    // Get emoji from query params
+    const url = new URL(req.url);
+    const emoji = url.searchParams.get('emoji');
+    if (!emoji) {
+      return NextResponse.json({ error: 'Emoji parameter is required' }, { status: 400 });
+    }
+
+    await connectToDatabase();
+
+    // Find user
+    const user = await User.findOne({ clerkId: userId });
+    if (!user) {
+      return NextResponse.json({ error: 'User not found' }, { status: 404 });
+    }
+
+    // Find message
+    const message = await DirectMessage.findOne({
+      _id: messageId,
+      conversation: conversationId
+    });
+
+    if (!message) {
+      return NextResponse.json({ error: 'Message not found' }, { status: 404 });
+    }
+
+    // Remove reaction
+    await message.removeReaction(emoji, user._id);
+
+    // Get updated reactions
+    const updatedMessage = await DirectMessage.findById(messageId);
+    const reactions = updatedMessage?.reactions.map(reaction => ({
+      emoji: reaction.emoji,
+      count: reaction.users.length,
+      hasReacted: reaction.users.some(u => u.equals(user._id))
+    })) || [];
+
+    return NextResponse.json({
+      success: true,
+      reactions
+    }, { status: 200 });
+  } catch (error) {
+    console.error('[REMOVE REACTION]', error);
+    return NextResponse.json({ error: 'Failed to remove reaction' }, { status: 500 });
+  }
+}
Index: src/app/api/users/me/route.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/app/api/users/me/route.ts b/src/app/api/users/me/route.ts
new file mode 100644
--- /dev/null	(date 1747009943614)
+++ b/src/app/api/users/me/route.ts	(date 1747009943614)
@@ -0,0 +1,223 @@
+// src/app/api/users/me/route.ts
+import { NextRequest, NextResponse } from "next/server";
+import { auth } from "@clerk/nextjs/server";
+import dbConnect from "@/lib/dbConnect";
+import User, { IUser } from "@/models/User";
+import { LeanDocument } from "@/types/mongoose";
+import { z } from "zod";
+
+// Zod schema for profile update validation
+const profileUpdateSchema = z.object({
+  username: z
+    .string()
+    .min(3, "Username must be at least 3 characters")
+    .max(30, "Username must be at most 30 characters")
+    .regex(/^[a-zA-Z0-9_]+$/, "Username can only contain letters, numbers, and underscores")
+    .optional(),
+  name: z
+    .string()
+    .min(2, "Name must be at least 2 characters")
+    .max(50, "Name must be at most 50 characters")
+    .optional(),
+  bio: z
+    .string()
+    .max(500, "Bio must be at most 500 characters")
+    .optional(),
+  image: z
+    .string()
+    .url("Image must be a valid URL")
+    .optional()
+    .nullable(),
+});
+
+interface UserProfileResponse {
+  id: string;
+  username: string;
+  name: string;
+  bio?: string;
+  image?: string;
+  email: string;
+  createdAt: string;
+  updatedAt: string;
+}
+
+export async function GET(_req: NextRequest) {
+  try {
+    // 1. Get the current user's ID from Clerk
+    const { userId: clerkId } = await auth();
+
+    if (!clerkId) {
+      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
+    }
+
+    // 2. Connect to the database
+    await dbConnect();
+
+    // 3. Find the user in MongoDB
+    const userDoc = await User.findOne({ clerkId }).lean<LeanDocument<IUser>>();
+
+    if (!userDoc) {
+      return NextResponse.json({ error: "User not found" }, { status: 404 });
+    }
+
+    // 4. Format the response
+    const user: UserProfileResponse = {
+      id: userDoc._id.toString(),
+      username: userDoc.username,
+      name: userDoc.name,
+      bio: userDoc.bio || "",
+      image: userDoc.image || "",
+      email: userDoc.email,
+      createdAt: userDoc.createdAt.toISOString(),
+      updatedAt: userDoc.updatedAt.toISOString(),
+    };
+
+    return NextResponse.json(user);
+  } catch (error) {
+    console.error("[GET /api/users/me] Error:", error);
+    return NextResponse.json(
+      { error: "Failed to fetch user profile" },
+      { status: 500 }
+    );
+  }
+}
+
+export async function PATCH(req: NextRequest) {
+  try {
+    // 1. Get the current user's ID from Clerk
+    const { userId: clerkId } = await auth();
+
+    if (!clerkId) {
+      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
+    }
+
+    // 2. Parse and validate the request body
+    const body = await req.json();
+
+    const validationResult = profileUpdateSchema.safeParse(body);
+    if (!validationResult.success) {
+      return NextResponse.json(
+        { error: "Invalid request data", details: validationResult.error.format() },
+        { status: 400 }
+      );
+    }
+
+    const { username, name, bio, image } = validationResult.data;
+
+    // 3. Connect to the database
+    await dbConnect();
+
+    // 4. Check if username is already taken (if changing username)
+    if (username) {
+      const existingUser = await User.findOne({
+        username,
+        clerkId: { $ne: clerkId }
+      });
+
+      if (existingUser) {
+        return NextResponse.json(
+          { error: "Username is already taken" },
+          { status: 400 }
+        );
+      }
+    }
+
+    // 5. Find and update the user in MongoDB
+    const updatedUser = await User.findOneAndUpdate(
+      { clerkId },
+      {
+        ...(username && { username }),
+        ...(name && { name }),
+        ...(bio !== undefined && { bio }),
+        ...(image !== undefined && { image }),
+      },
+      { new: true }
+    ).lean<LeanDocument<IUser>>();
+
+    if (!updatedUser) {
+      return NextResponse.json({ error: "User not found" }, { status: 404 });
+    }
+
+    // 6. Update the user in Clerk
+    try {
+      const clerkUpdateData: Record<string, any> = {};
+
+      if (username) clerkUpdateData.username = username;
+      if (name) {
+        // Split name into first and last name for Clerk
+        const nameParts = name.split(' ');
+        clerkUpdateData.first_name = nameParts[0];
+        if (nameParts.length > 1) {
+          clerkUpdateData.last_name = nameParts.slice(1).join(' ');
+        }
+      }
+      if (image !== undefined) clerkUpdateData.image_url = image;
+
+      // Only make the Clerk API call if there's data to update
+      if (Object.keys(clerkUpdateData).length > 0) {
+        const CLERK_API_KEY = process.env.CLERK_SECRET_KEY;
+        if (!CLERK_API_KEY) {
+          throw new Error("CLERK_SECRET_KEY is not defined");
+        }
+
+        const response = await fetch(`https://api.clerk.dev/v1/users/${clerkId}`, {
+          method: 'PATCH',
+          headers: {
+            'Authorization': `Bearer ${CLERK_API_KEY}`,
+            'Content-Type': 'application/json',
+          },
+          body: JSON.stringify(clerkUpdateData),
+        });
+
+        if (!response.ok) {
+          const errorData = await response.json();
+          console.error("[PATCH /api/users/me] Clerk API error:", errorData);
+
+          // If Clerk update fails, we should roll back the MongoDB update
+          await User.findOneAndUpdate(
+            { clerkId },
+            { $set: { username: updatedUser.username, name: updatedUser.name, image: updatedUser.image } }
+          );
+
+          return NextResponse.json(
+            { error: "Failed to update profile in authentication service" },
+            { status: 500 }
+          );
+        }
+      }
+    } catch (clerkError) {
+      console.error("[PATCH /api/users/me] Clerk API error:", clerkError);
+
+      // Roll back MongoDB update if Clerk update fails
+      await User.findOneAndUpdate(
+        { clerkId },
+        { $set: { username: updatedUser.username, name: updatedUser.name, image: updatedUser.image } }
+      );
+
+      return NextResponse.json(
+        { error: "Failed to update profile in authentication service" },
+        { status: 500 }
+      );
+    }
+
+    // 7. Format and return the response
+    const user: UserProfileResponse = {
+      id: updatedUser._id.toString(),
+      username: updatedUser.username,
+      name: updatedUser.name,
+      bio: updatedUser.bio || "",
+      image: updatedUser.image || "",
+      email: updatedUser.email,
+      createdAt: updatedUser.createdAt.toISOString(),
+      updatedAt: updatedUser.updatedAt.toISOString(),
+    };
+
+    return NextResponse.json(user);
+  } catch (error) {
+    console.error("[PATCH /api/users/me] Error:", error);
+    return NextResponse.json(
+      { error: "Failed to update user profile" },
+      { status: 500 }
+    );
+  }
+}
Index: .eslintrc.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.eslintrc.json b/.eslintrc.json
new file mode 100644
--- /dev/null	(date 1747009943630)
+++ b/.eslintrc.json	(date 1747009943630)
@@ -0,0 +1,15 @@
+{
+  "extends": [
+    "next/core-web-vitals",
+    "plugin:@typescript-eslint/recommended"
+  ],
+  "parser": "@typescript-eslint/parser",
+  "plugins": ["@typescript-eslint"],
+  "rules": {
+    "@typescript-eslint/no-unused-vars": "warn",
+    "@typescript-eslint/no-explicit-any": "warn",
+    "react-hooks/exhaustive-deps": "warn",
+    "react/no-unescaped-entities": "warn",
+    "@next/next/no-img-element": "warn"
+  }
+}
Index: src/components/messages/conversation-list.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/messages/conversation-list.tsx b/src/components/messages/conversation-list.tsx
new file mode 100644
--- /dev/null	(date 1747009943569)
+++ b/src/components/messages/conversation-list.tsx	(date 1747009943569)
@@ -0,0 +1,211 @@
+"use client";
+
+import React, { useState, useEffect } from "react";
+import { useRouter } from "next/navigation";
+import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
+import { Button } from "@/components/ui/button";
+import { Input } from "@/components/ui/input";
+import { Loader2, Search, Plus, MessageSquare } from "lucide-react";
+import { formatDistanceToNow } from "date-fns";
+import { toast } from "sonner";
+
+interface Conversation {
+  id: string;
+  participant: {
+    id: string;
+    username: string;
+    name: string;
+    image?: string;
+  };
+  lastMessage?: {
+    id: string;
+    content: string;
+    createdAt: string;
+    isRead: boolean;
+  };
+  lastActivity: string;
+  unreadCount: number;
+}
+
+interface ConversationListProps {
+  activeConversationId?: string;
+}
+
+export function ConversationList({ activeConversationId }: ConversationListProps) {
+  const [conversations, setConversations] = useState<Conversation[]>([]);
+  const [loading, setLoading] = useState(true);
+  const [error, setError] = useState<string | null>(null);
+  const [searchQuery, setSearchQuery] = useState("");
+  const router = useRouter();
+
+  // Fetch conversations
+  useEffect(() => {
+    const fetchConversations = async () => {
+      try {
+        setLoading(true);
+        setError(null);
+        
+        const response = await fetch("/api/conversations");
+        
+        if (!response.ok) {
+          throw new Error("Failed to fetch conversations");
+        }
+        
+        const data = await response.json();
+        setConversations(data.conversations);
+      } catch (err) {
+        console.error(err);
+        setError("Failed to load conversations");
+        toast.error("Failed to load conversations");
+      } finally {
+        setLoading(false);
+      }
+    };
+    
+    fetchConversations();
+    
+    // Poll for new messages every 10 seconds
+    const interval = setInterval(fetchConversations, 10000);
+    
+    return () => clearInterval(interval);
+  }, []);
+
+  // Filter conversations based on search query
+  const filteredConversations = searchQuery
+    ? conversations.filter(conversation => 
+        conversation.participant.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
+        conversation.participant.username.toLowerCase().includes(searchQuery.toLowerCase())
+      )
+    : conversations;
+
+  // Format date
+  const formatDate = (dateString: string) => {
+    try {
+      return formatDistanceToNow(new Date(dateString), { addSuffix: true });
+    } catch (err) {
+      return "some time ago";
+    }
+  };
+
+  // Handle conversation click
+  const handleConversationClick = (conversationId: string) => {
+    router.push(`/messages/${conversationId}`);
+  };
+
+  // Handle new conversation
+  const handleNewConversation = () => {
+    router.push("/messages/new");
+  };
+
+  return (
+    <div className="h-full flex flex-col border-r border-gray-200">
+      <div className="p-4 border-b border-gray-200">
+        <h2 className="text-xl font-semibold mb-4">Messages</h2>
+        
+        <div className="flex gap-2">
+          <div className="relative flex-1">
+            <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-gray-400" />
+            <Input
+              placeholder="Search conversations..."
+              className="pl-10"
+              value={searchQuery}
+              onChange={(e) => setSearchQuery(e.target.value)}
+            />
+          </div>
+          
+          <Button
+            onClick={handleNewConversation}
+            size="icon"
+            className="bg-[#00AEEF] hover:bg-[#0099d6] text-white"
+          >
+            <Plus className="h-4 w-4" />
+            <span className="sr-only">New Conversation</span>
+          </Button>
+        </div>
+      </div>
+      
+      <div className="flex-1 overflow-y-auto">
+        {loading ? (
+          <div className="flex flex-col items-center justify-center h-full">
+            <Loader2 className="h-8 w-8 animate-spin text-[#00AEEF] mb-4" />
+            <p className="text-gray-500">Loading conversations...</p>
+          </div>
+        ) : error ? (
+          <div className="flex flex-col items-center justify-center h-full">
+            <p className="text-red-500 mb-4">{error}</p>
+            <Button variant="outline" onClick={() => window.location.reload()}>
+              Try Again
+            </Button>
+          </div>
+        ) : filteredConversations.length === 0 ? (
+          <div className="flex flex-col items-center justify-center h-full p-4 text-center">
+            {searchQuery ? (
+              <>
+                <Search className="h-12 w-12 text-gray-300 mb-4" />
+                <h3 className="text-lg font-medium text-gray-800 mb-1">No results found</h3>
+                <p className="text-sm text-gray-500">Try a different search term</p>
+              </>
+            ) : (
+              <>
+                <MessageSquare className="h-12 w-12 text-gray-300 mb-4" />
+                <h3 className="text-lg font-medium text-gray-800 mb-1">No conversations yet</h3>
+                <p className="text-sm text-gray-500 mb-4">Start a new conversation to chat with someone</p>
+                <Button 
+                  onClick={handleNewConversation}
+                  className="bg-[#00AEEF] hover:bg-[#0099d6] text-white"
+                >
+                  <Plus className="h-4 w-4 mr-2" />
+                  New Conversation
+                </Button>
+              </>
+            )}
+          </div>
+        ) : (
+          <div className="divide-y divide-gray-100">
+            {filteredConversations.map((conversation) => (
+              <div
+                key={conversation.id}
+                className={`p-4 hover:bg-gray-50 cursor-pointer transition-colors ${
+                  activeConversationId === conversation.id ? "bg-blue-50" : ""
+                }`}
+                onClick={() => handleConversationClick(conversation.id)}
+              >
+                <div className="flex items-start gap-3">
+                  <div className="relative">
+                    <Avatar className="h-12 w-12">
+                      <AvatarImage src={conversation.participant.image} />
+                      <AvatarFallback>
+                        {conversation.participant.name.charAt(0).toUpperCase()}
+                      </AvatarFallback>
+                    </Avatar>
+                    
+                    {conversation.unreadCount > 0 && (
+                      <span className="absolute -top-1 -right-1 h-5 w-5 rounded-full bg-red-500 flex items-center justify-center text-white text-xs font-bold">
+                        {conversation.unreadCount > 9 ? "9+" : conversation.unreadCount}
+                      </span>
+                    )}
+                  </div>
+                  
+                  <div className="flex-1 min-w-0">
+                    <div className="flex justify-between items-baseline">
+                      <h3 className="font-medium text-gray-900 truncate">
+                        {conversation.participant.name}
+                      </h3>
+                      <span className="text-xs text-gray-500">
+                        {formatDate(conversation.lastActivity)}
+                      </span>
+                    </div>
+                    
+                    <p className="text-sm text-gray-500 truncate">
+                      {conversation.lastMessage?.content || "No messages yet"}
+                    </p>
+                  </div>
+                </div>
+              </div>
+            ))}
+          </div>
+        )}
+      </div>
+    </div>
+  );
+}
Index: src/types/roles.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/types/roles.ts b/src/types/roles.ts
new file mode 100644
--- /dev/null	(date 1747009943588)
+++ b/src/types/roles.ts	(date 1747009943588)
@@ -0,0 +1,56 @@
+// src/types/roles.ts
+import { Types } from "mongoose";
+import { Permission } from "@/models/Role";
+
+/**
+ * Role document interface for type safety
+ */
+export interface RoleDocument {
+  _id: Types.ObjectId;
+  name: string;
+  color: string;
+  position: number;
+  isDefault: boolean;
+  permissions: Permission[];
+  community: Types.ObjectId;
+  createdAt: Date;
+  updatedAt: Date;
+}
+
+/**
+ * Role creation request body
+ */
+export interface CreateRoleRequest {
+  name: string;
+  color?: string;
+  permissions?: Permission[];
+  isDefault?: boolean;
+}
+
+/**
+ * Role update request body
+ */
+export interface UpdateRoleRequest {
+  name?: string;
+  color?: string;
+  permissions?: Permission[];
+  position?: number;
+  isDefault?: boolean;
+}
+
+/**
+ * Role assignment request body
+ */
+export interface RoleAssignmentRequest {
+  roleIds: string[];
+}
+
+/**
+ * Pagination parameters for roles
+ */
+export interface RolePaginationParams {
+  page?: number;
+  limit?: number;
+  sortBy?: 'position' | 'name' | 'createdAt';
+  sortOrder?: 'asc' | 'desc';
+}
Index: src/app/api/users/me/password/route.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/app/api/users/me/password/route.ts b/src/app/api/users/me/password/route.ts
new file mode 100644
--- /dev/null	(date 1747009943670)
+++ b/src/app/api/users/me/password/route.ts	(date 1747009943670)
@@ -0,0 +1,95 @@
+import { NextRequest, NextResponse } from "next/server";
+import { auth } from "@clerk/nextjs/server";
+import { z } from "zod";
+
+// Zod schema for password update validation
+const passwordUpdateSchema = z.object({
+  currentPassword: z
+    .string()
+    .min(1, "Current password is required"),
+  newPassword: z
+    .string()
+    .min(8, "New password must be at least 8 characters")
+    .max(100, "New password must be at most 100 characters"),
+  confirmPassword: z
+    .string()
+    .min(1, "Password confirmation is required"),
+}).refine((data) => data.newPassword === data.confirmPassword, {
+  message: "Passwords do not match",
+  path: ["confirmPassword"],
+});
+
+export async function POST(req: NextRequest) {
+  try {
+    // Get the current user's ID from Clerk
+    const { userId: clerkId } = await auth();
+
+    if (!clerkId) {
+      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
+    }
+
+    // Parse and validate the request body
+    const body = await req.json();
+
+    const validationResult = passwordUpdateSchema.safeParse(body);
+    if (!validationResult.success) {
+      return NextResponse.json(
+        { error: "Invalid request data", details: validationResult.error.format() },
+        { status: 400 }
+      );
+    }
+
+    const { currentPassword, newPassword } = validationResult.data;
+
+    // Verify current password with Clerk
+    const verifyPasswordResponse = await fetch(`https://api.clerk.dev/v1/users/${clerkId}/verify_password`, {
+      method: "POST",
+      headers: {
+        Authorization: `Bearer ${process.env.CLERK_SECRET_KEY}`,
+        "Content-Type": "application/json",
+      },
+      body: JSON.stringify({
+        password: currentPassword,
+      }),
+    });
+
+    if (!verifyPasswordResponse.ok) {
+      return NextResponse.json(
+        { error: "Current password is incorrect" },
+        { status: 400 }
+      );
+    }
+
+    // Update password in Clerk
+    const updatePasswordResponse = await fetch(`https://api.clerk.dev/v1/users/${clerkId}/update_password`, {
+      method: "POST",
+      headers: {
+        Authorization: `Bearer ${process.env.CLERK_SECRET_KEY}`,
+        "Content-Type": "application/json",
+      },
+      body: JSON.stringify({
+        current_password: currentPassword,
+        password: newPassword,
+      }),
+    });
+
+    if (!updatePasswordResponse.ok) {
+      console.error("[POST /api/users/me/password] Clerk API error:", await updatePasswordResponse.text());
+      return NextResponse.json(
+        { error: "Failed to update password in authentication service" },
+        { status: 500 }
+      );
+    }
+
+    return NextResponse.json({
+      success: true,
+      message: "Password updated successfully",
+    });
+  } catch (error) {
+    console.error("[POST /api/users/me/password] Error:", error);
+    return NextResponse.json(
+      { error: "Failed to update password" },
+      { status: 500 }
+    );
+  }
+}
Index: src/app/api/users/me/email/route.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/app/api/users/me/email/route.ts b/src/app/api/users/me/email/route.ts
new file mode 100644
--- /dev/null	(date 1747009943649)
+++ b/src/app/api/users/me/email/route.ts	(date 1747009943649)
@@ -0,0 +1,123 @@
+import { NextRequest, NextResponse } from "next/server";
+import { auth } from "@clerk/nextjs/server";
+import dbConnect from "@/lib/dbConnect";
+import User from "@/models/User";
+import { z } from "zod";
+
+// Zod schema for email update validation
+const emailUpdateSchema = z.object({
+  email: z
+    .string()
+    .email("Invalid email format")
+    .min(3, "Email must be at least 3 characters")
+    .max(255, "Email must be at most 255 characters"),
+  currentPassword: z
+    .string()
+    .min(1, "Current password is required"),
+});
+
+export async function POST(req: NextRequest) {
+  try {
+    // Get the current user's ID from Clerk
+    const { userId: clerkId } = await auth();
+
+    if (!clerkId) {
+      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
+    }
+
+    // Parse and validate the request body
+    const body = await req.json();
+
+    const validationResult = emailUpdateSchema.safeParse(body);
+    if (!validationResult.success) {
+      return NextResponse.json(
+        { error: "Invalid request data", details: validationResult.error.format() },
+        { status: 400 }
+      );
+    }
+
+    const { email, currentPassword } = validationResult.data;
+
+    // Connect to the database
+    await dbConnect();
+
+    // Find the user in MongoDB
+    const userDoc = await User.findOne({ clerkId }).lean();
+
+    if (!userDoc) {
+      return NextResponse.json({ error: "User not found" }, { status: 404 });
+    }
+
+    // Check if email is already taken
+    const existingUser = await User.findOne({
+      email,
+      clerkId: { $ne: clerkId }
+    });
+
+    if (existingUser) {
+      return NextResponse.json(
+        { error: "Email is already taken" },
+        { status: 400 }
+      );
+    }
+
+    // Verify password with Clerk
+    const verifyPasswordResponse = await fetch(`https://api.clerk.dev/v1/users/${clerkId}/verify_password`, {
+      method: "POST",
+      headers: {
+        Authorization: `Bearer ${process.env.CLERK_SECRET_KEY}`,
+        "Content-Type": "application/json",
+      },
+      body: JSON.stringify({
+        password: currentPassword,
+      }),
+    });
+
+    if (!verifyPasswordResponse.ok) {
+      return NextResponse.json(
+        { error: "Current password is incorrect" },
+        { status: 400 }
+      );
+    }
+
+    // Update email in Clerk
+    const updateEmailResponse = await fetch(`https://api.clerk.dev/v1/users/${clerkId}/email_addresses`, {
+      method: "POST",
+      headers: {
+        Authorization: `Bearer ${process.env.CLERK_SECRET_KEY}`,
+        "Content-Type": "application/json",
+      },
+      body: JSON.stringify({
+        email_address: email,
+        primary: true,
+        verified: false,
+      }),
+    });
+
+    if (!updateEmailResponse.ok) {
+      console.error("[POST /api/users/me/email] Clerk API error:", await updateEmailResponse.text());
+      return NextResponse.json(
+        { error: "Failed to update email in authentication service" },
+        { status: 500 }
+      );
+    }
+
+    // Update email in MongoDB
+    await User.findOneAndUpdate(
+      { clerkId },
+      { email },
+      { new: true }
+    );
+
+    return NextResponse.json({
+      success: true,
+      message: "Email update request sent. Please check your inbox for verification.",
+    });
+  } catch (error) {
+    console.error("[POST /api/users/me/email] Error:", error);
+    return NextResponse.json(
+      { error: "Failed to update email" },
+      { status: 500 }
+    );
+  }
+}
Index: src/context/SavedPostContext.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/context/SavedPostContext.tsx b/src/context/SavedPostContext.tsx
new file mode 100644
--- /dev/null	(date 1747009943756)
+++ b/src/context/SavedPostContext.tsx	(date 1747009943756)
@@ -0,0 +1,120 @@
+"use client";
+
+import React, {
+  createContext,
+  useContext,
+  useState,
+  useCallback,
+  useEffect,
+  ReactNode,
+} from "react";
+import { Post } from "./PostContext";
+
+interface SavedPostContextType {
+  savedPosts: Post[];
+  loading: boolean;
+  error: string | null;
+  hasMore: boolean;
+  fetchMoreSavedPosts: () => Promise<void>;
+  refreshSavedPosts: () => Promise<void>;
+  unsavePost: (postId: string) => Promise<void>;
+}
+
+const SavedPostContext = createContext<SavedPostContextType | undefined>(undefined);
+
+export const SavedPostProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
+  const [savedPosts, setSavedPosts] = useState<Post[]>([]);
+  const [loading, setLoading] = useState(true);
+  const [error, setError] = useState<string | null>(null);
+  const [page, setPage] = useState(1);
+  const [hasMore, setHasMore] = useState(true);
+
+  const fetchSavedPosts = useCallback(
+    async (reset = false) => {
+      if (!reset && loading) return;
+      setLoading(true);
+      try {
+        const nextPage = reset ? 1 : page;
+        const res = await fetch(`/api/bookmarks?page=${nextPage}&limit=10`);
+        const data = await res.json();
+
+        if (!res.ok) {
+          throw new Error(data.error || "Failed to fetch saved posts");
+        }
+
+        setSavedPosts((prev) => (reset ? data.posts : [...prev, ...data.posts]));
+        setHasMore(data.pagination?.hasMore || false);
+        setPage(reset ? 2 : page + 1);
+        setError(null);
+      } catch (err) {
+        const errorMessage = err instanceof Error ? err.message : "Unknown error";
+        setError(errorMessage);
+      } finally {
+        setLoading(false);
+      }
+    },
+    [page, loading]
+  );
+
+  const fetchMoreSavedPosts = useCallback(() => fetchSavedPosts(false), [fetchSavedPosts]);
+  const refreshSavedPosts = useCallback(() => fetchSavedPosts(true), [fetchSavedPosts]);
+
+  const unsavePost = useCallback(
+    async (postId: string) => {
+      try {
+        // Optimistic update - remove post from list
+        setSavedPosts((prev) => prev.filter((p) => p.id !== postId));
+
+        const res = await fetch(`/api/bookmarks/${postId}`, {
+          method: "POST",
+          headers: { "Content-Type": "application/json" },
+        });
+        const data = await res.json();
+
+        if (!res.ok) {
+          throw new Error(data.error || "Failed to unsave post");
+        }
+
+        // If the post wasn't actually unsaved (unlikely), add it back
+        if (data.isSaved) {
+          refreshSavedPosts();
+        }
+      } catch (error) {
+        console.error("[SavedPostContext] Unsave error:", error);
+        // Revert on error by refreshing the list
+        refreshSavedPosts();
+      }
+    },
+    [refreshSavedPosts]
+  );
+
+  useEffect(() => {
+    (async () => {
+      await fetchSavedPosts(true);
+    })();
+  }, [fetchSavedPosts]);
+
+  return (
+    <SavedPostContext.Provider
+      value={{
+        savedPosts,
+        loading,
+        error,
+        hasMore,
+        fetchMoreSavedPosts,
+        refreshSavedPosts,
+        unsavePost,
+      }}
+    >
+      {children}
+    </SavedPostContext.Provider>
+  );
+};
+
+export const useSavedPosts = () => {
+  const ctx = useContext(SavedPostContext);
+  if (!ctx) {
+    throw new Error("useSavedPosts must be used within a SavedPostProvider");
+  }
+  return ctx;
+};
Index: package-lock.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/package-lock.json b/package-lock.json
--- a/package-lock.json	(revision 4c74be27f19335e5b956190fea65a1f797f84875)
+++ b/package-lock.json	(date 1747009942108)
@@ -10,34 +10,56 @@
       "dependencies": {
         "@clerk/nextjs": "^6.16.0",
         "@radix-ui/react-avatar": "^1.1.7",
-        "@radix-ui/react-dialog": "^1.0.5",
-        "@radix-ui/react-dropdown-menu": "^2.0.6",
+        "@radix-ui/react-checkbox": "^1.2.3",
+        "@radix-ui/react-dialog": "^1.1.11",
+        "@radix-ui/react-dropdown-menu": "^2.1.12",
+        "@radix-ui/react-label": "^2.1.4",
+        "@radix-ui/react-radio-group": "^1.3.4",
+        "@radix-ui/react-scroll-area": "^1.2.6",
         "@radix-ui/react-select": "^2.0.0",
+        "@radix-ui/react-separator": "^1.1.4",
         "@radix-ui/react-slot": "^1.2.0",
+        "@radix-ui/react-switch": "^1.2.2",
+        "@radix-ui/react-tabs": "^1.1.9",
         "@radix-ui/react-tooltip": "^1.2.4",
         "@splinetool/react-spline": "^4.0.0",
+        "@supabase/supabase-js": "^2.49.4",
         "@tailwindcss/typography": "^0.5.16",
+        "@tiptap/extension-image": "^2.11.7",
+        "@tiptap/extension-link": "^2.11.7",
+        "@tiptap/extension-text-align": "^2.11.7",
+        "@tiptap/extension-underline": "^2.11.7",
+        "@tiptap/pm": "^2.11.7",
+        "@tiptap/react": "^2.11.7",
+        "@tiptap/starter-kit": "^2.11.7",
+        "@types/dompurify": "^3.0.5",
         "class-variance-authority": "^0.7.1",
         "clsx": "^2.1.1",
         "date-fns": "^3.6.0",
+        "dompurify": "^3.2.5",
         "formik": "^2.4.6",
-        "framer-motion": "^12.7.4",
+        "framer-motion": "^12.9.4",
         "gsap": "^3.12.7",
         "isomorphic-dompurify": "^2.24.0",
         "jest": "^29.7.0",
-        "lucide-react": "^0.501.0",
+        "lucide-react": "^0.507.0",
         "mongodb": "^6.15.0",
         "mongoose": "^8.13.2",
         "next": "15.3.1",
+        "next-themes": "^0.4.6",
         "react": "^19.0.0",
         "react-dom": "^19.0.0",
+        "react-dropzone": "^14.3.8",
         "react-icons": "^5.5.0",
         "react-markdown": "^9.0.1",
+        "slugify": "^1.6.6",
         "sonner": "^2.0.3",
         "svix": "^1.21.0",
         "tailwind-merge": "^3.2.0",
         "tw-animate-css": "^1.2.8",
-        "yup": "^1.6.1"
+        "validator": "^13.15.0",
+        "yup": "^1.6.1",
+        "zod": "^3.24.3"
       },
       "devDependencies": {
         "@eslint/eslintrc": "^3",
@@ -45,6 +67,9 @@
         "@types/node": "^20",
         "@types/react": "^19",
         "@types/react-dom": "^19",
+        "@types/validator": "^13.15.0",
+        "@typescript-eslint/eslint-plugin": "^8.31.1",
+        "@typescript-eslint/parser": "^8.31.1",
         "autoprefixer": "^10.4.21",
         "eslint": "^9",
         "eslint-config-next": "15.3.1",
@@ -2173,6 +2198,16 @@
         "node": ">=12.4.0"
       }
     },
+    "node_modules/@popperjs/core": {
+      "version": "2.11.8",
+      "resolved": "https://registry.npmjs.org/@popperjs/core/-/core-2.11.8.tgz",
+      "integrity": "sha512-P1st0aksCrn9sGZhp8GMYwBnQsbvAWsZAX44oXNNvLHGqAOcoVxmjZiohstwQ7SqKnbR47akdNi+uleWD8+g6A==",
+      "license": "MIT",
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/popperjs"
+      }
+    },
     "node_modules/@radix-ui/number": {
       "version": "1.1.1",
       "resolved": "https://registry.npmjs.org/@radix-ui/number/-/number-1.1.1.tgz",
@@ -2220,6 +2255,36 @@
         "@radix-ui/react-use-is-hydrated": "0.1.0",
         "@radix-ui/react-use-layout-effect": "1.1.1"
       },
+      "peerDependencies": {
+        "@types/react": "*",
+        "@types/react-dom": "*",
+        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc",
+        "react-dom": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
+      },
+      "peerDependenciesMeta": {
+        "@types/react": {
+          "optional": true
+        },
+        "@types/react-dom": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/@radix-ui/react-checkbox": {
+      "version": "1.2.3",
+      "resolved": "https://registry.npmjs.org/@radix-ui/react-checkbox/-/react-checkbox-1.2.3.tgz",
+      "integrity": "sha512-pHVzDYsnaDmBlAuwim45y3soIN8H4R7KbkSVirGhXO+R/kO2OLCe0eucUEbddaTcdMHHdzcIGHtZSMSQlA+apw==",
+      "license": "MIT",
+      "dependencies": {
+        "@radix-ui/primitive": "1.1.2",
+        "@radix-ui/react-compose-refs": "1.1.2",
+        "@radix-ui/react-context": "1.1.2",
+        "@radix-ui/react-presence": "1.1.4",
+        "@radix-ui/react-primitive": "2.1.0",
+        "@radix-ui/react-use-controllable-state": "1.2.2",
+        "@radix-ui/react-use-previous": "1.1.1",
+        "@radix-ui/react-use-size": "1.1.1"
+      },
       "peerDependencies": {
         "@types/react": "*",
         "@types/react-dom": "*",
@@ -2453,6 +2518,29 @@
       "peerDependenciesMeta": {
         "@types/react": {
           "optional": true
+        }
+      }
+    },
+    "node_modules/@radix-ui/react-label": {
+      "version": "2.1.4",
+      "resolved": "https://registry.npmjs.org/@radix-ui/react-label/-/react-label-2.1.4.tgz",
+      "integrity": "sha512-wy3dqizZnZVV4ja0FNnUhIWNwWdoldXrneEyUcVtLYDAt8ovGS4ridtMAOGgXBBIfggL4BOveVWsjXDORdGEQg==",
+      "license": "MIT",
+      "dependencies": {
+        "@radix-ui/react-primitive": "2.1.0"
+      },
+      "peerDependencies": {
+        "@types/react": "*",
+        "@types/react-dom": "*",
+        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc",
+        "react-dom": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
+      },
+      "peerDependenciesMeta": {
+        "@types/react": {
+          "optional": true
+        },
+        "@types/react-dom": {
+          "optional": true
         }
       }
     },
@@ -2599,6 +2687,38 @@
         }
       }
     },
+    "node_modules/@radix-ui/react-radio-group": {
+      "version": "1.3.4",
+      "resolved": "https://registry.npmjs.org/@radix-ui/react-radio-group/-/react-radio-group-1.3.4.tgz",
+      "integrity": "sha512-N4J9QFdW5zcJNxxY/zwTXBN4Uc5VEuRM7ZLjNfnWoKmNvgrPtNNw4P8zY532O3qL6aPkaNO+gY9y6bfzmH4U1g==",
+      "license": "MIT",
+      "dependencies": {
+        "@radix-ui/primitive": "1.1.2",
+        "@radix-ui/react-compose-refs": "1.1.2",
+        "@radix-ui/react-context": "1.1.2",
+        "@radix-ui/react-direction": "1.1.1",
+        "@radix-ui/react-presence": "1.1.4",
+        "@radix-ui/react-primitive": "2.1.0",
+        "@radix-ui/react-roving-focus": "1.1.7",
+        "@radix-ui/react-use-controllable-state": "1.2.2",
+        "@radix-ui/react-use-previous": "1.1.1",
+        "@radix-ui/react-use-size": "1.1.1"
+      },
+      "peerDependencies": {
+        "@types/react": "*",
+        "@types/react-dom": "*",
+        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc",
+        "react-dom": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
+      },
+      "peerDependenciesMeta": {
+        "@types/react": {
+          "optional": true
+        },
+        "@types/react-dom": {
+          "optional": true
+        }
+      }
+    },
     "node_modules/@radix-ui/react-roving-focus": {
       "version": "1.1.7",
       "resolved": "https://registry.npmjs.org/@radix-ui/react-roving-focus/-/react-roving-focus-1.1.7.tgz",
@@ -2627,6 +2747,37 @@
         },
         "@types/react-dom": {
           "optional": true
+        }
+      }
+    },
+    "node_modules/@radix-ui/react-scroll-area": {
+      "version": "1.2.6",
+      "resolved": "https://registry.npmjs.org/@radix-ui/react-scroll-area/-/react-scroll-area-1.2.6.tgz",
+      "integrity": "sha512-lj8OMlpPERXrQIHlEQdlXHJoRT52AMpBrgyPYylOhXYq5e/glsEdtOc/kCQlsTdtgN5U0iDbrrolDadvektJGQ==",
+      "license": "MIT",
+      "dependencies": {
+        "@radix-ui/number": "1.1.1",
+        "@radix-ui/primitive": "1.1.2",
+        "@radix-ui/react-compose-refs": "1.1.2",
+        "@radix-ui/react-context": "1.1.2",
+        "@radix-ui/react-direction": "1.1.1",
+        "@radix-ui/react-presence": "1.1.4",
+        "@radix-ui/react-primitive": "2.1.0",
+        "@radix-ui/react-use-callback-ref": "1.1.1",
+        "@radix-ui/react-use-layout-effect": "1.1.1"
+      },
+      "peerDependencies": {
+        "@types/react": "*",
+        "@types/react-dom": "*",
+        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc",
+        "react-dom": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
+      },
+      "peerDependenciesMeta": {
+        "@types/react": {
+          "optional": true
+        },
+        "@types/react-dom": {
+          "optional": true
         }
       }
     },
@@ -2673,6 +2824,29 @@
         }
       }
     },
+    "node_modules/@radix-ui/react-separator": {
+      "version": "1.1.4",
+      "resolved": "https://registry.npmjs.org/@radix-ui/react-separator/-/react-separator-1.1.4.tgz",
+      "integrity": "sha512-2fTm6PSiUm8YPq9W0E4reYuv01EE3aFSzt8edBiXqPHshF8N9+Kymt/k0/R+F3dkY5lQyB/zPtrP82phskLi7w==",
+      "license": "MIT",
+      "dependencies": {
+        "@radix-ui/react-primitive": "2.1.0"
+      },
+      "peerDependencies": {
+        "@types/react": "*",
+        "@types/react-dom": "*",
+        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc",
+        "react-dom": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
+      },
+      "peerDependenciesMeta": {
+        "@types/react": {
+          "optional": true
+        },
+        "@types/react-dom": {
+          "optional": true
+        }
+      }
+    },
     "node_modules/@radix-ui/react-slot": {
       "version": "1.2.0",
       "resolved": "https://registry.npmjs.org/@radix-ui/react-slot/-/react-slot-1.2.0.tgz",
@@ -2688,6 +2862,65 @@
       "peerDependenciesMeta": {
         "@types/react": {
           "optional": true
+        }
+      }
+    },
+    "node_modules/@radix-ui/react-switch": {
+      "version": "1.2.2",
+      "resolved": "https://registry.npmjs.org/@radix-ui/react-switch/-/react-switch-1.2.2.tgz",
+      "integrity": "sha512-7Z8n6L+ifMIIYZ83f28qWSceUpkXuslI2FJ34+kDMTiyj91ENdpdQ7VCidrzj5JfwfZTeano/BnGBbu/jqa5rQ==",
+      "license": "MIT",
+      "dependencies": {
+        "@radix-ui/primitive": "1.1.2",
+        "@radix-ui/react-compose-refs": "1.1.2",
+        "@radix-ui/react-context": "1.1.2",
+        "@radix-ui/react-primitive": "2.1.0",
+        "@radix-ui/react-use-controllable-state": "1.2.2",
+        "@radix-ui/react-use-previous": "1.1.1",
+        "@radix-ui/react-use-size": "1.1.1"
+      },
+      "peerDependencies": {
+        "@types/react": "*",
+        "@types/react-dom": "*",
+        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc",
+        "react-dom": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
+      },
+      "peerDependenciesMeta": {
+        "@types/react": {
+          "optional": true
+        },
+        "@types/react-dom": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/@radix-ui/react-tabs": {
+      "version": "1.1.9",
+      "resolved": "https://registry.npmjs.org/@radix-ui/react-tabs/-/react-tabs-1.1.9.tgz",
+      "integrity": "sha512-KIjtwciYvquiW/wAFkELZCVnaNLBsYNhTNcvl+zfMAbMhRkcvNuCLXDDd22L0j7tagpzVh/QwbFpwAATg7ILPw==",
+      "license": "MIT",
+      "dependencies": {
+        "@radix-ui/primitive": "1.1.2",
+        "@radix-ui/react-context": "1.1.2",
+        "@radix-ui/react-direction": "1.1.1",
+        "@radix-ui/react-id": "1.1.1",
+        "@radix-ui/react-presence": "1.1.4",
+        "@radix-ui/react-primitive": "2.1.0",
+        "@radix-ui/react-roving-focus": "1.1.7",
+        "@radix-ui/react-use-controllable-state": "1.2.2"
+      },
+      "peerDependencies": {
+        "@types/react": "*",
+        "@types/react-dom": "*",
+        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc",
+        "react-dom": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
+      },
+      "peerDependenciesMeta": {
+        "@types/react": {
+          "optional": true
+        },
+        "@types/react-dom": {
+          "optional": true
         }
       }
     },
@@ -2908,6 +3141,12 @@
       "integrity": "sha512-HPwpGIzkl28mWyZqG52jiqDJ12waP11Pa1lGoiyUkIEuMLBP0oeK/C89esbXrxsky5we7dfd8U58nm0SgAWpVw==",
       "license": "MIT"
     },
+    "node_modules/@remirror/core-constants": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/@remirror/core-constants/-/core-constants-3.0.0.tgz",
+      "integrity": "sha512-42aWfPrimMfDKDi4YegyS7x+/0tlzaqwPQCULLanv3DMIlu96KTJR0fM5isWX2UViOqlGnX6YFgqWepcX+XMNg==",
+      "license": "MIT"
+    },
     "node_modules/@rtsao/scc": {
       "version": "1.1.0",
       "resolved": "https://registry.npmjs.org/@rtsao/scc/-/scc-1.1.0.tgz",
@@ -2984,6 +3223,102 @@
       "integrity": "sha512-1bnPQqSxSuc3Ii6MhBysoWCg58j97aUjuCSZrGSmDxNqtytIi0k8utUenAwTZN4V5mXXYGsVUI9zeBqy+jBOSQ==",
       "license": "MIT"
     },
+    "node_modules/@supabase/auth-js": {
+      "version": "2.69.1",
+      "resolved": "https://registry.npmjs.org/@supabase/auth-js/-/auth-js-2.69.1.tgz",
+      "integrity": "sha512-FILtt5WjCNzmReeRLq5wRs3iShwmnWgBvxHfqapC/VoljJl+W8hDAyFmf1NVw3zH+ZjZ05AKxiKxVeb0HNWRMQ==",
+      "license": "MIT",
+      "dependencies": {
+        "@supabase/node-fetch": "^2.6.14"
+      }
+    },
+    "node_modules/@supabase/functions-js": {
+      "version": "2.4.4",
+      "resolved": "https://registry.npmjs.org/@supabase/functions-js/-/functions-js-2.4.4.tgz",
+      "integrity": "sha512-WL2p6r4AXNGwop7iwvul2BvOtuJ1YQy8EbOd0dhG1oN1q8el/BIRSFCFnWAMM/vJJlHWLi4ad22sKbKr9mvjoA==",
+      "license": "MIT",
+      "dependencies": {
+        "@supabase/node-fetch": "^2.6.14"
+      }
+    },
+    "node_modules/@supabase/node-fetch": {
+      "version": "2.6.15",
+      "resolved": "https://registry.npmjs.org/@supabase/node-fetch/-/node-fetch-2.6.15.tgz",
+      "integrity": "sha512-1ibVeYUacxWYi9i0cf5efil6adJ9WRyZBLivgjs+AUpewx1F3xPi7gLgaASI2SmIQxPoCEjAsLAzKPgMJVgOUQ==",
+      "license": "MIT",
+      "dependencies": {
+        "whatwg-url": "^5.0.0"
+      },
+      "engines": {
+        "node": "4.x || >=6.0.0"
+      }
+    },
+    "node_modules/@supabase/node-fetch/node_modules/tr46": {
+      "version": "0.0.3",
+      "resolved": "https://registry.npmjs.org/tr46/-/tr46-0.0.3.tgz",
+      "integrity": "sha512-N3WMsuqV66lT30CrXNbEjx4GEwlow3v6rr4mCcv6prnfwhS01rkgyFdjPNBYd9br7LpXV1+Emh01fHnq2Gdgrw==",
+      "license": "MIT"
+    },
+    "node_modules/@supabase/node-fetch/node_modules/webidl-conversions": {
+      "version": "3.0.1",
+      "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-3.0.1.tgz",
+      "integrity": "sha512-2JAn3z8AR6rjK8Sm8orRC0h/bcl/DqL7tRPdGZ4I1CjdF+EaMLmYxBHyXuKL849eucPFhvBoxMsflfOb8kxaeQ==",
+      "license": "BSD-2-Clause"
+    },
+    "node_modules/@supabase/node-fetch/node_modules/whatwg-url": {
+      "version": "5.0.0",
+      "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-5.0.0.tgz",
+      "integrity": "sha512-saE57nupxk6v3HY35+jzBwYa0rKSy0XR8JSxZPwgLr7ys0IBzhGviA1/TUGJLmSVqs8pb9AnvICXEuOHLprYTw==",
+      "license": "MIT",
+      "dependencies": {
+        "tr46": "~0.0.3",
+        "webidl-conversions": "^3.0.0"
+      }
+    },
+    "node_modules/@supabase/postgrest-js": {
+      "version": "1.19.4",
+      "resolved": "https://registry.npmjs.org/@supabase/postgrest-js/-/postgrest-js-1.19.4.tgz",
+      "integrity": "sha512-O4soKqKtZIW3olqmbXXbKugUtByD2jPa8kL2m2c1oozAO11uCcGrRhkZL0kVxjBLrXHE0mdSkFsMj7jDSfyNpw==",
+      "license": "MIT",
+      "dependencies": {
+        "@supabase/node-fetch": "^2.6.14"
+      }
+    },
+    "node_modules/@supabase/realtime-js": {
+      "version": "2.11.2",
+      "resolved": "https://registry.npmjs.org/@supabase/realtime-js/-/realtime-js-2.11.2.tgz",
+      "integrity": "sha512-u/XeuL2Y0QEhXSoIPZZwR6wMXgB+RQbJzG9VErA3VghVt7uRfSVsjeqd7m5GhX3JR6dM/WRmLbVR8URpDWG4+w==",
+      "license": "MIT",
+      "dependencies": {
+        "@supabase/node-fetch": "^2.6.14",
+        "@types/phoenix": "^1.5.4",
+        "@types/ws": "^8.5.10",
+        "ws": "^8.18.0"
+      }
+    },
+    "node_modules/@supabase/storage-js": {
+      "version": "2.7.1",
+      "resolved": "https://registry.npmjs.org/@supabase/storage-js/-/storage-js-2.7.1.tgz",
+      "integrity": "sha512-asYHcyDR1fKqrMpytAS1zjyEfvxuOIp1CIXX7ji4lHHcJKqyk+sLl/Vxgm4sN6u8zvuUtae9e4kDxQP2qrwWBA==",
+      "license": "MIT",
+      "dependencies": {
+        "@supabase/node-fetch": "^2.6.14"
+      }
+    },
+    "node_modules/@supabase/supabase-js": {
+      "version": "2.49.4",
+      "resolved": "https://registry.npmjs.org/@supabase/supabase-js/-/supabase-js-2.49.4.tgz",
+      "integrity": "sha512-jUF0uRUmS8BKt37t01qaZ88H9yV1mbGYnqLeuFWLcdV+x1P4fl0yP9DGtaEhFPZcwSom7u16GkLEH9QJZOqOkw==",
+      "license": "MIT",
+      "dependencies": {
+        "@supabase/auth-js": "2.69.1",
+        "@supabase/functions-js": "2.4.4",
+        "@supabase/node-fetch": "2.6.15",
+        "@supabase/postgrest-js": "1.19.4",
+        "@supabase/realtime-js": "2.11.2",
+        "@supabase/storage-js": "2.7.1"
+      }
+    },
     "node_modules/@swc/counter": {
       "version": "0.1.3",
       "resolved": "https://registry.npmjs.org/@swc/counter/-/counter-0.1.3.tgz",
@@ -3282,6 +3617,447 @@
         "tailwindcss": ">=3.0.0 || insiders || >=4.0.0-alpha.20 || >=4.0.0-beta.1"
       }
     },
+    "node_modules/@tiptap/core": {
+      "version": "2.11.7",
+      "resolved": "https://registry.npmjs.org/@tiptap/core/-/core-2.11.7.tgz",
+      "integrity": "sha512-zN+NFFxLsxNEL8Qioc+DL6b8+Tt2bmRbXH22Gk6F6nD30x83eaUSFlSv3wqvgyCq3I1i1NO394So+Agmayx6rQ==",
+      "license": "MIT",
+      "funding": {
+        "type": "github",
+        "url": "https://github.com/sponsors/ueberdosis"
+      },
+      "peerDependencies": {
+        "@tiptap/pm": "^2.7.0"
+      }
+    },
+    "node_modules/@tiptap/extension-blockquote": {
+      "version": "2.11.7",
+      "resolved": "https://registry.npmjs.org/@tiptap/extension-blockquote/-/extension-blockquote-2.11.7.tgz",
+      "integrity": "sha512-liD8kWowl3CcYCG9JQlVx1eSNc/aHlt6JpVsuWvzq6J8APWX693i3+zFqyK2eCDn0k+vW62muhSBe3u09hA3Zw==",
+      "license": "MIT",
+      "funding": {
+        "type": "github",
+        "url": "https://github.com/sponsors/ueberdosis"
+      },
+      "peerDependencies": {
+        "@tiptap/core": "^2.7.0"
+      }
+    },
+    "node_modules/@tiptap/extension-bold": {
+      "version": "2.11.7",
+      "resolved": "https://registry.npmjs.org/@tiptap/extension-bold/-/extension-bold-2.11.7.tgz",
+      "integrity": "sha512-VTR3JlldBixXbjpLTFme/Bxf1xeUgZZY3LTlt5JDlCW3CxO7k05CIa+kEZ8LXpog5annytZDUVtWqxrNjmsuHQ==",
+      "license": "MIT",
+      "funding": {
+        "type": "github",
+        "url": "https://github.com/sponsors/ueberdosis"
+      },
+      "peerDependencies": {
+        "@tiptap/core": "^2.7.0"
+      }
+    },
+    "node_modules/@tiptap/extension-bubble-menu": {
+      "version": "2.11.7",
+      "resolved": "https://registry.npmjs.org/@tiptap/extension-bubble-menu/-/extension-bubble-menu-2.11.7.tgz",
+      "integrity": "sha512-0vYqSUSSap3kk3/VT4tFE1/6StX70I3/NKQ4J68ZSFgkgyB3ZVlYv7/dY3AkEukjsEp3yN7m8Gw8ei2eEwyzwg==",
+      "license": "MIT",
+      "dependencies": {
+        "tippy.js": "^6.3.7"
+      },
+      "funding": {
+        "type": "github",
+        "url": "https://github.com/sponsors/ueberdosis"
+      },
+      "peerDependencies": {
+        "@tiptap/core": "^2.7.0",
+        "@tiptap/pm": "^2.7.0"
+      }
+    },
+    "node_modules/@tiptap/extension-bullet-list": {
+      "version": "2.11.7",
+      "resolved": "https://registry.npmjs.org/@tiptap/extension-bullet-list/-/extension-bullet-list-2.11.7.tgz",
+      "integrity": "sha512-WbPogE2/Q3e3/QYgbT1Sj4KQUfGAJNc5pvb7GrUbvRQsAh7HhtuO8hqdDwH8dEdD/cNUehgt17TO7u8qV6qeBw==",
+      "license": "MIT",
+      "funding": {
+        "type": "github",
+        "url": "https://github.com/sponsors/ueberdosis"
+      },
+      "peerDependencies": {
+        "@tiptap/core": "^2.7.0"
+      }
+    },
+    "node_modules/@tiptap/extension-code": {
+      "version": "2.11.7",
+      "resolved": "https://registry.npmjs.org/@tiptap/extension-code/-/extension-code-2.11.7.tgz",
+      "integrity": "sha512-VpPO1Uy/eF4hYOpohS/yMOcE1C07xmMj0/D989D9aS1x95jWwUVrSkwC+PlWMUBx9PbY2NRsg1ZDwVvlNKZ6yQ==",
+      "license": "MIT",
+      "funding": {
+        "type": "github",
+        "url": "https://github.com/sponsors/ueberdosis"
+      },
+      "peerDependencies": {
+        "@tiptap/core": "^2.7.0"
+      }
+    },
+    "node_modules/@tiptap/extension-code-block": {
+      "version": "2.11.7",
+      "resolved": "https://registry.npmjs.org/@tiptap/extension-code-block/-/extension-code-block-2.11.7.tgz",
+      "integrity": "sha512-To/y/2H04VWqiANy53aXjV7S6fA86c2759RsH1hTIe57jA1KyE7I5tlAofljOLZK/covkGmPeBddSPHGJbz++Q==",
+      "license": "MIT",
+      "funding": {
+        "type": "github",
+        "url": "https://github.com/sponsors/ueberdosis"
+      },
+      "peerDependencies": {
+        "@tiptap/core": "^2.7.0",
+        "@tiptap/pm": "^2.7.0"
+      }
+    },
+    "node_modules/@tiptap/extension-document": {
+      "version": "2.11.7",
+      "resolved": "https://registry.npmjs.org/@tiptap/extension-document/-/extension-document-2.11.7.tgz",
+      "integrity": "sha512-95ouJXPjdAm9+VBRgFo4lhDoMcHovyl/awORDI8gyEn0Rdglt+ZRZYoySFzbVzer9h0cre+QdIwr9AIzFFbfdA==",
+      "license": "MIT",
+      "funding": {
+        "type": "github",
+        "url": "https://github.com/sponsors/ueberdosis"
+      },
+      "peerDependencies": {
+        "@tiptap/core": "^2.7.0"
+      }
+    },
+    "node_modules/@tiptap/extension-dropcursor": {
+      "version": "2.11.7",
+      "resolved": "https://registry.npmjs.org/@tiptap/extension-dropcursor/-/extension-dropcursor-2.11.7.tgz",
+      "integrity": "sha512-63mL+nxQILizsr5NbmgDeOjFEWi34BLt7evwL6UUZEVM15K8V1G8pD9Y0kCXrZYpHWz0tqFRXdrhDz0Ppu8oVw==",
+      "license": "MIT",
+      "funding": {
+        "type": "github",
+        "url": "https://github.com/sponsors/ueberdosis"
+      },
+      "peerDependencies": {
+        "@tiptap/core": "^2.7.0",
+        "@tiptap/pm": "^2.7.0"
+      }
+    },
+    "node_modules/@tiptap/extension-floating-menu": {
+      "version": "2.11.7",
+      "resolved": "https://registry.npmjs.org/@tiptap/extension-floating-menu/-/extension-floating-menu-2.11.7.tgz",
+      "integrity": "sha512-DG54WoUu2vxHRVzKZiR5I5RMOYj45IlxQMkBAx1wjS0ch41W8DUYEeipvMMjCeKtEI+emz03xYUcOAP9LRmg+w==",
+      "license": "MIT",
+      "dependencies": {
+        "tippy.js": "^6.3.7"
+      },
+      "funding": {
+        "type": "github",
+        "url": "https://github.com/sponsors/ueberdosis"
+      },
+      "peerDependencies": {
+        "@tiptap/core": "^2.7.0",
+        "@tiptap/pm": "^2.7.0"
+      }
+    },
+    "node_modules/@tiptap/extension-gapcursor": {
+      "version": "2.11.7",
+      "resolved": "https://registry.npmjs.org/@tiptap/extension-gapcursor/-/extension-gapcursor-2.11.7.tgz",
+      "integrity": "sha512-EceesmPG7FyjXZ8EgeJPUov9G1mAf2AwdypxBNH275g6xd5dmU/KvjoFZjmQ0X1ve7mS+wNupVlGxAEUYoveew==",
+      "license": "MIT",
+      "funding": {
+        "type": "github",
+        "url": "https://github.com/sponsors/ueberdosis"
+      },
+      "peerDependencies": {
+        "@tiptap/core": "^2.7.0",
+        "@tiptap/pm": "^2.7.0"
+      }
+    },
+    "node_modules/@tiptap/extension-hard-break": {
+      "version": "2.11.7",
+      "resolved": "https://registry.npmjs.org/@tiptap/extension-hard-break/-/extension-hard-break-2.11.7.tgz",
+      "integrity": "sha512-zTkZSA6q+F5sLOdCkiC2+RqJQN0zdsJqvFIOVFL/IDVOnq6PZO5THzwRRLvOSnJJl3edRQCl/hUgS0L5sTInGQ==",
+      "license": "MIT",
+      "funding": {
+        "type": "github",
+        "url": "https://github.com/sponsors/ueberdosis"
+      },
+      "peerDependencies": {
+        "@tiptap/core": "^2.7.0"
+      }
+    },
+    "node_modules/@tiptap/extension-heading": {
+      "version": "2.11.7",
+      "resolved": "https://registry.npmjs.org/@tiptap/extension-heading/-/extension-heading-2.11.7.tgz",
+      "integrity": "sha512-8kWh7y4Rd2fwxfWOhFFWncHdkDkMC1Z60yzIZWjIu72+6yQxvo8w3yeb7LI7jER4kffbMmadgcfhCHC/fkObBA==",
+      "license": "MIT",
+      "funding": {
+        "type": "github",
+        "url": "https://github.com/sponsors/ueberdosis"
+      },
+      "peerDependencies": {
+        "@tiptap/core": "^2.7.0"
+      }
+    },
+    "node_modules/@tiptap/extension-history": {
+      "version": "2.11.7",
+      "resolved": "https://registry.npmjs.org/@tiptap/extension-history/-/extension-history-2.11.7.tgz",
+      "integrity": "sha512-Cu5x3aS13I040QSRoLdd+w09G4OCVfU+azpUqxufZxeNs9BIJC+0jowPLeOxKDh6D5GGT2A8sQtxc6a/ssbs8g==",
+      "license": "MIT",
+      "funding": {
+        "type": "github",
+        "url": "https://github.com/sponsors/ueberdosis"
+      },
+      "peerDependencies": {
+        "@tiptap/core": "^2.7.0",
+        "@tiptap/pm": "^2.7.0"
+      }
+    },
+    "node_modules/@tiptap/extension-horizontal-rule": {
+      "version": "2.11.7",
+      "resolved": "https://registry.npmjs.org/@tiptap/extension-horizontal-rule/-/extension-horizontal-rule-2.11.7.tgz",
+      "integrity": "sha512-uVmQwD2dzZ5xwmvUlciy0ItxOdOfQjH6VLmu80zyJf8Yu7mvwP8JyxoXUX0vd1xHpwAhgQ9/ozjIWYGIw79DPQ==",
+      "license": "MIT",
+      "funding": {
+        "type": "github",
+        "url": "https://github.com/sponsors/ueberdosis"
+      },
+      "peerDependencies": {
+        "@tiptap/core": "^2.7.0",
+        "@tiptap/pm": "^2.7.0"
+      }
+    },
+    "node_modules/@tiptap/extension-image": {
+      "version": "2.11.7",
+      "resolved": "https://registry.npmjs.org/@tiptap/extension-image/-/extension-image-2.11.7.tgz",
+      "integrity": "sha512-YvCmTDB7Oo+A56tR4S/gcNaYpqU4DDlSQcRp5IQvmQV5EekSe0lnEazGDoqOCwsit9qQhj4MPQJhKrnaWrJUrg==",
+      "license": "MIT",
+      "funding": {
+        "type": "github",
+        "url": "https://github.com/sponsors/ueberdosis"
+      },
+      "peerDependencies": {
+        "@tiptap/core": "^2.7.0"
+      }
+    },
+    "node_modules/@tiptap/extension-italic": {
+      "version": "2.11.7",
+      "resolved": "https://registry.npmjs.org/@tiptap/extension-italic/-/extension-italic-2.11.7.tgz",
+      "integrity": "sha512-r985bkQfG0HMpmCU0X0p/Xe7U1qgRm2mxvcp6iPCuts2FqxaCoyfNZ8YnMsgVK1mRhM7+CQ5SEg2NOmQNtHvPw==",
+      "license": "MIT",
+      "funding": {
+        "type": "github",
+        "url": "https://github.com/sponsors/ueberdosis"
+      },
+      "peerDependencies": {
+        "@tiptap/core": "^2.7.0"
+      }
+    },
+    "node_modules/@tiptap/extension-link": {
+      "version": "2.11.7",
+      "resolved": "https://registry.npmjs.org/@tiptap/extension-link/-/extension-link-2.11.7.tgz",
+      "integrity": "sha512-qKIowE73aAUrnQCIifYP34xXOHOsZw46cT/LBDlb0T60knVfQoKVE4ku08fJzAV+s6zqgsaaZ4HVOXkQYLoW7g==",
+      "license": "MIT",
+      "dependencies": {
+        "linkifyjs": "^4.2.0"
+      },
+      "funding": {
+        "type": "github",
+        "url": "https://github.com/sponsors/ueberdosis"
+      },
+      "peerDependencies": {
+        "@tiptap/core": "^2.7.0",
+        "@tiptap/pm": "^2.7.0"
+      }
+    },
+    "node_modules/@tiptap/extension-list-item": {
+      "version": "2.11.7",
+      "resolved": "https://registry.npmjs.org/@tiptap/extension-list-item/-/extension-list-item-2.11.7.tgz",
+      "integrity": "sha512-6ikh7Y+qAbkSuIHXPIINqfzmWs5uIGrylihdZ9adaIyvrN1KSnWIqrZIk/NcZTg5YFIJlXrnGSRSjb/QM3WUhw==",
+      "license": "MIT",
+      "funding": {
+        "type": "github",
+        "url": "https://github.com/sponsors/ueberdosis"
+      },
+      "peerDependencies": {
+        "@tiptap/core": "^2.7.0"
+      }
+    },
+    "node_modules/@tiptap/extension-ordered-list": {
+      "version": "2.11.7",
+      "resolved": "https://registry.npmjs.org/@tiptap/extension-ordered-list/-/extension-ordered-list-2.11.7.tgz",
+      "integrity": "sha512-bLGCHDMB0vbJk7uu8bRg8vES3GsvxkX7Cgjgm/6xysHFbK98y0asDtNxkW1VvuRreNGz4tyB6vkcVCfrxl4jKw==",
+      "license": "MIT",
+      "funding": {
+        "type": "github",
+        "url": "https://github.com/sponsors/ueberdosis"
+      },
+      "peerDependencies": {
+        "@tiptap/core": "^2.7.0"
+      }
+    },
+    "node_modules/@tiptap/extension-paragraph": {
+      "version": "2.11.7",
+      "resolved": "https://registry.npmjs.org/@tiptap/extension-paragraph/-/extension-paragraph-2.11.7.tgz",
+      "integrity": "sha512-Pl3B4q6DJqTvvAdraqZaNP9Hh0UWEHL5nNdxhaRNuhKaUo7lq8wbDSIxIW3lvV0lyCs0NfyunkUvSm1CXb6d4Q==",
+      "license": "MIT",
+      "funding": {
+        "type": "github",
+        "url": "https://github.com/sponsors/ueberdosis"
+      },
+      "peerDependencies": {
+        "@tiptap/core": "^2.7.0"
+      }
+    },
+    "node_modules/@tiptap/extension-strike": {
+      "version": "2.11.7",
+      "resolved": "https://registry.npmjs.org/@tiptap/extension-strike/-/extension-strike-2.11.7.tgz",
+      "integrity": "sha512-D6GYiW9F24bvAY7XMOARNZbC8YGPzdzWdXd8VOOJABhf4ynMi/oW4NNiko+kZ67jn3EGaKoz32VMJzNQgYi1HA==",
+      "license": "MIT",
+      "funding": {
+        "type": "github",
+        "url": "https://github.com/sponsors/ueberdosis"
+      },
+      "peerDependencies": {
+        "@tiptap/core": "^2.7.0"
+      }
+    },
+    "node_modules/@tiptap/extension-text": {
+      "version": "2.11.7",
+      "resolved": "https://registry.npmjs.org/@tiptap/extension-text/-/extension-text-2.11.7.tgz",
+      "integrity": "sha512-wObCn8qZkIFnXTLvBP+X8KgaEvTap/FJ/i4hBMfHBCKPGDx99KiJU6VIbDXG8d5ZcFZE0tOetK1pP5oI7qgMlQ==",
+      "license": "MIT",
+      "funding": {
+        "type": "github",
+        "url": "https://github.com/sponsors/ueberdosis"
+      },
+      "peerDependencies": {
+        "@tiptap/core": "^2.7.0"
+      }
+    },
+    "node_modules/@tiptap/extension-text-align": {
+      "version": "2.11.7",
+      "resolved": "https://registry.npmjs.org/@tiptap/extension-text-align/-/extension-text-align-2.11.7.tgz",
+      "integrity": "sha512-3M8zd9ROADXazVNpgR6Ejs1evSvBveN36qN4GgV71GqrNlTcjqYgQcXFLQrsd2hnE+aXir8/8bLJ+aaJXDninA==",
+      "license": "MIT",
+      "funding": {
+        "type": "github",
+        "url": "https://github.com/sponsors/ueberdosis"
+      },
+      "peerDependencies": {
+        "@tiptap/core": "^2.7.0"
+      }
+    },
+    "node_modules/@tiptap/extension-text-style": {
+      "version": "2.11.7",
+      "resolved": "https://registry.npmjs.org/@tiptap/extension-text-style/-/extension-text-style-2.11.7.tgz",
+      "integrity": "sha512-LHO6DBg/9SkCQFdWlVfw9nolUmw+Cid94WkTY+7IwrpyG2+ZGQxnKpCJCKyeaFNbDoYAtvu0vuTsSXeCkgShcA==",
+      "license": "MIT",
+      "funding": {
+        "type": "github",
+        "url": "https://github.com/sponsors/ueberdosis"
+      },
+      "peerDependencies": {
+        "@tiptap/core": "^2.7.0"
+      }
+    },
+    "node_modules/@tiptap/extension-underline": {
+      "version": "2.11.7",
+      "resolved": "https://registry.npmjs.org/@tiptap/extension-underline/-/extension-underline-2.11.7.tgz",
+      "integrity": "sha512-NtoQw6PGijOAtXC6G+0Aq0/Z5wwEjPhNHs8nsjXogfWIgaj/aI4/zfBnA06eI3WT+emMYQTl0fTc4CUPnLVU8g==",
+      "license": "MIT",
+      "funding": {
+        "type": "github",
+        "url": "https://github.com/sponsors/ueberdosis"
+      },
+      "peerDependencies": {
+        "@tiptap/core": "^2.7.0"
+      }
+    },
+    "node_modules/@tiptap/pm": {
+      "version": "2.11.7",
+      "resolved": "https://registry.npmjs.org/@tiptap/pm/-/pm-2.11.7.tgz",
+      "integrity": "sha512-7gEEfz2Q6bYKXM07vzLUD0vqXFhC5geWRA6LCozTiLdVFDdHWiBrvb2rtkL5T7mfLq03zc1QhH7rI3F6VntOEA==",
+      "license": "MIT",
+      "dependencies": {
+        "prosemirror-changeset": "^2.2.1",
+        "prosemirror-collab": "^1.3.1",
+        "prosemirror-commands": "^1.6.2",
+        "prosemirror-dropcursor": "^1.8.1",
+        "prosemirror-gapcursor": "^1.3.2",
+        "prosemirror-history": "^1.4.1",
+        "prosemirror-inputrules": "^1.4.0",
+        "prosemirror-keymap": "^1.2.2",
+        "prosemirror-markdown": "^1.13.1",
+        "prosemirror-menu": "^1.2.4",
+        "prosemirror-model": "^1.23.0",
+        "prosemirror-schema-basic": "^1.2.3",
+        "prosemirror-schema-list": "^1.4.1",
+        "prosemirror-state": "^1.4.3",
+        "prosemirror-tables": "^1.6.4",
+        "prosemirror-trailing-node": "^3.0.0",
+        "prosemirror-transform": "^1.10.2",
+        "prosemirror-view": "^1.37.0"
+      },
+      "funding": {
+        "type": "github",
+        "url": "https://github.com/sponsors/ueberdosis"
+      }
+    },
+    "node_modules/@tiptap/react": {
+      "version": "2.11.7",
+      "resolved": "https://registry.npmjs.org/@tiptap/react/-/react-2.11.7.tgz",
+      "integrity": "sha512-gQZEUkAoPsBptnB4T2gAtiUxswjVGhfsM9vOElQco+b11DYmy110T2Zuhg+2YGvB/CG3RoWJx34808P0FX1ijA==",
+      "license": "MIT",
+      "dependencies": {
+        "@tiptap/extension-bubble-menu": "^2.11.7",
+        "@tiptap/extension-floating-menu": "^2.11.7",
+        "@types/use-sync-external-store": "^0.0.6",
+        "fast-deep-equal": "^3",
+        "use-sync-external-store": "^1"
+      },
+      "funding": {
+        "type": "github",
+        "url": "https://github.com/sponsors/ueberdosis"
+      },
+      "peerDependencies": {
+        "@tiptap/core": "^2.7.0",
+        "@tiptap/pm": "^2.7.0",
+        "react": "^17.0.0 || ^18.0.0 || ^19.0.0",
+        "react-dom": "^17.0.0 || ^18.0.0 || ^19.0.0"
+      }
+    },
+    "node_modules/@tiptap/starter-kit": {
+      "version": "2.11.7",
+      "resolved": "https://registry.npmjs.org/@tiptap/starter-kit/-/starter-kit-2.11.7.tgz",
+      "integrity": "sha512-K+q51KwNU/l0kqRuV5e1824yOLVftj6kGplGQLvJG56P7Rb2dPbM/JeaDbxQhnHT/KDGamG0s0Po0M3pPY163A==",
+      "license": "MIT",
+      "dependencies": {
+        "@tiptap/core": "^2.11.7",
+        "@tiptap/extension-blockquote": "^2.11.7",
+        "@tiptap/extension-bold": "^2.11.7",
+        "@tiptap/extension-bullet-list": "^2.11.7",
+        "@tiptap/extension-code": "^2.11.7",
+        "@tiptap/extension-code-block": "^2.11.7",
+        "@tiptap/extension-document": "^2.11.7",
+        "@tiptap/extension-dropcursor": "^2.11.7",
+        "@tiptap/extension-gapcursor": "^2.11.7",
+        "@tiptap/extension-hard-break": "^2.11.7",
+        "@tiptap/extension-heading": "^2.11.7",
+        "@tiptap/extension-history": "^2.11.7",
+        "@tiptap/extension-horizontal-rule": "^2.11.7",
+        "@tiptap/extension-italic": "^2.11.7",
+        "@tiptap/extension-list-item": "^2.11.7",
+        "@tiptap/extension-ordered-list": "^2.11.7",
+        "@tiptap/extension-paragraph": "^2.11.7",
+        "@tiptap/extension-strike": "^2.11.7",
+        "@tiptap/extension-text": "^2.11.7",
+        "@tiptap/extension-text-style": "^2.11.7",
+        "@tiptap/pm": "^2.11.7"
+      },
+      "funding": {
+        "type": "github",
+        "url": "https://github.com/sponsors/ueberdosis"
+      }
+    },
     "node_modules/@tybys/wasm-util": {
       "version": "0.9.0",
       "resolved": "https://registry.npmjs.org/@tybys/wasm-util/-/wasm-util-0.9.0.tgz",
@@ -3343,6 +4119,15 @@
         "@types/ms": "*"
       }
     },
+    "node_modules/@types/dompurify": {
+      "version": "3.0.5",
+      "resolved": "https://registry.npmjs.org/@types/dompurify/-/dompurify-3.0.5.tgz",
+      "integrity": "sha512-1Wg0g3BtQF7sSb27fJQAKck1HECM6zV1EB66j8JH9i3LCjYabJa0FSdiSgsD5K/RbrsR0SiraKacLB+T8ZVYAg==",
+      "license": "MIT",
+      "dependencies": {
+        "@types/trusted-types": "*"
+      }
+    },
     "node_modules/@types/estree": {
       "version": "1.0.7",
       "resolved": "https://registry.npmjs.org/@types/estree/-/estree-1.0.7.tgz",
@@ -3424,6 +4209,22 @@
       "dev": true,
       "license": "MIT"
     },
+    "node_modules/@types/linkify-it": {
+      "version": "5.0.0",
+      "resolved": "https://registry.npmjs.org/@types/linkify-it/-/linkify-it-5.0.0.tgz",
+      "integrity": "sha512-sVDA58zAw4eWAffKOaQH5/5j3XeayukzDk+ewSsnv3p4yJEZHCCzMDiZM8e0OUrRvmpGZ85jf4yDHkHsgBNr9Q==",
+      "license": "MIT"
+    },
+    "node_modules/@types/markdown-it": {
+      "version": "14.1.2",
+      "resolved": "https://registry.npmjs.org/@types/markdown-it/-/markdown-it-14.1.2.tgz",
+      "integrity": "sha512-promo4eFwuiW+TfGxhi+0x3czqTYJkG8qB17ZUJiVF10Xm7NLVRSLUsfRTU/6h1e24VvRnXCx+hG7li58lkzog==",
+      "license": "MIT",
+      "dependencies": {
+        "@types/linkify-it": "^5",
+        "@types/mdurl": "^2"
+      }
+    },
     "node_modules/@types/mdast": {
       "version": "4.0.4",
       "resolved": "https://registry.npmjs.org/@types/mdast/-/mdast-4.0.4.tgz",
@@ -3433,6 +4234,12 @@
         "@types/unist": "*"
       }
     },
+    "node_modules/@types/mdurl": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/@types/mdurl/-/mdurl-2.0.0.tgz",
+      "integrity": "sha512-RGdgjQUZba5p6QEFAVx2OGb8rQDL/cPRG7GiedRzMcJ1tYnUANBncjbSB1NRGwbvjcPeikRABz2nshyPk1bhWg==",
+      "license": "MIT"
+    },
     "node_modules/@types/ms": {
       "version": "2.1.0",
       "resolved": "https://registry.npmjs.org/@types/ms/-/ms-2.1.0.tgz",
@@ -3448,6 +4255,12 @@
         "undici-types": "~6.19.2"
       }
     },
+    "node_modules/@types/phoenix": {
+      "version": "1.6.6",
+      "resolved": "https://registry.npmjs.org/@types/phoenix/-/phoenix-1.6.6.tgz",
+      "integrity": "sha512-PIzZZlEppgrpoT2QgbnDU+MMzuR6BbCjllj0bM70lWoejMeNJAxCchxnv7J3XFkI8MpygtRpzXrIlmWUBclP5A==",
+      "license": "MIT"
+    },
     "node_modules/@types/react": {
       "version": "19.1.2",
       "resolved": "https://registry.npmjs.org/@types/react/-/react-19.1.2.tgz",
@@ -3477,14 +4290,26 @@
       "version": "2.0.7",
       "resolved": "https://registry.npmjs.org/@types/trusted-types/-/trusted-types-2.0.7.tgz",
       "integrity": "sha512-ScaPdn1dQczgbl0QFTeTOmVHFULt394XJgOQNoyVhZ6r2vLnMLJfBPd53SB52T/3G36VI1/g2MZaX0cwDuXsfw==",
-      "license": "MIT",
-      "optional": true
+      "license": "MIT"
     },
     "node_modules/@types/unist": {
       "version": "3.0.3",
       "resolved": "https://registry.npmjs.org/@types/unist/-/unist-3.0.3.tgz",
       "integrity": "sha512-ko/gIFJRv177XgZsZcBwnqJN5x/Gien8qNOn0D5bQU/zAzVf9Zt3BlcUiLqhV9y4ARk0GbT3tnUiPNgnTXzc/Q==",
       "license": "MIT"
+    },
+    "node_modules/@types/use-sync-external-store": {
+      "version": "0.0.6",
+      "resolved": "https://registry.npmjs.org/@types/use-sync-external-store/-/use-sync-external-store-0.0.6.tgz",
+      "integrity": "sha512-zFDAD+tlpf2r4asuHEj0XH6pY6i0g5NeAHPn+15wk3BV6JA69eERFXC1gyGThDkVa1zCyKr5jox1+2LbV/AMLg==",
+      "license": "MIT"
+    },
+    "node_modules/@types/validator": {
+      "version": "13.15.0",
+      "resolved": "https://registry.npmjs.org/@types/validator/-/validator-13.15.0.tgz",
+      "integrity": "sha512-nh7nrWhLr6CBq9ldtw0wx+z9wKnnv/uTVLA9g/3/TcOYxbpOSZE+MhKPmWqU+K0NvThjhv12uD8MuqijB0WzEA==",
+      "dev": true,
+      "license": "MIT"
     },
     "node_modules/@types/webidl-conversions": {
       "version": "7.0.3",
@@ -3501,6 +4326,15 @@
         "@types/webidl-conversions": "*"
       }
     },
+    "node_modules/@types/ws": {
+      "version": "8.18.1",
+      "resolved": "https://registry.npmjs.org/@types/ws/-/ws-8.18.1.tgz",
+      "integrity": "sha512-ThVF6DCVhA8kUGy+aazFQ4kXQ7E1Ty7A3ypFOe0IcJV8O/M511G99AW24irKrW56Wt44yG9+ij8FaqoBGkuBXg==",
+      "license": "MIT",
+      "dependencies": {
+        "@types/node": "*"
+      }
+    },
     "node_modules/@types/yargs": {
       "version": "17.0.33",
       "resolved": "https://registry.npmjs.org/@types/yargs/-/yargs-17.0.33.tgz",
@@ -3517,17 +4351,17 @@
       "license": "MIT"
     },
     "node_modules/@typescript-eslint/eslint-plugin": {
-      "version": "8.30.1",
-      "resolved": "https://registry.npmjs.org/@typescript-eslint/eslint-plugin/-/eslint-plugin-8.30.1.tgz",
-      "integrity": "sha512-v+VWphxMjn+1t48/jO4t950D6KR8JaJuNXzi33Ve6P8sEmPr5k6CEXjdGwT6+LodVnEa91EQCtwjWNUCPweo+Q==",
+      "version": "8.31.1",
+      "resolved": "https://registry.npmjs.org/@typescript-eslint/eslint-plugin/-/eslint-plugin-8.31.1.tgz",
+      "integrity": "sha512-oUlH4h1ABavI4F0Xnl8/fOtML/eu8nI2A1nYd+f+55XI0BLu+RIqKoCiZKNo6DtqZBEQm5aNKA20G3Z5w3R6GQ==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
         "@eslint-community/regexpp": "^4.10.0",
-        "@typescript-eslint/scope-manager": "8.30.1",
-        "@typescript-eslint/type-utils": "8.30.1",
-        "@typescript-eslint/utils": "8.30.1",
-        "@typescript-eslint/visitor-keys": "8.30.1",
+        "@typescript-eslint/scope-manager": "8.31.1",
+        "@typescript-eslint/type-utils": "8.31.1",
+        "@typescript-eslint/utils": "8.31.1",
+        "@typescript-eslint/visitor-keys": "8.31.1",
         "graphemer": "^1.4.0",
         "ignore": "^5.3.1",
         "natural-compare": "^1.4.0",
@@ -3547,16 +4381,16 @@
       }
     },
     "node_modules/@typescript-eslint/parser": {
-      "version": "8.30.1",
-      "resolved": "https://registry.npmjs.org/@typescript-eslint/parser/-/parser-8.30.1.tgz",
-      "integrity": "sha512-H+vqmWwT5xoNrXqWs/fesmssOW70gxFlgcMlYcBaWNPIEWDgLa4W9nkSPmhuOgLnXq9QYgkZ31fhDyLhleCsAg==",
+      "version": "8.31.1",
+      "resolved": "https://registry.npmjs.org/@typescript-eslint/parser/-/parser-8.31.1.tgz",
+      "integrity": "sha512-oU/OtYVydhXnumd0BobL9rkJg7wFJ9bFFPmSmB/bf/XWN85hlViji59ko6bSKBXyseT9V8l+CN1nwmlbiN0G7Q==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
-        "@typescript-eslint/scope-manager": "8.30.1",
-        "@typescript-eslint/types": "8.30.1",
-        "@typescript-eslint/typescript-estree": "8.30.1",
-        "@typescript-eslint/visitor-keys": "8.30.1",
+        "@typescript-eslint/scope-manager": "8.31.1",
+        "@typescript-eslint/types": "8.31.1",
+        "@typescript-eslint/typescript-estree": "8.31.1",
+        "@typescript-eslint/visitor-keys": "8.31.1",
         "debug": "^4.3.4"
       },
       "engines": {
@@ -3572,14 +4406,14 @@
       }
     },
     "node_modules/@typescript-eslint/scope-manager": {
-      "version": "8.30.1",
-      "resolved": "https://registry.npmjs.org/@typescript-eslint/scope-manager/-/scope-manager-8.30.1.tgz",
-      "integrity": "sha512-+C0B6ChFXZkuaNDl73FJxRYT0G7ufVPOSQkqkpM/U198wUwUFOtgo1k/QzFh1KjpBitaK7R1tgjVz6o9HmsRPg==",
+      "version": "8.31.1",
+      "resolved": "https://registry.npmjs.org/@typescript-eslint/scope-manager/-/scope-manager-8.31.1.tgz",
+      "integrity": "sha512-BMNLOElPxrtNQMIsFHE+3P0Yf1z0dJqV9zLdDxN/xLlWMlXK/ApEsVEKzpizg9oal8bAT5Sc7+ocal7AC1HCVw==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
-        "@typescript-eslint/types": "8.30.1",
-        "@typescript-eslint/visitor-keys": "8.30.1"
+        "@typescript-eslint/types": "8.31.1",
+        "@typescript-eslint/visitor-keys": "8.31.1"
       },
       "engines": {
         "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
@@ -3590,14 +4424,14 @@
       }
     },
     "node_modules/@typescript-eslint/type-utils": {
-      "version": "8.30.1",
-      "resolved": "https://registry.npmjs.org/@typescript-eslint/type-utils/-/type-utils-8.30.1.tgz",
-      "integrity": "sha512-64uBF76bfQiJyHgZISC7vcNz3adqQKIccVoKubyQcOnNcdJBvYOILV1v22Qhsw3tw3VQu5ll8ND6hycgAR5fEA==",
+      "version": "8.31.1",
+      "resolved": "https://registry.npmjs.org/@typescript-eslint/type-utils/-/type-utils-8.31.1.tgz",
+      "integrity": "sha512-fNaT/m9n0+dpSp8G/iOQ05GoHYXbxw81x+yvr7TArTuZuCA6VVKbqWYVZrV5dVagpDTtj/O8k5HBEE/p/HM5LA==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
-        "@typescript-eslint/typescript-estree": "8.30.1",
-        "@typescript-eslint/utils": "8.30.1",
+        "@typescript-eslint/typescript-estree": "8.31.1",
+        "@typescript-eslint/utils": "8.31.1",
         "debug": "^4.3.4",
         "ts-api-utils": "^2.0.1"
       },
@@ -3614,9 +4448,9 @@
       }
     },
     "node_modules/@typescript-eslint/types": {
-      "version": "8.30.1",
-      "resolved": "https://registry.npmjs.org/@typescript-eslint/types/-/types-8.30.1.tgz",
-      "integrity": "sha512-81KawPfkuulyWo5QdyG/LOKbspyyiW+p4vpn4bYO7DM/hZImlVnFwrpCTnmNMOt8CvLRr5ojI9nU1Ekpw4RcEw==",
+      "version": "8.31.1",
+      "resolved": "https://registry.npmjs.org/@typescript-eslint/types/-/types-8.31.1.tgz",
+      "integrity": "sha512-SfepaEFUDQYRoA70DD9GtytljBePSj17qPxFHA/h3eg6lPTqGJ5mWOtbXCk1YrVU1cTJRd14nhaXWFu0l2troQ==",
       "dev": true,
       "license": "MIT",
       "engines": {
@@ -3628,14 +4462,14 @@
       }
     },
     "node_modules/@typescript-eslint/typescript-estree": {
-      "version": "8.30.1",
-      "resolved": "https://registry.npmjs.org/@typescript-eslint/typescript-estree/-/typescript-estree-8.30.1.tgz",
-      "integrity": "sha512-kQQnxymiUy9tTb1F2uep9W6aBiYODgq5EMSk6Nxh4Z+BDUoYUSa029ISs5zTzKBFnexQEh71KqwjKnRz58lusQ==",
+      "version": "8.31.1",
+      "resolved": "https://registry.npmjs.org/@typescript-eslint/typescript-estree/-/typescript-estree-8.31.1.tgz",
+      "integrity": "sha512-kaA0ueLe2v7KunYOyWYtlf/QhhZb7+qh4Yw6Ni5kgukMIG+iP773tjgBiLWIXYumWCwEq3nLW+TUywEp8uEeag==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
-        "@typescript-eslint/types": "8.30.1",
-        "@typescript-eslint/visitor-keys": "8.30.1",
+        "@typescript-eslint/types": "8.31.1",
+        "@typescript-eslint/visitor-keys": "8.31.1",
         "debug": "^4.3.4",
         "fast-glob": "^3.3.2",
         "is-glob": "^4.0.3",
@@ -3711,16 +4545,16 @@
       }
     },
     "node_modules/@typescript-eslint/utils": {
-      "version": "8.30.1",
-      "resolved": "https://registry.npmjs.org/@typescript-eslint/utils/-/utils-8.30.1.tgz",
-      "integrity": "sha512-T/8q4R9En2tcEsWPQgB5BQ0XJVOtfARcUvOa8yJP3fh9M/mXraLxZrkCfGb6ChrO/V3W+Xbd04RacUEqk1CFEQ==",
+      "version": "8.31.1",
+      "resolved": "https://registry.npmjs.org/@typescript-eslint/utils/-/utils-8.31.1.tgz",
+      "integrity": "sha512-2DSI4SNfF5T4oRveQ4nUrSjUqjMND0nLq9rEkz0gfGr3tg0S5KB6DhwR+WZPCjzkZl3cH+4x2ce3EsL50FubjQ==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
         "@eslint-community/eslint-utils": "^4.4.0",
-        "@typescript-eslint/scope-manager": "8.30.1",
-        "@typescript-eslint/types": "8.30.1",
-        "@typescript-eslint/typescript-estree": "8.30.1"
+        "@typescript-eslint/scope-manager": "8.31.1",
+        "@typescript-eslint/types": "8.31.1",
+        "@typescript-eslint/typescript-estree": "8.31.1"
       },
       "engines": {
         "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
@@ -3735,13 +4569,13 @@
       }
     },
     "node_modules/@typescript-eslint/visitor-keys": {
-      "version": "8.30.1",
-      "resolved": "https://registry.npmjs.org/@typescript-eslint/visitor-keys/-/visitor-keys-8.30.1.tgz",
-      "integrity": "sha512-aEhgas7aJ6vZnNFC7K4/vMGDGyOiqWcYZPpIWrTKuTAlsvDNKy2GFDqh9smL+iq069ZvR0YzEeq0B8NJlLzjFA==",
+      "version": "8.31.1",
+      "resolved": "https://registry.npmjs.org/@typescript-eslint/visitor-keys/-/visitor-keys-8.31.1.tgz",
+      "integrity": "sha512-I+/rgqOVBn6f0o7NDTmAPWWC6NuqhV174lfYvAm9fUaWeiefLdux9/YI3/nLugEn9L8fcSi0XmpKi/r5u0nmpw==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
-        "@typescript-eslint/types": "8.30.1",
+        "@typescript-eslint/types": "8.31.1",
         "eslint-visitor-keys": "^4.2.0"
       },
       "engines": {
@@ -4102,7 +4936,6 @@
       "version": "2.0.1",
       "resolved": "https://registry.npmjs.org/argparse/-/argparse-2.0.1.tgz",
       "integrity": "sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==",
-      "dev": true,
       "license": "Python-2.0"
     },
     "node_modules/aria-hidden": {
@@ -4302,6 +5135,15 @@
         "node": ">= 0.4"
       }
     },
+    "node_modules/attr-accept": {
+      "version": "2.2.5",
+      "resolved": "https://registry.npmjs.org/attr-accept/-/attr-accept-2.2.5.tgz",
+      "integrity": "sha512-0bDNnY/u6pPwHDMoF0FieU354oBi0a8rD9FcsLwzcGWbc8KS8KPIi7y+s13OlVY+gMWc/9xEMUgNE6Qm8ZllYQ==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=4"
+      }
+    },
     "node_modules/autoprefixer": {
       "version": "10.4.21",
       "resolved": "https://registry.npmjs.org/autoprefixer/-/autoprefixer-10.4.21.tgz",
@@ -4996,6 +5838,12 @@
         }
       }
     },
+    "node_modules/crelt": {
+      "version": "1.0.6",
+      "resolved": "https://registry.npmjs.org/crelt/-/crelt-1.0.6.tgz",
+      "integrity": "sha512-VQ2MBenTq1fWZUH9DJNGti7kKv6EeAuYr3cLwxUWhIu1baTaXh4Ib5W2CqHVqib4/MqbYGJqiL3Zb8GJZr3l4g==",
+      "license": "MIT"
+    },
     "node_modules/cross-spawn": {
       "version": "7.0.6",
       "resolved": "https://registry.npmjs.org/cross-spawn/-/cross-spawn-7.0.6.tgz",
@@ -5589,7 +6437,6 @@
       "version": "4.0.0",
       "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-4.0.0.tgz",
       "integrity": "sha512-TtpcNJ3XAzx3Gq8sWRzJaVajRs0uVxA2YAkdb1jm2YkPz4G6egUFAyA3n5vtEIZefPk5Wa4UXbKuS5fKkJWdgA==",
-      "dev": true,
       "license": "MIT",
       "engines": {
         "node": ">=10"
@@ -6104,7 +6951,6 @@
       "version": "3.1.3",
       "resolved": "https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-3.1.3.tgz",
       "integrity": "sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q==",
-      "dev": true,
       "license": "MIT"
     },
     "node_modules/fast-glob": {
@@ -6188,6 +7034,18 @@
         "node": ">=16.0.0"
       }
     },
+    "node_modules/file-selector": {
+      "version": "2.1.2",
+      "resolved": "https://registry.npmjs.org/file-selector/-/file-selector-2.1.2.tgz",
+      "integrity": "sha512-QgXo+mXTe8ljeqUFaX3QVHc5osSItJ/Km+xpocx0aSqWGMSCf6qYs/VnzZgS864Pjn5iceMRFigeAV7AfTlaig==",
+      "license": "MIT",
+      "dependencies": {
+        "tslib": "^2.7.0"
+      },
+      "engines": {
+        "node": ">= 12"
+      }
+    },
     "node_modules/fill-range": {
       "version": "7.1.1",
       "resolved": "https://registry.npmjs.org/fill-range/-/fill-range-7.1.1.tgz",
@@ -6294,13 +7152,13 @@
       }
     },
     "node_modules/framer-motion": {
-      "version": "12.7.4",
-      "resolved": "https://registry.npmjs.org/framer-motion/-/framer-motion-12.7.4.tgz",
-      "integrity": "sha512-jX0bPsTmU0oPZTYz/dVyD0dmOyEOEJvdn0TaZBE5I8g2GvVnnQnW9f65cJnoVfUkY3WZWNXGXnPbVA9YnaIfVA==",
+      "version": "12.9.4",
+      "resolved": "https://registry.npmjs.org/framer-motion/-/framer-motion-12.9.4.tgz",
+      "integrity": "sha512-yaeGDmGQ3eCQEwZ95/pRQMaSh/Q4E2CK6JYOclG/PdjyQad0MULJ+JFVV8911Fl5a6tF6o0wgW8Dpl5Qx4Adjg==",
       "license": "MIT",
       "dependencies": {
-        "motion-dom": "^12.7.4",
-        "motion-utils": "^12.7.2",
+        "motion-dom": "^12.9.4",
+        "motion-utils": "^12.9.4",
         "tslib": "^2.4.0"
       },
       "peerDependencies": {
@@ -8537,6 +9395,21 @@
       "resolved": "https://registry.npmjs.org/lines-and-columns/-/lines-and-columns-1.2.4.tgz",
       "integrity": "sha512-7ylylesZQ/PV29jhEDl3Ufjo6ZX7gCqJr5F7PKrqc93v7fzSymt1BpwEU8nAUXs8qzzvqhbjhK5QZg6Mt/HkBg==",
       "license": "MIT"
+    },
+    "node_modules/linkify-it": {
+      "version": "5.0.0",
+      "resolved": "https://registry.npmjs.org/linkify-it/-/linkify-it-5.0.0.tgz",
+      "integrity": "sha512-5aHCbzQRADcdP+ATqnDuhhJ/MRIqDkZX5pyjFHRRysS8vZ5AbqGEoFIb6pYHPZ+L/OC2Lc+xT8uHVVR5CAK/wQ==",
+      "license": "MIT",
+      "dependencies": {
+        "uc.micro": "^2.0.0"
+      }
+    },
+    "node_modules/linkifyjs": {
+      "version": "4.2.0",
+      "resolved": "https://registry.npmjs.org/linkifyjs/-/linkifyjs-4.2.0.tgz",
+      "integrity": "sha512-pCj3PrQyATaoTYKHrgWRF3SJwsm61udVh+vuls/Rl6SptiDhgE7ziUIudAedRY9QEfynmM7/RmLEfPUyw1HPCw==",
+      "license": "MIT"
     },
     "node_modules/locate-path": {
       "version": "6.0.0",
@@ -8604,7 +9477,6 @@
       "version": "1.4.0",
       "resolved": "https://registry.npmjs.org/loose-envify/-/loose-envify-1.4.0.tgz",
       "integrity": "sha512-lyuxPGr/Wfhrlem2CL/UcnUc1zcqKAImBDzukY7Y5F/yQiNdko6+fRLevlw1HgMySw7f611UIY408EtxRSoK3Q==",
-      "dev": true,
       "license": "MIT",
       "dependencies": {
         "js-tokens": "^3.0.0 || ^4.0.0"
@@ -8632,9 +9504,9 @@
       }
     },
     "node_modules/lucide-react": {
-      "version": "0.501.0",
-      "resolved": "https://registry.npmjs.org/lucide-react/-/lucide-react-0.501.0.tgz",
-      "integrity": "sha512-E2KoyhW59fCb/yUbR3rbDer83fqn7a8NG91ZhIot2yWaPHjPyGzzsNKh40N//GezYShAuycf3TcQksRQznIsRw==",
+      "version": "0.507.0",
+      "resolved": "https://registry.npmjs.org/lucide-react/-/lucide-react-0.507.0.tgz",
+      "integrity": "sha512-XfgE6gvAHwAtnbUvWiTTHx4S3VGR+cUJHEc0vrh9Ogu672I1Tue2+Cp/8JJqpytgcBHAB1FVI297W4XGNwc2dQ==",
       "license": "ISC",
       "peerDependencies": {
         "react": "^16.5.1 || ^17.0.0 || ^18.0.0 || ^19.0.0"
@@ -8676,6 +9548,35 @@
         "url": "https://github.com/sponsors/sindresorhus"
       }
     },
+    "node_modules/markdown-it": {
+      "version": "14.1.0",
+      "resolved": "https://registry.npmjs.org/markdown-it/-/markdown-it-14.1.0.tgz",
+      "integrity": "sha512-a54IwgWPaeBCAAsv13YgmALOF1elABB08FxO9i+r4VFk5Vl4pKokRPeX8u5TCgSsPi6ec1otfLjdOpVcgbpshg==",
+      "license": "MIT",
+      "dependencies": {
+        "argparse": "^2.0.1",
+        "entities": "^4.4.0",
+        "linkify-it": "^5.0.0",
+        "mdurl": "^2.0.0",
+        "punycode.js": "^2.3.1",
+        "uc.micro": "^2.1.0"
+      },
+      "bin": {
+        "markdown-it": "bin/markdown-it.mjs"
+      }
+    },
+    "node_modules/markdown-it/node_modules/entities": {
+      "version": "4.5.0",
+      "resolved": "https://registry.npmjs.org/entities/-/entities-4.5.0.tgz",
+      "integrity": "sha512-V0hjH4dGPh9Ao5p0MoRY6BVqtwCjhz6vI5LT8AJ55H+4g9/4vbHx1I54fS0XuclLhDHArPQCiMjDxjaL8fPxhw==",
+      "license": "BSD-2-Clause",
+      "engines": {
+        "node": ">=0.12"
+      },
+      "funding": {
+        "url": "https://github.com/fb55/entities?sponsor=1"
+      }
+    },
     "node_modules/math-intrinsics": {
       "version": "1.1.0",
       "resolved": "https://registry.npmjs.org/math-intrinsics/-/math-intrinsics-1.1.0.tgz",
@@ -8839,6 +9740,12 @@
         "url": "https://opencollective.com/unified"
       }
     },
+    "node_modules/mdurl": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/mdurl/-/mdurl-2.0.0.tgz",
+      "integrity": "sha512-Lf+9+2r+Tdp5wXDXC4PcIBjTDtq4UKjCPMQhKIuzpJNW0b96kVqSwW0bT7FhRSfmAiFYgP+SCRvdrDozfh0U5w==",
+      "license": "MIT"
+    },
     "node_modules/memory-pager": {
       "version": "1.5.0",
       "resolved": "https://registry.npmjs.org/memory-pager/-/memory-pager-1.5.0.tgz",
@@ -9426,18 +10333,18 @@
       }
     },
     "node_modules/motion-dom": {
-      "version": "12.7.4",
-      "resolved": "https://registry.npmjs.org/motion-dom/-/motion-dom-12.7.4.tgz",
-      "integrity": "sha512-1ZUHAoSUMMxP6jPqyxlk9XUfb6NxMsnWPnH2YGhrOhTURLcXWbETi6eemoKb60Pe32NVJYduL4B62VQSO5Jq8Q==",
+      "version": "12.9.4",
+      "resolved": "https://registry.npmjs.org/motion-dom/-/motion-dom-12.9.4.tgz",
+      "integrity": "sha512-25TWkQPj5I18m+qVjXGtCsxboY11DaRC5HMjd29tHKExazW4Zf4XtAagBdLpyKsVuAxEQ6cx5/E4AB21PFpLnQ==",
       "license": "MIT",
       "dependencies": {
-        "motion-utils": "^12.7.2"
+        "motion-utils": "^12.9.4"
       }
     },
     "node_modules/motion-utils": {
-      "version": "12.7.2",
-      "resolved": "https://registry.npmjs.org/motion-utils/-/motion-utils-12.7.2.tgz",
-      "integrity": "sha512-XhZwqctxyJs89oX00zn3OGCuIIpVevbTa+u82usWBC6pSHUd2AoNWiYa7Du8tJxJy9TFbZ82pcn5t7NOm1PHAw==",
+      "version": "12.9.4",
+      "resolved": "https://registry.npmjs.org/motion-utils/-/motion-utils-12.9.4.tgz",
+      "integrity": "sha512-BW3I65zeM76CMsfh3kHid9ansEJk9Qvl+K5cu4DVHKGsI52n76OJ4z2CUJUV+Mn3uEP9k1JJA3tClG0ggSrRcg==",
       "license": "MIT"
     },
     "node_modules/mpath": {
@@ -9545,6 +10452,16 @@
         }
       }
     },
+    "node_modules/next-themes": {
+      "version": "0.4.6",
+      "resolved": "https://registry.npmjs.org/next-themes/-/next-themes-0.4.6.tgz",
+      "integrity": "sha512-pZvgD5L0IEvX5/9GWyHMf3m8BKiVQwsCMHfoFosXtXBMnaS0ZnIJ9ST4b4NqLVKDEm8QBxoNNGNaBv2JNF6XNA==",
+      "license": "MIT",
+      "peerDependencies": {
+        "react": "^16.8 || ^17 || ^18 || ^19 || ^19.0.0-rc",
+        "react-dom": "^16.8 || ^17 || ^18 || ^19 || ^19.0.0-rc"
+      }
+    },
     "node_modules/next/node_modules/postcss": {
       "version": "8.4.31",
       "resolved": "https://registry.npmjs.org/postcss/-/postcss-8.4.31.tgz",
@@ -9678,7 +10595,6 @@
       "version": "4.1.1",
       "resolved": "https://registry.npmjs.org/object-assign/-/object-assign-4.1.1.tgz",
       "integrity": "sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg==",
-      "dev": true,
       "license": "MIT",
       "engines": {
         "node": ">=0.10.0"
@@ -9852,6 +10768,12 @@
         "node": ">= 0.8.0"
       }
     },
+    "node_modules/orderedmap": {
+      "version": "2.1.1",
+      "resolved": "https://registry.npmjs.org/orderedmap/-/orderedmap-2.1.1.tgz",
+      "integrity": "sha512-TvAWxi0nDe1j/rtMcWcIj94+Ffe6n7zhow33h40SKxmsmozs6dz/e+EajymfoFcHd7sxNn8yHM8839uixMOV6g==",
+      "license": "MIT"
+    },
     "node_modules/own-keys": {
       "version": "1.0.1",
       "resolved": "https://registry.npmjs.org/own-keys/-/own-keys-1.0.1.tgz",
@@ -10236,7 +11158,6 @@
       "version": "15.8.1",
       "resolved": "https://registry.npmjs.org/prop-types/-/prop-types-15.8.1.tgz",
       "integrity": "sha512-oj87CgZICdulUohogVAR7AjlC0327U4el4L6eAvOqCeudMDVU0NThNaV+b9Df4dXgSP1gXMTnPdhfe/2qDH5cg==",
-      "dev": true,
       "license": "MIT",
       "dependencies": {
         "loose-envify": "^1.4.0",
@@ -10260,6 +11181,201 @@
         "url": "https://github.com/sponsors/wooorm"
       }
     },
+    "node_modules/prosemirror-changeset": {
+      "version": "2.2.1",
+      "resolved": "https://registry.npmjs.org/prosemirror-changeset/-/prosemirror-changeset-2.2.1.tgz",
+      "integrity": "sha512-J7msc6wbxB4ekDFj+n9gTW/jav/p53kdlivvuppHsrZXCaQdVgRghoZbSS3kwrRyAstRVQ4/+u5k7YfLgkkQvQ==",
+      "license": "MIT",
+      "dependencies": {
+        "prosemirror-transform": "^1.0.0"
+      }
+    },
+    "node_modules/prosemirror-collab": {
+      "version": "1.3.1",
+      "resolved": "https://registry.npmjs.org/prosemirror-collab/-/prosemirror-collab-1.3.1.tgz",
+      "integrity": "sha512-4SnynYR9TTYaQVXd/ieUvsVV4PDMBzrq2xPUWutHivDuOshZXqQ5rGbZM84HEaXKbLdItse7weMGOUdDVcLKEQ==",
+      "license": "MIT",
+      "dependencies": {
+        "prosemirror-state": "^1.0.0"
+      }
+    },
+    "node_modules/prosemirror-commands": {
+      "version": "1.7.1",
+      "resolved": "https://registry.npmjs.org/prosemirror-commands/-/prosemirror-commands-1.7.1.tgz",
+      "integrity": "sha512-rT7qZnQtx5c0/y/KlYaGvtG411S97UaL6gdp6RIZ23DLHanMYLyfGBV5DtSnZdthQql7W+lEVbpSfwtO8T+L2w==",
+      "license": "MIT",
+      "dependencies": {
+        "prosemirror-model": "^1.0.0",
+        "prosemirror-state": "^1.0.0",
+        "prosemirror-transform": "^1.10.2"
+      }
+    },
+    "node_modules/prosemirror-dropcursor": {
+      "version": "1.8.2",
+      "resolved": "https://registry.npmjs.org/prosemirror-dropcursor/-/prosemirror-dropcursor-1.8.2.tgz",
+      "integrity": "sha512-CCk6Gyx9+Tt2sbYk5NK0nB1ukHi2ryaRgadV/LvyNuO3ena1payM2z6Cg0vO1ebK8cxbzo41ku2DE5Axj1Zuiw==",
+      "license": "MIT",
+      "dependencies": {
+        "prosemirror-state": "^1.0.0",
+        "prosemirror-transform": "^1.1.0",
+        "prosemirror-view": "^1.1.0"
+      }
+    },
+    "node_modules/prosemirror-gapcursor": {
+      "version": "1.3.2",
+      "resolved": "https://registry.npmjs.org/prosemirror-gapcursor/-/prosemirror-gapcursor-1.3.2.tgz",
+      "integrity": "sha512-wtjswVBd2vaQRrnYZaBCbyDqr232Ed4p2QPtRIUK5FuqHYKGWkEwl08oQM4Tw7DOR0FsasARV5uJFvMZWxdNxQ==",
+      "license": "MIT",
+      "dependencies": {
+        "prosemirror-keymap": "^1.0.0",
+        "prosemirror-model": "^1.0.0",
+        "prosemirror-state": "^1.0.0",
+        "prosemirror-view": "^1.0.0"
+      }
+    },
+    "node_modules/prosemirror-history": {
+      "version": "1.4.1",
+      "resolved": "https://registry.npmjs.org/prosemirror-history/-/prosemirror-history-1.4.1.tgz",
+      "integrity": "sha512-2JZD8z2JviJrboD9cPuX/Sv/1ChFng+xh2tChQ2X4bB2HeK+rra/bmJ3xGntCcjhOqIzSDG6Id7e8RJ9QPXLEQ==",
+      "license": "MIT",
+      "dependencies": {
+        "prosemirror-state": "^1.2.2",
+        "prosemirror-transform": "^1.0.0",
+        "prosemirror-view": "^1.31.0",
+        "rope-sequence": "^1.3.0"
+      }
+    },
+    "node_modules/prosemirror-inputrules": {
+      "version": "1.5.0",
+      "resolved": "https://registry.npmjs.org/prosemirror-inputrules/-/prosemirror-inputrules-1.5.0.tgz",
+      "integrity": "sha512-K0xJRCmt+uSw7xesnHmcn72yBGTbY45vm8gXI4LZXbx2Z0jwh5aF9xrGQgrVPu0WbyFVFF3E/o9VhJYz6SQWnA==",
+      "license": "MIT",
+      "dependencies": {
+        "prosemirror-state": "^1.0.0",
+        "prosemirror-transform": "^1.0.0"
+      }
+    },
+    "node_modules/prosemirror-keymap": {
+      "version": "1.2.2",
+      "resolved": "https://registry.npmjs.org/prosemirror-keymap/-/prosemirror-keymap-1.2.2.tgz",
+      "integrity": "sha512-EAlXoksqC6Vbocqc0GtzCruZEzYgrn+iiGnNjsJsH4mrnIGex4qbLdWWNza3AW5W36ZRrlBID0eM6bdKH4OStQ==",
+      "license": "MIT",
+      "dependencies": {
+        "prosemirror-state": "^1.0.0",
+        "w3c-keyname": "^2.2.0"
+      }
+    },
+    "node_modules/prosemirror-markdown": {
+      "version": "1.13.2",
+      "resolved": "https://registry.npmjs.org/prosemirror-markdown/-/prosemirror-markdown-1.13.2.tgz",
+      "integrity": "sha512-FPD9rHPdA9fqzNmIIDhhnYQ6WgNoSWX9StUZ8LEKapaXU9i6XgykaHKhp6XMyXlOWetmaFgGDS/nu/w9/vUc5g==",
+      "license": "MIT",
+      "dependencies": {
+        "@types/markdown-it": "^14.0.0",
+        "markdown-it": "^14.0.0",
+        "prosemirror-model": "^1.25.0"
+      }
+    },
+    "node_modules/prosemirror-menu": {
+      "version": "1.2.5",
+      "resolved": "https://registry.npmjs.org/prosemirror-menu/-/prosemirror-menu-1.2.5.tgz",
+      "integrity": "sha512-qwXzynnpBIeg1D7BAtjOusR+81xCp53j7iWu/IargiRZqRjGIlQuu1f3jFi+ehrHhWMLoyOQTSRx/IWZJqOYtQ==",
+      "license": "MIT",
+      "dependencies": {
+        "crelt": "^1.0.0",
+        "prosemirror-commands": "^1.0.0",
+        "prosemirror-history": "^1.0.0",
+        "prosemirror-state": "^1.0.0"
+      }
+    },
+    "node_modules/prosemirror-model": {
+      "version": "1.25.1",
+      "resolved": "https://registry.npmjs.org/prosemirror-model/-/prosemirror-model-1.25.1.tgz",
+      "integrity": "sha512-AUvbm7qqmpZa5d9fPKMvH1Q5bqYQvAZWOGRvxsB6iFLyycvC9MwNemNVjHVrWgjaoxAfY8XVg7DbvQ/qxvI9Eg==",
+      "license": "MIT",
+      "dependencies": {
+        "orderedmap": "^2.0.0"
+      }
+    },
+    "node_modules/prosemirror-schema-basic": {
+      "version": "1.2.4",
+      "resolved": "https://registry.npmjs.org/prosemirror-schema-basic/-/prosemirror-schema-basic-1.2.4.tgz",
+      "integrity": "sha512-ELxP4TlX3yr2v5rM7Sb70SqStq5NvI15c0j9j/gjsrO5vaw+fnnpovCLEGIcpeGfifkuqJwl4fon6b+KdrODYQ==",
+      "license": "MIT",
+      "dependencies": {
+        "prosemirror-model": "^1.25.0"
+      }
+    },
+    "node_modules/prosemirror-schema-list": {
+      "version": "1.5.1",
+      "resolved": "https://registry.npmjs.org/prosemirror-schema-list/-/prosemirror-schema-list-1.5.1.tgz",
+      "integrity": "sha512-927lFx/uwyQaGwJxLWCZRkjXG0p48KpMj6ueoYiu4JX05GGuGcgzAy62dfiV8eFZftgyBUvLx76RsMe20fJl+Q==",
+      "license": "MIT",
+      "dependencies": {
+        "prosemirror-model": "^1.0.0",
+        "prosemirror-state": "^1.0.0",
+        "prosemirror-transform": "^1.7.3"
+      }
+    },
+    "node_modules/prosemirror-state": {
+      "version": "1.4.3",
+      "resolved": "https://registry.npmjs.org/prosemirror-state/-/prosemirror-state-1.4.3.tgz",
+      "integrity": "sha512-goFKORVbvPuAQaXhpbemJFRKJ2aixr+AZMGiquiqKxaucC6hlpHNZHWgz5R7dS4roHiwq9vDctE//CZ++o0W1Q==",
+      "license": "MIT",
+      "dependencies": {
+        "prosemirror-model": "^1.0.0",
+        "prosemirror-transform": "^1.0.0",
+        "prosemirror-view": "^1.27.0"
+      }
+    },
+    "node_modules/prosemirror-tables": {
+      "version": "1.7.1",
+      "resolved": "https://registry.npmjs.org/prosemirror-tables/-/prosemirror-tables-1.7.1.tgz",
+      "integrity": "sha512-eRQ97Bf+i9Eby99QbyAiyov43iOKgWa7QCGly+lrDt7efZ1v8NWolhXiB43hSDGIXT1UXgbs4KJN3a06FGpr1Q==",
+      "license": "MIT",
+      "dependencies": {
+        "prosemirror-keymap": "^1.2.2",
+        "prosemirror-model": "^1.25.0",
+        "prosemirror-state": "^1.4.3",
+        "prosemirror-transform": "^1.10.3",
+        "prosemirror-view": "^1.39.1"
+      }
+    },
+    "node_modules/prosemirror-trailing-node": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/prosemirror-trailing-node/-/prosemirror-trailing-node-3.0.0.tgz",
+      "integrity": "sha512-xiun5/3q0w5eRnGYfNlW1uU9W6x5MoFKWwq/0TIRgt09lv7Hcser2QYV8t4muXbEr+Fwo0geYn79Xs4GKywrRQ==",
+      "license": "MIT",
+      "dependencies": {
+        "@remirror/core-constants": "3.0.0",
+        "escape-string-regexp": "^4.0.0"
+      },
+      "peerDependencies": {
+        "prosemirror-model": "^1.22.1",
+        "prosemirror-state": "^1.4.2",
+        "prosemirror-view": "^1.33.8"
+      }
+    },
+    "node_modules/prosemirror-transform": {
+      "version": "1.10.4",
+      "resolved": "https://registry.npmjs.org/prosemirror-transform/-/prosemirror-transform-1.10.4.tgz",
+      "integrity": "sha512-pwDy22nAnGqNR1feOQKHxoFkkUtepoFAd3r2hbEDsnf4wp57kKA36hXsB3njA9FtONBEwSDnDeCiJe+ItD+ykw==",
+      "license": "MIT",
+      "dependencies": {
+        "prosemirror-model": "^1.21.0"
+      }
+    },
+    "node_modules/prosemirror-view": {
+      "version": "1.39.2",
+      "resolved": "https://registry.npmjs.org/prosemirror-view/-/prosemirror-view-1.39.2.tgz",
+      "integrity": "sha512-BmOkml0QWNob165gyUxXi5K5CVUgVPpqMEAAml/qzgKn9boLUWVPzQ6LtzXw8Cn1GtRQX4ELumPxqtLTDaAKtg==",
+      "license": "MIT",
+      "dependencies": {
+        "prosemirror-model": "^1.20.0",
+        "prosemirror-state": "^1.0.0",
+        "prosemirror-transform": "^1.1.0"
+      }
+    },
     "node_modules/punycode": {
       "version": "2.3.1",
       "resolved": "https://registry.npmjs.org/punycode/-/punycode-2.3.1.tgz",
@@ -10269,6 +11385,15 @@
         "node": ">=6"
       }
     },
+    "node_modules/punycode.js": {
+      "version": "2.3.1",
+      "resolved": "https://registry.npmjs.org/punycode.js/-/punycode.js-2.3.1.tgz",
+      "integrity": "sha512-uxFIHU0YlHYhDQtV4R9J6a52SLx28BCjT+4ieh7IGbgwVJWO+km431c4yRlREUAsAmt/uMjQUyQHNEPf0M39CA==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=6"
+      }
+    },
     "node_modules/pure-rand": {
       "version": "6.1.0",
       "resolved": "https://registry.npmjs.org/pure-rand/-/pure-rand-6.1.0.tgz",
@@ -10333,6 +11458,23 @@
         "react": "^19.1.0"
       }
     },
+    "node_modules/react-dropzone": {
+      "version": "14.3.8",
+      "resolved": "https://registry.npmjs.org/react-dropzone/-/react-dropzone-14.3.8.tgz",
+      "integrity": "sha512-sBgODnq+lcA4P296DY4wacOZz3JFpD99fp+hb//iBO2HHnyeZU3FwWyXJ6salNpqQdsZrgMrotuko/BdJMV8Ug==",
+      "license": "MIT",
+      "dependencies": {
+        "attr-accept": "^2.2.4",
+        "file-selector": "^2.1.0",
+        "prop-types": "^15.8.1"
+      },
+      "engines": {
+        "node": ">= 10.13"
+      },
+      "peerDependencies": {
+        "react": ">= 16.8 || 18.0.0"
+      }
+    },
     "node_modules/react-fast-compare": {
       "version": "2.0.4",
       "resolved": "https://registry.npmjs.org/react-fast-compare/-/react-fast-compare-2.0.4.tgz",
@@ -10633,6 +11775,12 @@
         "node": ">=0.10.0"
       }
     },
+    "node_modules/rope-sequence": {
+      "version": "1.3.4",
+      "resolved": "https://registry.npmjs.org/rope-sequence/-/rope-sequence-1.3.4.tgz",
+      "integrity": "sha512-UT5EDe2cu2E/6O4igUr5PSFs23nvvukicWHx6GnOPlHAiiYbzNuCRQCuiUdHJQcqKalLKlrYJnjY0ySGsXNQXQ==",
+      "license": "MIT"
+    },
     "node_modules/rrweb-cssom": {
       "version": "0.8.0",
       "resolved": "https://registry.npmjs.org/rrweb-cssom/-/rrweb-cssom-0.8.0.tgz",
@@ -10991,6 +12139,15 @@
         "node": ">=8"
       }
     },
+    "node_modules/slugify": {
+      "version": "1.6.6",
+      "resolved": "https://registry.npmjs.org/slugify/-/slugify-1.6.6.tgz",
+      "integrity": "sha512-h+z7HKHYXj6wJU+AnS/+IH8Uh9fdcX1Lrhg1/VMdf9PwoBQXFcXiAdsy2tSK0P6gKwJLXp02r90ahUCqHk9rrw==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=8.0.0"
+      }
+    },
     "node_modules/snake-case": {
       "version": "3.0.4",
       "resolved": "https://registry.npmjs.org/snake-case/-/snake-case-3.0.4.tgz",
@@ -11561,6 +12718,15 @@
         "url": "https://github.com/sponsors/jonschlinkert"
       }
     },
+    "node_modules/tippy.js": {
+      "version": "6.3.7",
+      "resolved": "https://registry.npmjs.org/tippy.js/-/tippy.js-6.3.7.tgz",
+      "integrity": "sha512-E1d3oP2emgJ9dRQZdf3Kkn0qJgI6ZLpyS5z6ZkY1DF3kaQaBsGZsndEpHwx+eC+tYM41HaSNvNtLx8tU57FzTQ==",
+      "license": "MIT",
+      "dependencies": {
+        "@popperjs/core": "^2.9.0"
+      }
+    },
     "node_modules/tldts": {
       "version": "6.1.86",
       "resolved": "https://registry.npmjs.org/tldts/-/tldts-6.1.86.tgz",
@@ -11814,6 +12980,12 @@
         "node": ">=14.17"
       }
     },
+    "node_modules/uc.micro": {
+      "version": "2.1.0",
+      "resolved": "https://registry.npmjs.org/uc.micro/-/uc.micro-2.1.0.tgz",
+      "integrity": "sha512-ARDJmphmdvUk6Glw7y9DQ2bFkKBHwQHLi2lsaH6PPmz/Ka9sFOBsBluozhDltWmnv9u/cF6Rt87znRTPV+yp/A==",
+      "license": "MIT"
+    },
     "node_modules/unbox-primitive": {
       "version": "1.1.0",
       "resolved": "https://registry.npmjs.org/unbox-primitive/-/unbox-primitive-1.1.0.tgz",
@@ -12076,6 +13248,15 @@
         "node": ">=10.12.0"
       }
     },
+    "node_modules/validator": {
+      "version": "13.15.0",
+      "resolved": "https://registry.npmjs.org/validator/-/validator-13.15.0.tgz",
+      "integrity": "sha512-36B2ryl4+oL5QxZ3AzD0t5SsMNGvTtQHpjgFO5tbNxfXbMFkY822ktCDe1MnlqV3301QQI9SLHDNJokDI+Z9pA==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.10"
+      }
+    },
     "node_modules/vfile": {
       "version": "6.0.3",
       "resolved": "https://registry.npmjs.org/vfile/-/vfile-6.0.3.tgz",
@@ -12104,6 +13285,12 @@
         "url": "https://opencollective.com/unified"
       }
     },
+    "node_modules/w3c-keyname": {
+      "version": "2.2.8",
+      "resolved": "https://registry.npmjs.org/w3c-keyname/-/w3c-keyname-2.2.8.tgz",
+      "integrity": "sha512-dpojBhNsCNN7T82Tm7k26A6G9ML3NkhDsnw9n/eoxSRlVBB4CEtIQ/KTCLI2Fwf3ataSXRhYFkQi3SlnFwPvPQ==",
+      "license": "MIT"
+    },
     "node_modules/w3c-xmlserializer": {
       "version": "5.0.0",
       "resolved": "https://registry.npmjs.org/w3c-xmlserializer/-/w3c-xmlserializer-5.0.0.tgz",
@@ -12426,6 +13613,15 @@
         "type-fest": "^2.19.0"
       }
     },
+    "node_modules/zod": {
+      "version": "3.24.3",
+      "resolved": "https://registry.npmjs.org/zod/-/zod-3.24.3.tgz",
+      "integrity": "sha512-HhY1oqzWCQWuUqvBFnsyrtZRhyPeR7SUGv+C4+MsisMuVfSPx8HpwWqH8tRahSlt6M3PiFAcoeFhZAqIXTxoSg==",
+      "license": "MIT",
+      "funding": {
+        "url": "https://github.com/sponsors/colinhacks"
+      }
+    },
     "node_modules/zwitch": {
       "version": "2.0.4",
       "resolved": "https://registry.npmjs.org/zwitch/-/zwitch-2.0.4.tgz",
Index: src/app/api/posts/feed/route.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { NextRequest, NextResponse } from \"next/server\";\r\nimport { auth } from \"@clerk/nextjs/server\";\r\nimport connectToDatabase from \"@/lib/dbConnect\";\r\nimport User from \"@/models/User\";\r\nimport Post from \"@/models/Post\";\r\nimport type { Types } from \"mongoose\";\r\nimport \"@/models/Community\";\r\n\r\ntype RawPost = {\r\n  _id: Types.ObjectId;\r\n  upvotes?: Types.ObjectId[];\r\n  downvotes?: Types.ObjectId[];\r\n  comments?: unknown[];\r\n  createdAt: Date;\r\n  updatedAt: Date;\r\n  [key: string]: unknown;\r\n};\r\n\r\nexport async function GET(req: NextRequest) {\r\n  try {\r\n    const { userId } = await auth();\r\n    if (!userId) {\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\r\n    }\r\n\r\n    await connectToDatabase();\r\n\r\n    const qp = req.nextUrl.searchParams;\r\n    const page = parseInt(qp.get(\"page\") ?? \"1\", 10);\r\n    const limit = parseInt(qp.get(\"limit\") ?? \"10\", 10);\r\n    const skip = (page - 1) * limit;\r\n\r\n    const currentUser = await User.findOne({ clerkId: userId });\r\n    if (!currentUser) {\r\n      return NextResponse.json({ error: \"User not found\" }, { status: 404 });\r\n    }\r\n\r\n    const queryCondition =\r\n        currentUser.following.length > 0\r\n            ? { author: { $in: currentUser.following } }\r\n            : {}; // If no following, show all posts\r\n\r\n    const postsRaw = (await Post.find(queryCondition)\r\n        .sort({ createdAt: -1 })\r\n        .skip(skip)\r\n        .limit(limit)\r\n        .populate(\"author\", \"username name image\")\r\n        .populate(\"community\", \"name image\")\r\n        .lean()) as unknown as RawPost[];\r\n\r\n    const totalPosts = await Post.countDocuments(queryCondition);\r\n    const hasMore = totalPosts > skip + postsRaw.length;\r\n\r\n    const me = currentUser._id as Types.ObjectId;\r\n    const transformed = postsRaw.map((post) => {\r\n      const {\r\n        _id,\r\n        upvotes = [],\r\n        downvotes = [],\r\n        comments = [],\r\n        createdAt,\r\n        updatedAt,\r\n        ...rest\r\n      } = post;\r\n\r\n      return {\r\n        id: _id.toString(),\r\n        ...rest,\r\n        upvoteCount: upvotes.length,\r\n        downvoteCount: downvotes.length,\r\n        voteCount: upvotes.length - downvotes.length,\r\n        commentCount: comments.length,\r\n        isUpvoted: upvotes.some((id: Types.ObjectId) => id.equals(me)),\r\n        isDownvoted: downvotes.some((id: Types.ObjectId) => id.equals(me)),\r\n        createdAt: createdAt.toISOString(),\r\n        updatedAt: updatedAt.toISOString(),\r\n      };\r\n    });\r\n\r\n    return NextResponse.json(\r\n        { posts: transformed, pagination: { page, limit, totalPosts, hasMore } },\r\n        { status: 200 }\r\n    );\r\n  } catch (err) {\r\n    console.error(\"Error fetching home feed:\", err);\r\n    return NextResponse.json(\r\n        { error: \"Failed to fetch home feed\" },\r\n        { status: 500 }\r\n    );\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/app/api/posts/feed/route.ts b/src/app/api/posts/feed/route.ts
--- a/src/app/api/posts/feed/route.ts	(revision 4c74be27f19335e5b956190fea65a1f797f84875)
+++ b/src/app/api/posts/feed/route.ts	(date 1747009942560)
@@ -1,3 +1,4 @@
+// src/app/api/posts/feed/route.ts
 import { NextRequest, NextResponse } from "next/server";
 import { auth } from "@clerk/nextjs/server";
 import connectToDatabase from "@/lib/dbConnect";
@@ -8,16 +9,22 @@
 
 type RawPost = {
   _id: Types.ObjectId;
+  author: any;
+  community?: any;
   upvotes?: Types.ObjectId[];
   downvotes?: Types.ObjectId[];
-  comments?: unknown[];
+  savedBy?: Types.ObjectId[];
+  comments?: any[];
+  content: string;
+  mediaFiles?: string[];
   createdAt: Date;
   updatedAt: Date;
-  [key: string]: unknown;
 };
 
 export async function GET(req: NextRequest) {
   try {
+    console.log("[FEED:GET] Fetching home feed");
+
     const { userId } = await auth();
     if (!userId) {
       return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
@@ -25,64 +32,98 @@
 
     await connectToDatabase();
 
-    const qp = req.nextUrl.searchParams;
-    const page = parseInt(qp.get("page") ?? "1", 10);
-    const limit = parseInt(qp.get("limit") ?? "10", 10);
+    const searchParams = req.nextUrl.searchParams;
+    const page = parseInt(searchParams.get("page") ?? "1", 10);
+    const limit = parseInt(searchParams.get("limit") ?? "10", 10);
     const skip = (page - 1) * limit;
 
-    const currentUser = await User.findOne({ clerkId: userId });
+    const currentUser = await User.findOne({ clerkId: userId }).select("_id following");
     if (!currentUser) {
       return NextResponse.json({ error: "User not found" }, { status: 404 });
     }
 
-    const queryCondition =
-        currentUser.following.length > 0
-            ? { author: { $in: currentUser.following } }
-            : {}; // If no following, show all posts
+    const followingIds = currentUser.following || [];
 
-    const postsRaw = (await Post.find(queryCondition)
+    const query: any = followingIds.length > 0
+        ? { author: { $in: followingIds } }
+        : {}; // If not following anyone, show all posts (global)
+
+    const postsRaw = (await Post.find(query)
         .sort({ createdAt: -1 })
         .skip(skip)
         .limit(limit)
         .populate("author", "username name image")
         .populate("community", "name image")
-        .lean()) as unknown as RawPost[];
+        .lean()) as RawPost[];
 
-    const totalPosts = await Post.countDocuments(queryCondition);
+    const totalPosts = await Post.countDocuments(query);
     const hasMore = totalPosts > skip + postsRaw.length;
 
-    const me = currentUser._id as Types.ObjectId;
-    const transformed = postsRaw.map((post) => {
+    const meId = currentUser._id as Types.ObjectId;
+
+    const posts = postsRaw.map((post) => {
       const {
         _id,
+        author,
+        community,
+        content,
+        mediaFiles = [],
         upvotes = [],
         downvotes = [],
+        savedBy = [],
         comments = [],
         createdAt,
         updatedAt,
-        ...rest
       } = post;
 
+      const isUpvoted = upvotes.some((id) => id.equals(meId));
+      const isDownvoted = downvotes.some((id) => id.equals(meId));
+      const isSaved = savedBy.some((id) => id.equals(meId));
+
       return {
         id: _id.toString(),
-        ...rest,
+        author: {
+          id: author?._id?.toString() || "",
+          username: author?.username || "unknown",
+          name: author?.name || "Unknown User",
+          image: author?.image || null,
+        },
+        community: community
+            ? {
+              id: community._id.toString(),
+              name: community.name,
+              image: community.image || null,
+            }
+            : undefined,
+        content,
+        mediaFiles,
         upvoteCount: upvotes.length,
         downvoteCount: downvotes.length,
         voteCount: upvotes.length - downvotes.length,
         commentCount: comments.length,
-        isUpvoted: upvotes.some((id: Types.ObjectId) => id.equals(me)),
-        isDownvoted: downvotes.some((id: Types.ObjectId) => id.equals(me)),
+        savedCount: savedBy.length,
+        isUpvoted,
+        isDownvoted,
+        isSaved,
         createdAt: createdAt.toISOString(),
         updatedAt: updatedAt.toISOString(),
       };
     });
 
     return NextResponse.json(
-        { posts: transformed, pagination: { page, limit, totalPosts, hasMore } },
+        {
+          posts,
+          pagination: {
+            page,
+            limit,
+            totalPosts,
+            hasMore,
+          },
+        },
         { status: 200 }
     );
-  } catch (err) {
-    console.error("Error fetching home feed:", err);
+  } catch (error) {
+    console.error("[FEED:GET] Error:", error);
     return NextResponse.json(
         { error: "Failed to fetch home feed" },
         { status: 500 }
Index: src/app/api/posts/[postId]/vote/route.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// src/app/api/posts/[postId]/vote/route.ts\r\nimport { NextRequest, NextResponse } from \"next/server\";\r\nimport { auth } from \"@clerk/nextjs/server\";\r\nimport connectToDatabase from \"@/lib/dbConnect\";\r\nimport User from \"@/models/User\";\r\nimport Post from \"@/models/Post\";\r\nimport type { Types } from \"mongoose\";\r\n\r\nexport async function POST(\r\n    req: NextRequest,\r\n    { params }: { params: { postId: string } }\r\n) {\r\n  try {\r\n    // await auth() because it returns a Promise<Auth>\r\n    const { userId } = await auth();\r\n\r\n    if (!userId) {\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\r\n    }\r\n\r\n    // connect to the DB\r\n    await connectToDatabase();\r\n\r\n    // parse & validate\r\n    const { voteType } = (await req.json()) as { voteType: string };\r\n    if (voteType !== \"upvote\" && voteType !== \"downvote\") {\r\n      return NextResponse.json({ error: \"Invalid vote type\" }, { status: 400 });\r\n    }\r\n\r\n    // look up the user\r\n    const currentUser = await User.findOne({ clerkId: userId });\r\n    if (!currentUser) {\r\n      return NextResponse.json({ error: \"User not found\" }, { status: 404 });\r\n    }\r\n\r\n    // look up the post\r\n    const post = await Post.findById(params.postId);\r\n    if (!post) {\r\n      return NextResponse.json({ error: \"Post not found\" }, { status: 404 });\r\n    }\r\n\r\n    // Mongoose ObjectId type\r\n    const me = currentUser._id as Types.ObjectId;\r\n\r\n    // see if we've already voted\r\n    const hasUpvoted = post.upvotes.some((id: Types.ObjectId) => id.equals(me));\r\n    const hasDownvoted = post.downvotes.some((id: Types.ObjectId) =>\r\n        id.equals(me)\r\n    );\r\n\r\n    // toggle logic\r\n    if (voteType === \"upvote\") {\r\n      if (hasUpvoted) {\r\n        post.upvotes = post.upvotes.filter((id: Types.ObjectId) => !id.equals(me));\r\n      } else {\r\n        post.upvotes.push(me);\r\n        post.downvotes = post.downvotes.filter((id: Types.ObjectId) => !id.equals(me));\r\n      }\r\n    } else {\r\n      if (hasDownvoted) {\r\n        post.downvotes = post.downvotes.filter((id: Types.ObjectId) => !id.equals(me));\r\n      } else {\r\n        post.downvotes.push(me);\r\n        post.upvotes = post.upvotes.filter((id: Types.ObjectId) => !id.equals(me));\r\n      }\r\n    }\r\n\r\n    await post.save();\r\n\r\n    // recalc toggles\r\n    const isUpvoted = post.upvotes.some((id: Types.ObjectId) => id.equals(me));\r\n    const isDownvoted = post.downvotes.some((id: Types.ObjectId) =>\r\n        id.equals(me)\r\n    );\r\n\r\n    return NextResponse.json(\r\n        {\r\n          upvoteCount: post.upvotes.length,\r\n          downvoteCount: post.downvotes.length,\r\n          voteCount: post.upvotes.length - post.downvotes.length,\r\n          isUpvoted,\r\n          isDownvoted,\r\n        },\r\n        { status: 200 }\r\n    );\r\n  } catch (err) {\r\n    console.error(\"Error voting on post:\", err);\r\n    return NextResponse.json(\r\n        { error: \"Failed to vote on post\" },\r\n        { status: 500 }\r\n    );\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/app/api/posts/[postId]/vote/route.ts b/src/app/api/posts/[postId]/vote/route.ts
--- a/src/app/api/posts/[postId]/vote/route.ts	(revision 4c74be27f19335e5b956190fea65a1f797f84875)
+++ b/src/app/api/posts/[postId]/vote/route.ts	(date 1747009942676)
@@ -4,74 +4,74 @@
 import connectToDatabase from "@/lib/dbConnect";
 import User from "@/models/User";
 import Post from "@/models/Post";
-import type { Types } from "mongoose";
+import { Types } from "mongoose";
 
 export async function POST(
     req: NextRequest,
     { params }: { params: { postId: string } }
 ) {
   try {
-    // await auth() because it returns a Promise<Auth>
+    // Authenticated user
     const { userId } = await auth();
-
     if (!userId) {
       return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
     }
 
-    // connect to the DB
+    // Connect to DB
     await connectToDatabase();
 
-    // parse & validate
-    const { voteType } = (await req.json()) as { voteType: string };
-    if (voteType !== "upvote" && voteType !== "downvote") {
+    // Parse voteType
+    const { voteType } = (await req.json()) as { voteType: "upvote" | "downvote" };
+    if (!["upvote", "downvote"].includes(voteType)) {
       return NextResponse.json({ error: "Invalid vote type" }, { status: 400 });
     }
 
-    // look up the user
-    const currentUser = await User.findOne({ clerkId: userId });
-    if (!currentUser) {
+    // Validate Post ID
+    const postId = params.postId;
+    if (!Types.ObjectId.isValid(postId)) {
+      return NextResponse.json({ error: "Invalid post ID" }, { status: 400 });
+    }
+
+    // Find User
+    const user = await User.findOne({ clerkId: userId });
+    if (!user) {
       return NextResponse.json({ error: "User not found" }, { status: 404 });
     }
 
-    // look up the post
-    const post = await Post.findById(params.postId);
+    // Find Post
+    const post = await Post.findById(postId);
     if (!post) {
       return NextResponse.json({ error: "Post not found" }, { status: 404 });
     }
 
-    // Mongoose ObjectId type
-    const me = currentUser._id as Types.ObjectId;
+    const userObjectId = user._id as Types.ObjectId;
 
-    // see if we've already voted
-    const hasUpvoted = post.upvotes.some((id: Types.ObjectId) => id.equals(me));
-    const hasDownvoted = post.downvotes.some((id: Types.ObjectId) =>
-        id.equals(me)
-    );
+    // Check previous votes
+    const hasUpvoted = post.upvotes.some((id) => id.equals(userObjectId));
+    const hasDownvoted = post.downvotes.some((id) => id.equals(userObjectId));
 
-    // toggle logic
+    // Perform vote toggling
     if (voteType === "upvote") {
       if (hasUpvoted) {
-        post.upvotes = post.upvotes.filter((id: Types.ObjectId) => !id.equals(me));
+        post.upvotes = post.upvotes.filter((id) => !id.equals(userObjectId));
       } else {
-        post.upvotes.push(me);
-        post.downvotes = post.downvotes.filter((id: Types.ObjectId) => !id.equals(me));
+        post.upvotes.push(userObjectId);
+        post.downvotes = post.downvotes.filter((id) => !id.equals(userObjectId));
       }
     } else {
       if (hasDownvoted) {
-        post.downvotes = post.downvotes.filter((id: Types.ObjectId) => !id.equals(me));
+        post.downvotes = post.downvotes.filter((id) => !id.equals(userObjectId));
       } else {
-        post.downvotes.push(me);
-        post.upvotes = post.upvotes.filter((id: Types.ObjectId) => !id.equals(me));
+        post.downvotes.push(userObjectId);
+        post.upvotes = post.upvotes.filter((id) => !id.equals(userObjectId));
       }
     }
 
     await post.save();
 
-    // recalc toggles
-    const isUpvoted = post.upvotes.some((id: Types.ObjectId) => id.equals(me));
-    const isDownvoted = post.downvotes.some((id: Types.ObjectId) =>
-        id.equals(me)
-    );
+    // Recalculate updated state
+    const isUpvoted = post.upvotes.some((id) => id.equals(userObjectId));
+    const isDownvoted = post.downvotes.some((id) => id.equals(userObjectId));
 
     return NextResponse.json(
         {
@@ -83,8 +83,8 @@
         },
         { status: 200 }
     );
-  } catch (err) {
-    console.error("Error voting on post:", err);
+  } catch (error) {
+    console.error("[VOTE:POST] Error voting on post:", error);
     return NextResponse.json(
         { error: "Failed to vote on post" },
         { status: 500 }
Index: src/app/(main)/profile/[userId]/page.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/app/(main)/profile/[userId]/page.tsx b/src/app/(main)/profile/[username]/page.tsx
rename from src/app/(main)/profile/[userId]/page.tsx
rename to src/app/(main)/profile/[username]/page.tsx
--- a/src/app/(main)/profile/[userId]/page.tsx	(revision 4c74be27f19335e5b956190fea65a1f797f84875)
+++ b/src/app/(main)/profile/[username]/page.tsx	(date 1747009940772)
@@ -8,34 +8,45 @@
 import { Badge } from "@/components/ui/badge";
 import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
 import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip";
-import { Share2, MessageCircle, User, Users, Info, GridIcon, Calendar } from "lucide-react";
+import { Share2, User, Users, Info, GridIcon, Calendar } from "lucide-react";
 import { format } from "date-fns";
 import { Skeleton } from "@/components/ui/skeleton";
+import PostCard from "@/components/post-card"; // Fixed import for PostCard component
+import { Post } from "@/context/PostContext";
 
 interface PublicUser {
     id: string;
     username: string;
     name: string;
     image?: string;
+    bio?: string;
     followerCount: number;
     followingCount: number;
     communityCount: number;
     joinedDate: string;
     isFollowing: boolean;
+    communities?: {
+        id: string;
+        name: string;
+        image?: string;
+    }[];
 }
 
 export default function PublicProfilePage() {
-    const { userId } = useParams<{ userId: string }>();
+    const { username } = useParams<{ username: string }>();
     const router = useRouter();
     const [user, setUser] = useState<PublicUser | null>(null);
+    const [posts, setPosts] = useState<Post[]>([]); // ✅ Added posts state
     const [loading, setLoading] = useState(true);
     const [error, setError] = useState<string | null>(null);
     const [followLoading, setFollowLoading] = useState(false);
+    const [activeTab, setActiveTab] = useState("about");
+    const [communities, setCommunities] = useState<PublicUser['communities']>([]);
 
     useEffect(() => {
         const fetchUser = async () => {
             try {
-                const res = await fetch(`/api/users/${userId}`);
+                const res = await fetch(`/api/users/${username}`);
                 if (!res.ok) throw new Error("Failed to fetch user profile");
                 const data = await res.json();
                 setUser(data.user);
@@ -46,16 +57,40 @@
             }
         };
 
-        if (userId) {
+        const fetchUserPosts = async () => {
+            try {
+                const res = await fetch(`/api/users/${username}/posts`);
+                if (!res.ok) throw new Error("Failed to fetch user posts");
+                const data = await res.json();
+                setPosts(data.posts);
+            } catch (err) {
+                console.error("Failed to fetch user's posts", err);
+            }
+        };
+
+        const fetchUserCommunities = async () => {
+            try {
+                const res = await fetch(`/api/users/${username}/communities`);
+                if (!res.ok) throw new Error("Failed to fetch user communities");
+                const data = await res.json();
+                setCommunities(data.communities);
+            } catch (err) {
+                console.error("Failed to fetch user's communities", err);
+            }
+        };
+
+        if (username) {
             fetchUser();
+            fetchUserPosts();
+            fetchUserCommunities();
         }
-    }, [userId]);
+    }, [username]);
 
     const handleFollowToggle = async () => {
         if (!user) return;
         try {
             setFollowLoading(true);
-            const res = await fetch(`/api/users/${user.id}/follow`, {
+            const res = await fetch(`/api/users/${user.username}/follow`, {
                 method: "POST",
             });
             if (!res.ok) throw new Error("Failed to update follow status");
@@ -160,15 +195,15 @@
                     <div className="flex flex-wrap gap-6 mt-6">
                         <Badge variant="secondary" className="px-4 py-2 rounded-full">
                             <User className="h-3.5 w-3.5 mr-1 text-indigo-500" />
-                            <span className="font-semibold text-indigo-700">{user.followerCount}</span> Followers
+                            <span className="font-semibold text-indigo-700 pr-1">{user.followerCount}</span> Followers
                         </Badge>
                         <Badge variant="secondary" className="px-4 py-2 rounded-full">
                             <User className="h-3.5 w-3.5 mr-1 text-indigo-500" />
-                            <span className="font-semibold text-indigo-700">{user.followingCount}</span> Following
+                            <span className="font-semibold text-indigo-700 pr-1">{user.followingCount}</span> Following
                         </Badge>
                         <Badge variant="secondary" className="px-4 py-2 rounded-full">
                             <Users className="h-3.5 w-3.5 mr-1 text-indigo-500" />
-                            <span className="font-semibold text-indigo-700">{user.communityCount}</span> Communities
+                            <span className="font-semibold text-indigo-700 pr-1">{user.communityCount}</span> Communities
                         </Badge>
                     </div>
                 </motion.div>
@@ -176,14 +211,17 @@
 
             {/* Tabs */}
             <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} transition={{ delay: 0.6 }} className="mt-8 px-6">
-                <Tabs defaultValue="about">
-                    <TabsList className="grid grid-cols-2 w-full max-w-md mx-auto">
+                <Tabs value={activeTab} onValueChange={setActiveTab}>
+                    <TabsList className="grid grid-cols-3 w-full max-w-md mx-auto">
                         <TabsTrigger value="about" className="data-[state=active]:bg-indigo-50 data-[state=active]:text-indigo-700">
                             <Info className="h-4 w-4 mr-2" /> About
                         </TabsTrigger>
                         <TabsTrigger value="posts" className="data-[state=active]:bg-indigo-50 data-[state=active]:text-indigo-700">
                             <GridIcon className="h-4 w-4 mr-2" /> Posts
                         </TabsTrigger>
+                        <TabsTrigger value="communities" className="data-[state=active]:bg-indigo-50 data-[state=active]:text-indigo-700">
+                            <Users className="h-4 w-4 mr-2" /> Communities
+                        </TabsTrigger>
                     </TabsList>
 
                     <TabsContent value="about" className="mt-6">
@@ -191,14 +229,55 @@
                             <h2 className="text-xl font-semibold mb-2">Profile Info</h2>
                             <p><strong>Username:</strong> @{user.username}</p>
                             <p><strong>Joined:</strong> {format(new Date(user.joinedDate), 'MMMM d, yyyy')}</p>
-                            <p><strong>Bio:</strong> No bio yet.</p>
+                            <p><strong>Bio:</strong> {user.bio ? user.bio : 'No bio yet.'}</p>
                         </div>
                     </TabsContent>
 
                     <TabsContent value="posts" className="mt-6">
-                        <div className="bg-white rounded-lg p-6 shadow-sm text-center text-gray-500">
-                            No posts available yet.
-                        </div>
+                        {posts.length === 0 ? (
+                            <div className="bg-white rounded-lg p-6 shadow-sm text-center text-gray-500">
+                                No posts available yet.
+                            </div>
+                        ) : (
+                            <div className="flex flex-col gap-6">
+                                {posts.map((post) => (
+                                    <PostCard key={post.id} post={post} /> // Using correct component name
+                                ))}
+                            </div>
+                        )}
+                    </TabsContent>
+
+                    <TabsContent value="communities" className="mt-6">
+                        {communities && communities.length > 0 ? (
+                            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
+                                {communities.map((community) => (
+                                    <div
+                                        key={community.id}
+                                        className="bg-white rounded-lg p-4 shadow-sm hover:shadow-md transition-shadow cursor-pointer"
+                                        onClick={() => router.push(`/community/${community.id}`)}
+                                    >
+                                        <div className="flex items-center gap-3">
+                                            <Avatar className="h-10 w-10">
+                                                {community.image ? (
+                                                    <AvatarImage src={community.image} alt={community.name} />
+                                                ) : (
+                                                    <AvatarFallback className="bg-gradient-to-br from-purple-500 to-indigo-600 text-white">
+                                                        {community.name.charAt(0)}
+                                                    </AvatarFallback>
+                                                )}
+                                            </Avatar>
+                                            <div>
+                                                <h3 className="font-medium">{community.name}</h3>
+                                            </div>
+                                        </div>
+                                    </div>
+                                ))}
+                            </div>
+                        ) : (
+                            <div className="bg-white rounded-lg p-6 shadow-sm text-center text-gray-500">
+                                No communities joined yet.
+                            </div>
+                        )}
                     </TabsContent>
                 </Tabs>
             </motion.div>
Index: public/manifest.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\r\n  \"name\": \"ChatterSphere\",\r\n  \"short_name\": \"ChatterSphere\",\r\n  \"start_url\": \"/\",\r\n  \"display\": \"standalone\",\r\n  \"background_color\": \"#ffffff\",\r\n  \"theme_color\": \"#4338ca\",\r\n  \"icons\": [\r\n    {\r\n      \"src\": \"/icon-192.png\",\r\n      \"sizes\": \"192x192\",\r\n      \"type\": \"image/png\"\r\n    },\r\n    {\r\n      \"src\": \"/icon-512.png\",\r\n      \"sizes\": \"512x512\",\r\n      \"type\": \"image/png\"\r\n    }\r\n  ]\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/public/manifest.json b/public/manifest.json
--- a/public/manifest.json	(revision 4c74be27f19335e5b956190fea65a1f797f84875)
+++ b/public/manifest.json	(date 1747009942984)
@@ -1,20 +1,23 @@
 {
   "name": "ChatterSphere",
   "short_name": "ChatterSphere",
+  "description": "Connect through meaningful conversations",
   "start_url": "/",
   "display": "standalone",
   "background_color": "#ffffff",
-  "theme_color": "#4338ca",
+  "theme_color": "#00AEEF",
   "icons": [
     {
       "src": "/icon-192.png",
       "sizes": "192x192",
-      "type": "image/png"
+      "type": "image/png",
+      "purpose": "any maskable"
     },
     {
       "src": "/icon-512.png",
       "sizes": "512x512",
-      "type": "image/png"
+      "type": "image/png",
+      "purpose": "any maskable"
     }
   ]
 }
\ No newline at end of file
Index: src/app/api/users/[userId]/follow/route.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/app/api/users/[userId]/follow/route.ts b/src/app/api/users/[username]/follow/route.ts
rename from src/app/api/users/[userId]/follow/route.ts
rename to src/app/api/users/[username]/follow/route.ts
--- a/src/app/api/users/[userId]/follow/route.ts	(revision 4c74be27f19335e5b956190fea65a1f797f84875)
+++ b/src/app/api/users/[username]/follow/route.ts	(date 1747009942882)
@@ -1,13 +1,15 @@
-// src/app/api/users/[userId]/follow/route.ts
+// src/app/api/users/[username]/follow/route.ts
 
 import { NextRequest, NextResponse } from "next/server";
 import { auth } from "@clerk/nextjs/server";
 import connectToDatabase from "@/lib/dbConnect";
+import mongoose from "mongoose";
 import User from "@/models/User";
+import { FollowResponse } from "@/types/api";
 
-export async function POST(req: NextRequest, { params }: { params: { userId: string } }) {
+export async function POST(req: NextRequest, { params }: { params: { username: string } }) {
   try {
-    const { userId: targetUserId } = params;
+    const { username } = params;
     const { userId: clerkUserId } = await auth();
 
     if (!clerkUserId) {
@@ -16,36 +18,43 @@
 
     await connectToDatabase();
 
-    const currentUser = await User.findOne({ clerkId: clerkUserId });
-    const targetUser = await User.findById(targetUserId);
+    const currentUser = await User.findOne({ clerkId: clerkUserId }).exec();
+    const targetUser = await User.findOne({ username }).exec();
 
     if (!currentUser || !targetUser) {
       return NextResponse.json({ error: "User not found" }, { status: 404 });
     }
 
-    const alreadyFollowing = currentUser.following.includes(targetUser._id);
+    // Ensure we have ObjectId instances
+    const currentUserId = currentUser._id;
+    const targetUserObjectId = targetUser._id;
+
+    // Check if already following using proper ObjectId comparison
+    const alreadyFollowing = currentUser.following.some((id: mongoose.Types.ObjectId) => id.equals(targetUserObjectId));
 
     if (alreadyFollowing) {
       // Unfollow
       currentUser.following = currentUser.following.filter(
-          (id) => !id.equals(targetUser._id)
+        (id: mongoose.Types.ObjectId) => !id.equals(targetUserObjectId)
       );
       targetUser.followers = targetUser.followers.filter(
-          (id) => !id.equals(currentUser._id)
+        (id: mongoose.Types.ObjectId) => !id.equals(currentUserId)
       );
     } else {
       // Follow
-      currentUser.following.push(targetUser._id);
-      targetUser.followers.push(currentUser._id);
+      currentUser.following.push(targetUserObjectId);
+      targetUser.followers.push(currentUserId);
     }
 
     await currentUser.save();
     await targetUser.save();
 
-    return NextResponse.json({
+    const response: FollowResponse = {
       isFollowing: !alreadyFollowing,
-      followerCount: targetUser.followers.length,
-    });
+      followersCount: targetUser.followers.length,
+    };
+
+    return NextResponse.json(response);
   } catch (err) {
     console.error("[FOLLOW] Error:", err);
     return NextResponse.json({ error: "Internal Server Error" }, { status: 500 });
Index: src/app/api/users/[userId]/route.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/app/api/users/[userId]/route.ts b/src/app/api/users/[username]/route.ts
rename from src/app/api/users/[userId]/route.ts
rename to src/app/api/users/[username]/route.ts
--- a/src/app/api/users/[userId]/route.ts	(revision 4c74be27f19335e5b956190fea65a1f797f84875)
+++ b/src/app/api/users/[username]/route.ts	(date 1747009942822)
@@ -1,9 +1,17 @@
-// src/app/api/users/[userId]/route.ts
+// src/app/api/users/[username]/route.ts
 import { NextRequest, NextResponse } from "next/server";
 import { auth } from "@clerk/nextjs/server";
 import connectToDatabase from "@/lib/dbConnect";
 import User, { IUser } from "@/models/User";
-import mongoose from "mongoose";
+import { Types } from "mongoose";
+import { LeanDocument } from "@/types/mongoose";
+
+type UserWithPopulatedCommunities = LeanDocument<IUser> & {
+  communities: Array<{ _id: Types.ObjectId; name: string; image?: string }>;
+  followers: Types.ObjectId[];
+  following: Types.ObjectId[];
+  createdAt: Date;
+};
 
 interface PublicUserResponse {
   id: string;
@@ -19,21 +27,21 @@
 
 export async function GET(
     _req: NextRequest,
-    { params }: { params: { userId: string } }
+    { params }: { params: { username: string } }
 ) {
   try {
+    const { username } = params;
     const { userId: clerkUserId } = await auth();
 
-    if (!params?.userId || !mongoose.Types.ObjectId.isValid(params.userId)) {
-      return NextResponse.json({ error: "Invalid or missing userId" }, { status: 400 });
+    if (!username || typeof username !== "string") {
+      return NextResponse.json({ error: "Invalid or missing username" }, { status: 400 });
     }
 
     await connectToDatabase();
 
-    const userDoc = await User.findById(params.userId)
+    const userDoc = await User.findOne({ username })
         .populate("communities", "name image")
-        .lean()
-        .exec();
+        .lean<UserWithPopulatedCommunities>();
 
     if (!userDoc) {
       return NextResponse.json({ error: "User not found" }, { status: 404 });
@@ -48,11 +56,11 @@
       followingCount: userDoc.following.length,
       communityCount: userDoc.communities.length,
       joinedDate: userDoc.createdAt.toISOString(),
-      isFollowing: false,
+      isFollowing: false as boolean,
     } satisfies PublicUserResponse;
 
     if (clerkUserId) {
-      const me = await User.findOne({ clerkId: clerkUserId }).lean().exec();
+      const me = await User.findOne({ clerkId: clerkUserId }).lean<LeanDocument<IUser>>();
       if (me) {
         user.isFollowing = me.following.some(
             (id) => id.toString() === userDoc._id.toString()
Index: src/app/api/users/[username]/communities/route.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/app/api/users/[username]/communities/route.ts b/src/app/api/users/[username]/communities/route.ts
new file mode 100644
--- /dev/null	(date 1747009939728)
+++ b/src/app/api/users/[username]/communities/route.ts	(date 1747009939728)
@@ -0,0 +1,52 @@
+// src/app/api/users/[username]/communities/route.ts
+
+import { NextRequest, NextResponse } from "next/server";
+import connectToDatabase from "@/lib/dbConnect";
+import User, { IUser } from "@/models/User";
+import { ICommunity } from "@/models/Community";
+import { Types } from "mongoose";
+import { LeanDocument } from "@/types/mongoose";
+
+// Define a type for the populated user document
+type UserWithPopulatedCommunities = Omit<LeanDocument<IUser>, 'communities'> & {
+  communities: Array<LeanDocument<ICommunity> & {
+    members: Types.ObjectId[];
+  }>;
+};
+
+// Define the response type
+interface CommunityListItem {
+  id: string;
+  name: string;
+  image: string;
+  memberCount: number;
+}
+
+export async function GET(
+    _req: NextRequest,
+    { params }: { params: { username: string } }
+) {
+    try {
+        await connectToDatabase();
+
+        // 1) Load user
+        const user = await User.findOne({ username: params.username }).populate("communities").lean<UserWithPopulatedCommunities>();
+
+        if (!user) {
+            return NextResponse.json({ error: "User not found" }, { status: 404 });
+        }
+
+        // 2) Transform communities
+        const communities: CommunityListItem[] = user.communities.map((community) => ({
+            id: community._id.toString(),
+            name: community.name,
+            image: community.image || "/placeholder.png",
+            memberCount: community.members.length,
+        }));
+
+        return NextResponse.json({ communities }, { status: 200 });
+    } catch (err) {
+        console.error("[GET /users/[username]/communities] Error:", err);
+        return NextResponse.json({ error: "Failed to fetch user's communities" }, { status: 500 });
+    }
+}
Index: src/app/api/communities/[communityId]/roles/bulk/route.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/app/api/communities/[communityId]/roles/bulk/route.ts b/src/app/api/communities/[communityId]/roles/bulk/route.ts
new file mode 100644
--- /dev/null	(date 1747009940153)
+++ b/src/app/api/communities/[communityId]/roles/bulk/route.ts	(date 1747009940153)
@@ -0,0 +1,111 @@
+// src/app/api/communities/[communityId]/roles/bulk/route.ts
+import { NextRequest, NextResponse } from "next/server";
+import { auth } from "@clerk/nextjs/server";
+import connectToDatabase from "@/lib/dbConnect";
+import Role from "@/models/Role";
+import { RoleInfo } from "@/types/api";
+import { z } from "zod";
+import { isCommunityCreator, hasPermission } from "@/utils/roleUtils";
+
+// Validation schemas
+const ParamsSchema = z.object({
+  communityId: z.string().min(1)
+});
+
+const BulkUpdateSchema = z.object({
+  operations: z.array(z.object({
+    roleId: z.string().min(1),
+    position: z.number().int().min(0)
+  }))
+});
+
+
+
+/**
+ * PATCH to update multiple roles at once (primarily for reordering)
+ */
+export async function PATCH(
+  req: NextRequest,
+  { params }: { params: { communityId: string } }
+) {
+  try {
+    // Authenticate user
+    const { userId } = await auth();
+    if (!userId) {
+      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
+    }
+
+    // Validate parameters
+    const validatedParams = ParamsSchema.safeParse(params);
+    if (!validatedParams.success) {
+      return NextResponse.json({ error: "Invalid parameters", details: validatedParams.error.format() }, { status: 400 });
+    }
+
+    const { communityId } = validatedParams.data;
+
+    await connectToDatabase();
+
+    // Check if user is the creator or has MANAGE_ROLES permission
+    const isCreator = await isCommunityCreator(userId, communityId);
+    const canManageRoles = !isCreator ? await hasPermission(userId, communityId, 'MANAGE_ROLES') : false;
+
+    if (!isCreator && !canManageRoles) {
+      return NextResponse.json({
+        error: "You don't have permission to update roles"
+      }, { status: 403 });
+    }
+
+    // Parse and validate request body
+    const body = await req.json();
+    const validatedBody = BulkUpdateSchema.safeParse(body);
+
+    if (!validatedBody.success) {
+      return NextResponse.json({
+        error: "Invalid bulk update data",
+        details: validatedBody.error.format()
+      }, { status: 400 });
+    }
+
+    const { operations } = validatedBody.data;
+
+    // Start a transaction for atomicity
+    const session = await Role.startSession();
+    try {
+      await session.withTransaction(async () => {
+        // Process each operation
+        for (const op of operations) {
+          await Role.findOneAndUpdate(
+            { _id: op.roleId, community: communityId },
+            { position: op.position },
+            { session }
+          );
+        }
+      });
+
+      // Fetch updated roles
+      const updatedRoles = await Role.find({ community: communityId })
+        .sort({ position: 1 })
+        .lean();
+
+      // Format the response
+      const formattedRoles: RoleInfo[] = updatedRoles.map((role) => ({
+        id: role._id.toString(),
+        name: role.name,
+        color: role.color,
+        position: role.position,
+        isDefault: role.isDefault
+      }));
+
+      return NextResponse.json({
+        success: true,
+        message: "Roles updated successfully",
+        roles: formattedRoles
+      }, { status: 200 });
+    } finally {
+      await session.endSession();
+    }
+  } catch (error) {
+    console.error("[BULK UPDATE ROLES]", error);
+    return NextResponse.json({ error: "Failed to update roles" }, { status: 500 });
+  }
+}
Index: src/components/enhanced/topbar.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/enhanced/topbar.tsx b/src/components/enhanced/topbar.tsx
new file mode 100644
--- /dev/null	(date 1747009940240)
+++ b/src/components/enhanced/topbar.tsx	(date 1747009940240)
@@ -0,0 +1,211 @@
+"use client"
+
+import { Search, Bell, PlusCircle, Menu, MessageSquare } from "lucide-react"
+import { UserButton } from "@clerk/nextjs"
+import { Button } from "@/components/ui/button"
+import { Input } from "@/components/ui/input"
+import { useState, useEffect, useCallback } from "react"
+import { motion } from "framer-motion"
+import { useNotifications } from "@/context/NotificationContext"
+import Link from "next/link"
+import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
+import { ThemeToggle } from "@/components/theme-toggle"
+import {
+    DropdownMenu,
+    DropdownMenuContent,
+    DropdownMenuItem,
+    DropdownMenuLabel,
+    DropdownMenuSeparator,
+    DropdownMenuTrigger
+} from "@/components/ui/dropdown-menu"
+
+interface TopbarProps {
+    isMobileMenuOpen: boolean;
+    setIsMobileMenuOpen: (open: boolean) => void;
+}
+
+export function Topbar({ isMobileMenuOpen, setIsMobileMenuOpen }: TopbarProps) {
+    const [isScrolled, setIsScrolled] = useState(false)
+    const [searchFocused, setSearchFocused] = useState(false)
+    const { unreadCount } = useNotifications()
+
+    // Handle scroll events for shadow effect
+    useEffect(() => {
+        // SSR guard
+        if (typeof window === 'undefined') return;
+
+        const handleScroll = () => {
+            setIsScrolled(window.scrollY > 10)
+        }
+
+        // Initial check
+        handleScroll();
+
+        window.addEventListener('scroll', handleScroll)
+        return () => window.removeEventListener('scroll', handleScroll)
+    }, [])
+
+    return (
+        <motion.div
+            className={`sticky top-0 z-20 h-16 border-b border-gray-100 bg-white px-4 flex items-center justify-between transition-shadow ${isScrolled ? 'shadow-sm' : ''}`}
+            initial={{ y: -100 }}
+            animate={{ y: 0 }}
+            transition={{ type: "spring", stiffness: 300, damping: 30 }}
+        >
+            {/* Mobile Menu Button and Logo */}
+            <div className="flex md:hidden items-center gap-3">
+                <Button
+                    variant="ghost"
+                    size="icon"
+                    className="text-gray-600 hover:text-[#00AEEF] hover:bg-blue-50"
+                    onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}
+                >
+                    <Menu className="h-5 w-5" />
+                    <span className="sr-only">Menu</span>
+                </Button>
+
+                <div className="h-8 w-8 rounded-full bg-gradient-to-r from-[#00AEEF] to-[#EC4899] flex items-center justify-center shadow-sm">
+                    <span className="text-white font-bold text-sm">CS</span>
+                </div>
+            </div>
+
+            {/* Search Bar */}
+            <div className="hidden md:flex items-center max-w-md w-full mx-auto relative">
+                <Search className={`absolute left-3 h-4 w-4 text-gray-400 transition-colors ${searchFocused ? 'text-[#00AEEF]' : ''}`} aria-hidden="true" />
+                <form
+                    action="/search"
+                    className="w-full"
+                    role="search"
+                    onSubmit={(e) => {
+                        const input = e.currentTarget.querySelector('input');
+                        if (!input?.value.trim()) {
+                            e.preventDefault();
+                        }
+                    }}
+                >
+                    <Input
+                        name="q"
+                        placeholder="Search ChatterSphere"
+                        className="pl-10 bg-gray-50 border-gray-200 focus-visible:ring-[#00AEEF]/30 focus-visible:ring-offset-0 focus-visible:border-[#00AEEF] transition-all"
+                        onFocus={() => setSearchFocused(true)}
+                        onBlur={() => setSearchFocused(false)}
+                        aria-label="Search ChatterSphere"
+                    />
+                </form>
+            </div>
+
+            {/* Mobile Search Button */}
+            <div className="md:hidden">
+                <Link href="/search" aria-label="Search">
+                    <Button
+                        variant="ghost"
+                        size="icon"
+                        className="rounded-full text-gray-600 hover:text-[#00AEEF] hover:bg-blue-50 transition-colors focus:ring-2 focus:ring-[#00AEEF] focus:ring-offset-2"
+                        aria-label="Search"
+                    >
+                        <Search className="h-5 w-5" />
+                        <span className="sr-only">Search</span>
+                    </Button>
+                </Link>
+            </div>
+
+            {/* Action Buttons */}
+            <div className="flex items-center gap-1 md:gap-3">
+                <div className="relative">
+                    <Link href="/notifications" aria-label="Notifications">
+                        <Button
+                            variant="ghost"
+                            size="icon"
+                            className="rounded-full text-gray-600 hover:text-[#00AEEF] hover:bg-blue-50 transition-colors focus:ring-2 focus:ring-[#00AEEF] focus:ring-offset-2"
+                            aria-label={`Notifications ${unreadCount > 0 ? `(${unreadCount} unread)` : ''}`}
+                        >
+                            <Bell className="h-5 w-5" />
+                            <span className="sr-only">Notifications</span>
+                        </Button>
+                    </Link>
+                    {unreadCount > 0 && (
+                        <span className="absolute top-0 right-0 h-5 w-5 rounded-full bg-red-500 flex items-center justify-center text-white text-xs font-bold" aria-hidden="true">
+                            {unreadCount > 9 ? '9+' : unreadCount}
+                        </span>
+                    )}
+                </div>
+
+                <div className="relative">
+                    <Link href="/messages" aria-label="Messages">
+                        <Button
+                            variant="ghost"
+                            size="icon"
+                            className="rounded-full text-gray-600 hover:text-[#00AEEF] hover:bg-blue-50 transition-colors focus:ring-2 focus:ring-[#00AEEF] focus:ring-offset-2"
+                            aria-label="Messages (new message available)"
+                        >
+                            <MessageSquare className="h-5 w-5" />
+                            <span className="sr-only">Messages</span>
+                        </Button>
+                    </Link>
+                    <span className="absolute top-0 right-0 h-2 w-2 rounded-full bg-red-500" aria-hidden="true"></span>
+                </div>
+
+                <DropdownMenu>
+                    <DropdownMenuTrigger asChild>
+                        <Button
+                            variant="ghost"
+                            size="sm"
+                            className="hidden md:flex items-center gap-1 text-gray-600 hover:text-[#00AEEF] hover:bg-blue-50 transition-colors focus:ring-2 focus:ring-[#00AEEF] focus:ring-offset-2"
+                            aria-label="Create content menu"
+                        >
+                            <PlusCircle className="h-4 w-4" />
+                            <span>Create</span>
+                        </Button>
+                    </DropdownMenuTrigger>
+                    <DropdownMenuContent align="end" className="w-56">
+                        <DropdownMenuLabel>Create New</DropdownMenuLabel>
+                        <DropdownMenuSeparator />
+                        <DropdownMenuItem>
+                            <Link href="/create/post" className="flex items-center w-full">
+                                Post
+                            </Link>
+                        </DropdownMenuItem>
+                        <DropdownMenuItem>
+                            <Link href="/create/community" className="flex items-center w-full">
+                                Community
+                            </Link>
+                        </DropdownMenuItem>
+                        <DropdownMenuItem>
+                            <Link href="/create/poll" className="flex items-center w-full">
+                                Poll
+                            </Link>
+                        </DropdownMenuItem>
+                    </DropdownMenuContent>
+                </DropdownMenu>
+
+                <Link href="/create-post" aria-label="Create new post" className="md:hidden">
+                    <Button
+                        variant="ghost"
+                        size="icon"
+                        className="rounded-full text-gray-600 hover:text-[#00AEEF] hover:bg-blue-50 transition-colors focus:ring-2 focus:ring-[#00AEEF] focus:ring-offset-2"
+                        aria-label="Create new post"
+                    >
+                        <PlusCircle className="h-5 w-5" />
+                        <span className="sr-only">New Post</span>
+                    </Button>
+                </Link>
+
+                {/* Theme Toggle */}
+                <ThemeToggle />
+
+                {/* Clerk UserButton with enhanced styling */}
+                <UserButton
+                    afterSignOutUrl="/"
+                    appearance={{
+                        elements: {
+                            userButtonAvatarBox: "h-9 w-9 border-2 border-white shadow-sm hover:border-[#00AEEF] transition-colors dark:border-gray-800",
+                            userButtonTrigger: "focus:ring-2 focus:ring-[#00AEEF] focus:ring-offset-2 rounded-full"
+                        }
+                    }}
+                    userProfileMode="navigation"
+                    userProfileUrl="/settings/profile"
+                />
+            </div>
+        </motion.div>
+    )
+}
Index: src/components/enhanced/sidebar.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/enhanced/sidebar.tsx b/src/components/enhanced/sidebar.tsx
new file mode 100644
--- /dev/null	(date 1747009940268)
+++ b/src/components/enhanced/sidebar.tsx	(date 1747009940268)
@@ -0,0 +1,450 @@
+"use client"
+
+import { Home, Compass, TrendingUp, Settings, HelpCircle, Bell, Bookmark, PlusCircle, MessageSquare, X } from "lucide-react"
+import { Button } from "@/components/ui/button"
+import { usePathname } from "next/navigation"
+import { motion, AnimatePresence } from "framer-motion"
+import { cn } from "@/lib/utils"
+import Link from "next/link"
+import { useState } from "react"
+import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
+import { Badge } from "@/components/ui/badge"
+
+interface SidebarProps {
+    isMobileMenuOpen: boolean;
+    setIsMobileMenuOpen: (open: boolean) => void;
+}
+
+export function Sidebar({ isMobileMenuOpen, setIsMobileMenuOpen }: SidebarProps) {
+    const pathname = usePathname()
+    const [activeSection, setActiveSection] = useState<string | null>(null)
+
+    const isActive = (path: string) => {
+        return pathname === path
+    }
+
+    const toggleSection = (section: string) => {
+        setActiveSection(activeSection === section ? null : section)
+    }
+
+    const sidebarVariants = {
+        hidden: { x: "-100%" },
+        visible: { x: 0 }
+    }
+
+    return (
+        <>
+            {/* Desktop Sidebar */}
+            <div className="fixed left-0 top-0 bottom-0 w-64 bg-white border-r border-gray-100 shadow-sm hidden md:block z-20">
+                <div className="flex flex-col h-full">
+                    {/* Header */}
+                    <div className="p-4 border-b border-gray-100">
+                        <motion.div
+                            className="flex items-center gap-2"
+                            initial={{ opacity: 0 }}
+                            animate={{ opacity: 1 }}
+                            transition={{ duration: 0.5 }}
+                        >
+                            <div className="h-10 w-10 rounded-full bg-gradient-to-r from-[#00AEEF] to-[#EC4899] flex items-center justify-center shadow-md">
+                                <span className="text-white font-bold text-sm">CS</span>
+                            </div>
+                            <span className="font-semibold text-lg text-gray-800">ChatterSphere</span>
+                        </motion.div>
+                    </div>
+
+                    {/* Scrollable content */}
+                    <div className="flex-1 overflow-y-auto py-4 px-3">
+                        {/* Main Navigation */}
+                        <div className="mb-6">
+                            <h3 className="text-xs font-medium text-gray-500 uppercase tracking-wider px-3 mb-3">Main</h3>
+                            <nav className="space-y-1">
+                                <Link href="/home">
+                                    <Button
+                                        variant="ghost"
+                                        className={cn(
+                                            "w-full justify-start font-medium",
+                                            isActive("/home") 
+                                                ? "bg-blue-50 text-[#00AEEF] hover:bg-blue-50 hover:text-[#00AEEF]" 
+                                                : "text-gray-700 hover:bg-gray-100"
+                                        )}
+                                    >
+                                        <Home className="h-5 w-5 mr-3" />
+                                        <span>Home</span>
+                                    </Button>
+                                </Link>
+
+                                <Link href="/popular">
+                                    <Button
+                                        variant="ghost"
+                                        className={cn(
+                                            "w-full justify-start font-medium",
+                                            isActive("/popular") 
+                                                ? "bg-blue-50 text-[#00AEEF] hover:bg-blue-50 hover:text-[#00AEEF]" 
+                                                : "text-gray-700 hover:bg-gray-100"
+                                        )}
+                                    >
+                                        <TrendingUp className="h-5 w-5 mr-3" />
+                                        <span>Popular</span>
+                                    </Button>
+                                </Link>
+
+                                <Link href="/explore">
+                                    <Button
+                                        variant="ghost"
+                                        className={cn(
+                                            "w-full justify-start font-medium",
+                                            isActive("/explore") 
+                                                ? "bg-blue-50 text-[#00AEEF] hover:bg-blue-50 hover:text-[#00AEEF]" 
+                                                : "text-gray-700 hover:bg-gray-100"
+                                        )}
+                                    >
+                                        <Compass className="h-5 w-5 mr-3" />
+                                        <span>Explore</span>
+                                    </Button>
+                                </Link>
+
+                                <Link href="/notifications">
+                                    <Button
+                                        variant="ghost"
+                                        className={cn(
+                                            "w-full justify-start font-medium",
+                                            isActive("/notifications") 
+                                                ? "bg-blue-50 text-[#00AEEF] hover:bg-blue-50 hover:text-[#00AEEF]" 
+                                                : "text-gray-700 hover:bg-gray-100"
+                                        )}
+                                    >
+                                        <Bell className="h-5 w-5 mr-3" />
+                                        <span>Notifications</span>
+                                        <Badge className="ml-auto bg-red-500 hover:bg-red-600">3</Badge>
+                                    </Button>
+                                </Link>
+
+                                <Link href="/messages">
+                                    <Button
+                                        variant="ghost"
+                                        className={cn(
+                                            "w-full justify-start font-medium",
+                                            isActive("/messages") 
+                                                ? "bg-blue-50 text-[#00AEEF] hover:bg-blue-50 hover:text-[#00AEEF]" 
+                                                : "text-gray-700 hover:bg-gray-100"
+                                        )}
+                                    >
+                                        <MessageSquare className="h-5 w-5 mr-3" />
+                                        <span>Messages</span>
+                                        <Badge className="ml-auto bg-red-500 hover:bg-red-600">2</Badge>
+                                    </Button>
+                                </Link>
+
+                                <Link href="/saved">
+                                    <Button
+                                        variant="ghost"
+                                        className={cn(
+                                            "w-full justify-start font-medium",
+                                            isActive("/saved") 
+                                                ? "bg-blue-50 text-[#00AEEF] hover:bg-blue-50 hover:text-[#00AEEF]" 
+                                                : "text-gray-700 hover:bg-gray-100"
+                                        )}
+                                    >
+                                        <Bookmark className="h-5 w-5 mr-3" />
+                                        <span>Saved</span>
+                                    </Button>
+                                </Link>
+                            </nav>
+                        </div>
+
+                        {/* Communities Section */}
+                        <div className="mb-6">
+                            <div className="flex items-center justify-between px-3 mb-3">
+                                <h3 className="text-xs font-medium text-gray-500 uppercase tracking-wider">My Communities</h3>
+                                <Button variant="ghost" size="icon" className="h-5 w-5 text-gray-500 hover:text-[#00AEEF] hover:bg-blue-50">
+                                    <PlusCircle className="h-4 w-4" />
+                                </Button>
+                            </div>
+
+                            <nav className="space-y-1">
+                                {[
+                                    { name: "WebDev", color: "bg-blue-500", initial: "W", href: "/communities/webdev" },
+                                    { name: "TechTalk", color: "bg-purple-500", initial: "T", href: "/communities/techtalk" },
+                                    { name: "RemoteWork", color: "bg-green-500", initial: "R", href: "/communities/remotework" },
+                                ].map((community) => (
+                                    <Link href={community.href} key={community.name}>
+                                        <Button
+                                            variant="ghost"
+                                            className={cn(
+                                                "w-full justify-start font-medium",
+                                                pathname.includes(community.href) 
+                                                    ? "bg-blue-50 text-[#00AEEF] hover:bg-blue-50 hover:text-[#00AEEF]" 
+                                                    : "text-gray-700 hover:bg-gray-100"
+                                            )}
+                                        >
+                                            <div className={`h-5 w-5 rounded-full ${community.color} flex items-center justify-center mr-3`}>
+                                                <span className="text-white text-xs font-bold">{community.initial}</span>
+                                            </div>
+                                            <span>{community.name}</span>
+                                        </Button>
+                                    </Link>
+                                ))}
+
+                                <Button
+                                    variant="ghost"
+                                    className="w-full justify-start text-[#00AEEF] font-medium hover:bg-blue-50"
+                                >
+                                    <PlusCircle className="h-5 w-5 mr-3" />
+                                    <span>Join Community</span>
+                                </Button>
+                            </nav>
+                        </div>
+                    </div>
+
+                    {/* Footer */}
+                    <div className="p-4 border-t border-gray-100">
+                        <nav className="space-y-1">
+                            <Link href="/settings/profile">
+                                <Button
+                                    variant="ghost"
+                                    className={cn(
+                                        "w-full justify-start font-medium",
+                                        pathname.startsWith('/settings') 
+                                            ? "bg-blue-50 text-[#00AEEF] hover:bg-blue-50 hover:text-[#00AEEF]" 
+                                            : "text-gray-700 hover:bg-gray-100"
+                                    )}
+                                >
+                                    <Settings className="h-5 w-5 mr-3" />
+                                    <span>Settings</span>
+                                </Button>
+                            </Link>
+
+                            <Button
+                                variant="ghost"
+                                className="w-full justify-start font-medium text-gray-700 hover:bg-gray-100"
+                            >
+                                <HelpCircle className="h-5 w-5 mr-3" />
+                                <span>Help & Support</span>
+                            </Button>
+                        </nav>
+                    </div>
+                </div>
+            </div>
+
+            {/* Mobile Sidebar */}
+            <AnimatePresence>
+                {isMobileMenuOpen && (
+                    <motion.div
+                        className="fixed inset-y-0 left-0 w-64 bg-white border-r border-gray-100 shadow-lg z-50 md:hidden"
+                        initial="hidden"
+                        animate="visible"
+                        exit="hidden"
+                        variants={sidebarVariants}
+                        transition={{ type: "spring", stiffness: 300, damping: 30 }}
+                    >
+                        <div className="flex flex-col h-full">
+                            {/* Header with close button */}
+                            <div className="p-4 border-b border-gray-100 flex items-center justify-between">
+                                <div className="flex items-center gap-2">
+                                    <div className="h-8 w-8 rounded-full bg-gradient-to-r from-[#00AEEF] to-[#EC4899] flex items-center justify-center shadow-md">
+                                        <span className="text-white font-bold text-xs">CS</span>
+                                    </div>
+                                    <span className="font-semibold text-base text-gray-800">ChatterSphere</span>
+                                </div>
+                                <Button 
+                                    variant="ghost" 
+                                    size="icon" 
+                                    className="text-gray-500 hover:bg-gray-100"
+                                    onClick={() => setIsMobileMenuOpen(false)}
+                                >
+                                    <X className="h-5 w-5" />
+                                </Button>
+                            </div>
+
+                            {/* User profile */}
+                            <div className="p-4 border-b border-gray-100">
+                                <div className="flex items-center gap-3">
+                                    <Avatar className="h-10 w-10 border-2 border-white shadow-sm">
+                                        <AvatarImage src="https://github.com/shadcn.png" />
+                                        <AvatarFallback>CN</AvatarFallback>
+                                    </Avatar>
+                                    <div>
+                                        <p className="font-medium text-sm text-gray-800">Connor Nelson</p>
+                                        <p className="text-xs text-gray-500">@connornelson</p>
+                                    </div>
+                                </div>
+                            </div>
+
+                            {/* Scrollable content - same as desktop */}
+                            <div className="flex-1 overflow-y-auto py-4 px-3">
+                                {/* Main Navigation */}
+                                <div className="mb-6">
+                                    <h3 className="text-xs font-medium text-gray-500 uppercase tracking-wider px-3 mb-3">Main</h3>
+                                    <nav className="space-y-1">
+                                        <Link href="/home">
+                                            <Button
+                                                variant="ghost"
+                                                className={cn(
+                                                    "w-full justify-start font-medium",
+                                                    isActive("/home") 
+                                                        ? "bg-blue-50 text-[#00AEEF] hover:bg-blue-50 hover:text-[#00AEEF]" 
+                                                        : "text-gray-700 hover:bg-gray-100"
+                                                )}
+                                                onClick={() => setIsMobileMenuOpen(false)}
+                                            >
+                                                <Home className="h-5 w-5 mr-3" />
+                                                <span>Home</span>
+                                            </Button>
+                                        </Link>
+
+                                        <Link href="/popular">
+                                            <Button
+                                                variant="ghost"
+                                                className={cn(
+                                                    "w-full justify-start font-medium",
+                                                    isActive("/popular") 
+                                                        ? "bg-blue-50 text-[#00AEEF] hover:bg-blue-50 hover:text-[#00AEEF]" 
+                                                        : "text-gray-700 hover:bg-gray-100"
+                                                )}
+                                                onClick={() => setIsMobileMenuOpen(false)}
+                                            >
+                                                <TrendingUp className="h-5 w-5 mr-3" />
+                                                <span>Popular</span>
+                                            </Button>
+                                        </Link>
+
+                                        <Link href="/explore">
+                                            <Button
+                                                variant="ghost"
+                                                className={cn(
+                                                    "w-full justify-start font-medium",
+                                                    isActive("/explore") 
+                                                        ? "bg-blue-50 text-[#00AEEF] hover:bg-blue-50 hover:text-[#00AEEF]" 
+                                                        : "text-gray-700 hover:bg-gray-100"
+                                                )}
+                                                onClick={() => setIsMobileMenuOpen(false)}
+                                            >
+                                                <Compass className="h-5 w-5 mr-3" />
+                                                <span>Explore</span>
+                                            </Button>
+                                        </Link>
+
+                                        <Link href="/notifications">
+                                            <Button
+                                                variant="ghost"
+                                                className={cn(
+                                                    "w-full justify-start font-medium",
+                                                    isActive("/notifications") 
+                                                        ? "bg-blue-50 text-[#00AEEF] hover:bg-blue-50 hover:text-[#00AEEF]" 
+                                                        : "text-gray-700 hover:bg-gray-100"
+                                                )}
+                                                onClick={() => setIsMobileMenuOpen(false)}
+                                            >
+                                                <Bell className="h-5 w-5 mr-3" />
+                                                <span>Notifications</span>
+                                                <Badge className="ml-auto bg-red-500 hover:bg-red-600">3</Badge>
+                                            </Button>
+                                        </Link>
+
+                                        <Link href="/messages">
+                                            <Button
+                                                variant="ghost"
+                                                className={cn(
+                                                    "w-full justify-start font-medium",
+                                                    isActive("/messages") 
+                                                        ? "bg-blue-50 text-[#00AEEF] hover:bg-blue-50 hover:text-[#00AEEF]" 
+                                                        : "text-gray-700 hover:bg-gray-100"
+                                                )}
+                                                onClick={() => setIsMobileMenuOpen(false)}
+                                            >
+                                                <MessageSquare className="h-5 w-5 mr-3" />
+                                                <span>Messages</span>
+                                                <Badge className="ml-auto bg-red-500 hover:bg-red-600">2</Badge>
+                                            </Button>
+                                        </Link>
+
+                                        <Link href="/saved">
+                                            <Button
+                                                variant="ghost"
+                                                className={cn(
+                                                    "w-full justify-start font-medium",
+                                                    isActive("/saved") 
+                                                        ? "bg-blue-50 text-[#00AEEF] hover:bg-blue-50 hover:text-[#00AEEF]" 
+                                                        : "text-gray-700 hover:bg-gray-100"
+                                                )}
+                                                onClick={() => setIsMobileMenuOpen(false)}
+                                            >
+                                                <Bookmark className="h-5 w-5 mr-3" />
+                                                <span>Saved</span>
+                                            </Button>
+                                        </Link>
+                                    </nav>
+                                </div>
+
+                                {/* Communities Section */}
+                                <div className="mb-6">
+                                    <div className="flex items-center justify-between px-3 mb-3">
+                                        <h3 className="text-xs font-medium text-gray-500 uppercase tracking-wider">My Communities</h3>
+                                        <Button variant="ghost" size="icon" className="h-5 w-5 text-gray-500 hover:text-[#00AEEF] hover:bg-blue-50">
+                                            <PlusCircle className="h-4 w-4" />
+                                        </Button>
+                                    </div>
+
+                                    <nav className="space-y-1">
+                                        {[
+                                            { name: "WebDev", color: "bg-blue-500", initial: "W", href: "/communities/webdev" },
+                                            { name: "TechTalk", color: "bg-purple-500", initial: "T", href: "/communities/techtalk" },
+                                            { name: "RemoteWork", color: "bg-green-500", initial: "R", href: "/communities/remotework" },
+                                        ].map((community) => (
+                                            <Link href={community.href} key={community.name}>
+                                                <Button
+                                                    variant="ghost"
+                                                    className={cn(
+                                                        "w-full justify-start font-medium",
+                                                        pathname.includes(community.href) 
+                                                            ? "bg-blue-50 text-[#00AEEF] hover:bg-blue-50 hover:text-[#00AEEF]" 
+                                                            : "text-gray-700 hover:bg-gray-100"
+                                                    )}
+                                                    onClick={() => setIsMobileMenuOpen(false)}
+                                                >
+                                                    <div className={`h-5 w-5 rounded-full ${community.color} flex items-center justify-center mr-3`}>
+                                                        <span className="text-white text-xs font-bold">{community.initial}</span>
+                                                    </div>
+                                                    <span>{community.name}</span>
+                                                </Button>
+                                            </Link>
+                                        ))}
+                                    </nav>
+                                </div>
+                            </div>
+
+                            {/* Footer */}
+                            <div className="p-4 border-t border-gray-100">
+                                <nav className="space-y-1">
+                                    <Link href="/settings/profile">
+                                        <Button
+                                            variant="ghost"
+                                            className={cn(
+                                                "w-full justify-start font-medium",
+                                                pathname.startsWith('/settings') 
+                                                    ? "bg-blue-50 text-[#00AEEF] hover:bg-blue-50 hover:text-[#00AEEF]" 
+                                                    : "text-gray-700 hover:bg-gray-100"
+                                            )}
+                                            onClick={() => setIsMobileMenuOpen(false)}
+                                        >
+                                            <Settings className="h-5 w-5 mr-3" />
+                                            <span>Settings</span>
+                                        </Button>
+                                    </Link>
+
+                                    <Button
+                                        variant="ghost"
+                                        className="w-full justify-start font-medium text-gray-700 hover:bg-gray-100"
+                                    >
+                                        <HelpCircle className="h-5 w-5 mr-3" />
+                                        <span>Help & Support</span>
+                                    </Button>
+                                </nav>
+                            </div>
+                        </div>
+                    </motion.div>
+                )}
+            </AnimatePresence>
+        </>
+    )
+}
Index: src/utils/roleUtils.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/utils/roleUtils.ts b/src/utils/roleUtils.ts
new file mode 100644
--- /dev/null	(date 1747009940180)
+++ b/src/utils/roleUtils.ts	(date 1747009940180)
@@ -0,0 +1,120 @@
+// src/utils/roleUtils.ts
+import { Types } from "mongoose";
+import User from "@/models/User";
+import Community from "@/models/Community";
+import Membership from "@/models/Membership";
+import Role, { Permission } from "@/models/Role";
+import { RoleDocument } from "@/types/roles";
+import { RoleInfo } from "@/types/api";
+
+/**
+ * Check if a user is a member of a community
+ */
+export async function isCommunityMember(userId: string, communityId: string): Promise<boolean> {
+  const user = await User.findOne({ clerkId: userId });
+  if (!user) return false;
+  
+  const membership = await Membership.findOne({
+    user: user._id,
+    community: communityId
+  });
+  
+  return !!membership;
+}
+
+/**
+ * Check if a user is the creator of a community
+ */
+export async function isCommunityCreator(userId: string, communityId: string): Promise<boolean> {
+  const user = await User.findOne({ clerkId: userId });
+  if (!user) return false;
+  
+  const community = await Community.findById(communityId);
+  if (!community) return false;
+  
+  return community.creator.equals(user._id);
+}
+
+/**
+ * Check if a user has a specific permission in a community
+ */
+export async function hasPermission(userId: string, communityId: string, permission: Permission): Promise<boolean> {
+  const user = await User.findOne({ clerkId: userId });
+  if (!user) return false;
+  
+  const membership = await Membership.findOne({
+    user: user._id,
+    community: communityId
+  });
+  
+  if (!membership) return false;
+  
+  return membership.hasPermission(permission);
+}
+
+/**
+ * Get a user's roles in a community
+ */
+export async function getUserRoles(userId: string, communityId: string): Promise<RoleDocument[]> {
+  const user = await User.findOne({ clerkId: userId });
+  if (!user) return [];
+  
+  const membership = await Membership.findOne({
+    user: user._id,
+    community: communityId
+  }).populate('roles');
+  
+  if (!membership) return [];
+  
+  return membership.roles as unknown as RoleDocument[];
+}
+
+/**
+ * Format a role document to a role info response
+ */
+export function formatRoleResponse(role: RoleDocument): RoleInfo {
+  return {
+    id: role._id.toString(),
+    name: role.name,
+    color: role.color,
+    position: role.position,
+    isDefault: role.isDefault
+  };
+}
+
+/**
+ * Get the default role for a community
+ */
+export async function getDefaultRole(communityId: string): Promise<RoleDocument | null> {
+  return Role.findOne({ community: communityId, isDefault: true }).lean();
+}
+
+/**
+ * Assign roles to a user in a community
+ */
+export async function assignRolesToUser(
+  userId: Types.ObjectId, 
+  communityId: string, 
+  roleIds: Types.ObjectId[]
+): Promise<boolean> {
+  const membership = await Membership.findOne({
+    user: userId,
+    community: communityId
+  });
+  
+  if (!membership) return false;
+  
+  // Validate that all roles exist and belong to this community
+  const roles = await Role.find({
+    _id: { $in: roleIds },
+    community: communityId
+  });
+  
+  if (roles.length !== roleIds.length) return false;
+  
+  // Set the roles
+  membership.roles = roleIds;
+  await membership.save();
+  
+  return true;
+}
Index: src/components/enhanced/right-sidebar.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/enhanced/right-sidebar.tsx b/src/components/enhanced/right-sidebar.tsx
new file mode 100644
--- /dev/null	(date 1747009940294)
+++ b/src/components/enhanced/right-sidebar.tsx	(date 1747009940294)
@@ -0,0 +1,229 @@
+import { MessageSquare, X, Users, TrendingUp, Calendar, ExternalLink, Gift } from "lucide-react"
+import { Button } from "@/components/ui/button"
+import { motion } from "framer-motion"
+import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
+import { Badge } from "@/components/ui/badge"
+import Link from "next/link"
+import { 
+    Card, 
+    CardContent, 
+    CardDescription, 
+    CardFooter, 
+    CardHeader, 
+    CardTitle 
+} from "@/components/ui/card"
+
+export function RightSidebar() {
+    return (
+        <aside className="hidden lg:block w-80 border-l border-gray-100 bg-white overflow-y-auto p-4 sticky top-16 h-[calc(100vh-4rem)]">
+            {/* User Profile Card */}
+            <div className="mb-6">
+                <Card className="border border-gray-100 shadow-sm overflow-hidden">
+                    <div className="h-20 bg-gradient-to-r from-[#00AEEF] to-[#EC4899]" />
+                    <div className="px-4 pb-4 -mt-10">
+                        <Avatar className="h-16 w-16 border-4 border-white shadow-md">
+                            <AvatarImage src="https://github.com/shadcn.png" />
+                            <AvatarFallback>CN</AvatarFallback>
+                        </Avatar>
+                        <div className="mt-2">
+                            <h3 className="font-semibold text-gray-800">Connor Nelson</h3>
+                            <p className="text-sm text-gray-500">@connornelson</p>
+                        </div>
+                        <div className="flex items-center justify-between mt-3 text-sm">
+                            <div>
+                                <p className="font-semibold">128</p>
+                                <p className="text-gray-500">Posts</p>
+                            </div>
+                            <div>
+                                <p className="font-semibold">1.2k</p>
+                                <p className="text-gray-500">Followers</p>
+                            </div>
+                            <div>
+                                <p className="font-semibold">843</p>
+                                <p className="text-gray-500">Following</p>
+                            </div>
+                        </div>
+                    </div>
+                </Card>
+            </div>
+
+            {/* Trending Topics */}
+            <div className="mb-6">
+                <div className="flex items-center justify-between mb-3">
+                    <h3 className="text-sm font-semibold text-gray-800">Trending Topics</h3>
+                    <Button variant="ghost" size="sm" className="h-6 px-2 text-xs text-[#00AEEF]">
+                        View All
+                    </Button>
+                </div>
+
+                <div className="space-y-3">
+                    {[
+                        { topic: "Web Development", posts: 128, category: "Technology" },
+                        { topic: "AI News", posts: 96, category: "Technology" },
+                        { topic: "Remote Work", posts: 84, category: "Lifestyle" }
+                    ].map((item, index) => (
+                        <motion.div
+                            key={item.topic}
+                            className="flex items-center gap-3 p-2 rounded-md hover:bg-gray-50 transition-colors"
+                            initial={{ opacity: 0, y: 10 }}
+                            animate={{ opacity: 1, y: 0 }}
+                            transition={{ delay: index * 0.1 }}
+                        >
+                            <div className="flex items-center justify-center h-8 w-8 rounded-full bg-blue-50 text-[#00AEEF]">
+                                <TrendingUp className="h-4 w-4" />
+                            </div>
+                            <div className="flex-1">
+                                <div className="flex items-center justify-between">
+                                    <p className="text-sm font-medium text-gray-800">{item.topic}</p>
+                                    <Badge variant="outline" className="text-xs bg-gray-50">
+                                        {item.category}
+                                    </Badge>
+                                </div>
+                                <p className="text-xs text-gray-500">{item.posts} posts</p>
+                            </div>
+                        </motion.div>
+                    ))}
+                </div>
+            </div>
+
+            {/* Upcoming Events */}
+            <div className="mb-6">
+                <div className="flex items-center justify-between mb-3">
+                    <h3 className="text-sm font-semibold text-gray-800">Upcoming Events</h3>
+                    <Button variant="ghost" size="sm" className="h-6 px-2 text-xs text-[#00AEEF]">
+                        View All
+                    </Button>
+                </div>
+
+                <motion.div
+                    className="bg-gradient-to-r from-[#00AEEF]/10 to-[#EC4899]/10 border border-[#00AEEF]/20 rounded-lg p-4"
+                    initial={{ opacity: 0 }}
+                    animate={{ opacity: 1 }}
+                    transition={{ delay: 0.2 }}
+                >
+                    <div className="flex items-center gap-3 mb-3">
+                        <div className="flex items-center justify-center h-10 w-10 rounded-full bg-white text-[#00AEEF] shadow-sm">
+                            <Calendar className="h-5 w-5" />
+                        </div>
+                        <div className="flex-1">
+                            <div className="flex items-center justify-between">
+                                <p className="text-sm font-medium text-gray-800">Community Meetup</p>
+                                <Badge className="bg-[#00AEEF]/20 text-[#00AEEF] border-none">Tomorrow</Badge>
+                            </div>
+                            <p className="text-xs text-gray-500">7:00 PM - 9:00 PM</p>
+                        </div>
+                    </div>
+                    <p className="text-xs text-gray-600 mb-3">Join us for our monthly community meetup to discuss the latest trends in web development.</p>
+                    <Button size="sm" className="bg-[#00AEEF] hover:bg-[#0099d6] text-white w-full">
+                        RSVP Now
+                    </Button>
+                </motion.div>
+            </div>
+
+            {/* Who to Follow */}
+            <div className="mb-6">
+                <div className="flex items-center justify-between mb-3">
+                    <h3 className="text-sm font-semibold text-gray-800">Who to Follow</h3>
+                    <Button variant="ghost" size="sm" className="h-6 px-2 text-xs text-[#00AEEF]">
+                        View All
+                    </Button>
+                </div>
+
+                <div className="space-y-3">
+                    {[
+                        { name: "Sarah Johnson", username: "@sarahj", image: "https://i.pravatar.cc/150?img=1", role: "UX Designer" },
+                        { name: "Michael Chen", username: "@mikechen", image: "https://i.pravatar.cc/150?img=3", role: "Full Stack Dev" },
+                        { name: "Aisha Patel", username: "@aishap", image: "https://i.pravatar.cc/150?img=5", role: "Product Manager" }
+                    ].map((user, index) => (
+                        <motion.div
+                            key={user.username}
+                            className="flex items-center justify-between p-2 rounded-md hover:bg-gray-50 transition-colors"
+                            initial={{ opacity: 0, x: 20 }}
+                            animate={{ opacity: 1, x: 0 }}
+                            transition={{ delay: index * 0.1 }}
+                        >
+                            <div className="flex items-center gap-2">
+                                <Avatar className="h-8 w-8">
+                                    <AvatarImage src={user.image} />
+                                    <AvatarFallback>{user.name.charAt(0)}</AvatarFallback>
+                                </Avatar>
+                                <div>
+                                    <p className="text-sm font-medium text-gray-800">{user.name}</p>
+                                    <p className="text-xs text-gray-500">{user.username} · {user.role}</p>
+                                </div>
+                            </div>
+                            <Button
+                                variant="outline"
+                                size="sm"
+                                className="h-7 text-xs border-[#00AEEF] text-[#00AEEF] hover:bg-blue-50"
+                            >
+                                Follow
+                            </Button>
+                        </motion.div>
+                    ))}
+                </div>
+            </div>
+
+            {/* Premium Upgrade Card */}
+            <div className="mb-6">
+                <motion.div
+                    className="bg-gradient-to-r from-amber-50 to-amber-100 border border-amber-200 rounded-lg p-4 relative overflow-hidden"
+                    whileHover={{ y: -2 }}
+                    transition={{ duration: 0.2 }}
+                >
+                    <div className="absolute top-0 right-0 p-2">
+                        <Button variant="ghost" size="icon" className="h-6 w-6 text-gray-400 hover:text-gray-600">
+                            <X className="h-4 w-4" />
+                            <span className="sr-only">Dismiss</span>
+                        </Button>
+                    </div>
+                    
+                    <div className="flex items-center gap-3 mb-3">
+                        <div className="flex items-center justify-center h-10 w-10 rounded-full bg-amber-500 text-white shadow-sm">
+                            <Gift className="h-5 w-5" />
+                        </div>
+                        <div>
+                            <p className="text-sm font-semibold text-gray-800">ChatterSphere Premium</p>
+                            <p className="text-xs text-gray-600">Unlock exclusive features</p>
+                        </div>
+                    </div>
+                    
+                    <ul className="text-xs text-gray-700 space-y-1 mb-3">
+                        <li className="flex items-center gap-1">
+                            <span className="h-1.5 w-1.5 rounded-full bg-amber-500"></span>
+                            <span>Ad-free browsing experience</span>
+                        </li>
+                        <li className="flex items-center gap-1">
+                            <span className="h-1.5 w-1.5 rounded-full bg-amber-500"></span>
+                            <span>Exclusive premium badges</span>
+                        </li>
+                        <li className="flex items-center gap-1">
+                            <span className="h-1.5 w-1.5 rounded-full bg-amber-500"></span>
+                            <span>Priority customer support</span>
+                        </li>
+                    </ul>
+                    
+                    <Button size="sm" className="w-full bg-amber-500 hover:bg-amber-600 text-white">
+                        Upgrade Now
+                    </Button>
+                </motion.div>
+            </div>
+
+            {/* Footer Links */}
+            <div className="text-xs text-gray-500">
+                <div className="flex flex-wrap gap-x-2 gap-y-1 mb-2">
+                    <Link href="/about" className="hover:text-[#00AEEF] hover:underline">About</Link>
+                    <span>•</span>
+                    <Link href="/terms" className="hover:text-[#00AEEF] hover:underline">Terms</Link>
+                    <span>•</span>
+                    <Link href="/privacy" className="hover:text-[#00AEEF] hover:underline">Privacy</Link>
+                    <span>•</span>
+                    <Link href="/cookies" className="hover:text-[#00AEEF] hover:underline">Cookies</Link>
+                    <span>•</span>
+                    <Link href="/ads" className="hover:text-[#00AEEF] hover:underline">Ads Info</Link>
+                </div>
+                <p>© 2023 ChatterSphere. All rights reserved.</p>
+            </div>
+        </aside>
+    )
+}
Index: src/lib/supabase-upload.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lib/supabase-upload.ts b/src/lib/supabase-upload.ts
new file mode 100644
--- /dev/null	(date 1747009940316)
+++ b/src/lib/supabase-upload.ts	(date 1747009940316)
@@ -0,0 +1,98 @@
+import { createClient } from '@supabase/supabase-js';
+
+export const supabase = createClient(
+    process.env.NEXT_PUBLIC_SUPABASE_URL!,
+    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
+    {
+        auth: {
+            persistSession: true,
+        },
+    }
+);
+
+/**
+ * Uploads an avatar image to Supabase Storage
+ * @param file The image file to upload
+ * @returns URL of the uploaded avatar or throws an error
+ */
+export async function uploadAvatarToSupabase(file: File): Promise<string> {
+    if (!file) throw new Error('No file provided');
+
+    // Validate file type
+    const validTypes = ['image/jpeg', 'image/png', 'image/webp', 'image/gif'];
+    if (!validTypes.includes(file.type)) {
+        throw new Error('Invalid file type. Please upload a JPEG, PNG, WEBP, or GIF image.');
+    }
+
+    // Validate file size (max 5MB)
+    if (file.size > 5 * 1024 * 1024) {
+        throw new Error('File is too large. Maximum size is 5MB.');
+    }
+
+    // Generate a unique filename
+    const fileExt = file.name.split('.').pop();
+    const fileName = `avatar_${Date.now()}.${fileExt}`;
+
+    // Upload to Supabase
+    const { data, error } = await supabase.storage
+        .from('avatars')
+        .upload(fileName, file, {
+            cacheControl: '3600',
+            upsert: false,
+        });
+
+    if (error) throw error;
+
+    // Get the public URL
+    const { data: urlData } = supabase.storage
+        .from('avatars')
+        .getPublicUrl(data.path);
+
+    return urlData.publicUrl;
+}
+
+/**
+ * Uploads media files for posts to Supabase Storage
+ * @param file The media file to upload
+ * @returns URL of the uploaded media or throws an error
+ */
+export async function uploadMediaToSupabase(file: File): Promise<string> {
+    if (!file) throw new Error('No file provided');
+
+    // Validate file type
+    const validTypes = [
+        'image/jpeg', 'image/png', 'image/webp', 'image/gif',
+        'video/mp4', 'video/quicktime', 'video/webm'
+    ];
+    if (!validTypes.includes(file.type)) {
+        throw new Error('Invalid file type. Please upload a supported image or video format.');
+    }
+
+    // Validate file size (max 50MB for videos, 10MB for images)
+    const isVideo = file.type.startsWith('video/');
+    const maxSize = isVideo ? 50 * 1024 * 1024 : 10 * 1024 * 1024;
+    if (file.size > maxSize) {
+        throw new Error(`File is too large. Maximum size is ${isVideo ? '50MB' : '10MB'}.`);
+    }
+
+    // Generate a unique filename
+    const fileExt = file.name.split('.').pop();
+    const fileName = `${isVideo ? 'video' : 'image'}_${Date.now()}.${fileExt}`;
+
+    // Upload to Supabase
+    const { data, error } = await supabase.storage
+        .from('media')
+        .upload(fileName, file, {
+            cacheControl: '3600',
+            upsert: false,
+        });
+
+    if (error) throw error;
+
+    // Get the public URL
+    const { data: urlData } = supabase.storage
+        .from('media')
+        .getPublicUrl(data.path);
+
+    return urlData.publicUrl;
+}
Index: src/app/(main)/settings/privacy/page.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/app/(main)/settings/privacy/page.tsx b/src/app/(main)/settings/privacy/page.tsx
new file mode 100644
--- /dev/null	(date 1747009940366)
+++ b/src/app/(main)/settings/privacy/page.tsx	(date 1747009940366)
@@ -0,0 +1,402 @@
+"use client";
+
+import { useState, useEffect } from "react";
+import { useRouter } from "next/navigation";
+import { motion } from "framer-motion";
+import { Button } from "@/components/ui/button";
+import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
+import { Switch } from "@/components/ui/switch";
+import { Label } from "@/components/ui/label";
+import { Separator } from "@/components/ui/separator";
+import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
+import { Loader2, Shield, Eye, Lock, UserSearch, Globe, Users, AlertCircle } from "lucide-react";
+import { toast } from "sonner";
+import { useAuth } from "@clerk/nextjs";
+
+interface PrivacySettings {
+  profileVisibility: "public" | "followers" | "private";
+  activityVisibility: "public" | "followers" | "private";
+  allowFollowers: boolean;
+  allowMessages: "everyone" | "followers" | "none";
+  showOnlineStatus: boolean;
+  allowTagging: boolean;
+  allowMentions: boolean;
+  searchable: boolean;
+}
+
+export default function PrivacySettingsPage() {
+  const router = useRouter();
+  const { isLoaded, isSignedIn } = useAuth();
+  const [loading, setLoading] = useState(true);
+  const [saving, setSaving] = useState(false);
+  const [error, setError] = useState<string | null>(null);
+  const [settings, setSettings] = useState<PrivacySettings>({
+    profileVisibility: "public",
+    activityVisibility: "public",
+    allowFollowers: true,
+    allowMessages: "everyone",
+    showOnlineStatus: true,
+    allowTagging: true,
+    allowMentions: true,
+    searchable: true,
+  });
+
+  useEffect(() => {
+    async function fetchPrivacySettings() {
+      try {
+        setLoading(true);
+        const response = await fetch("/api/users/me/privacy-settings");
+        if (!response.ok) throw new Error("Failed to fetch privacy settings");
+        const data = await response.json();
+        setSettings(data);
+      } catch (err) {
+        setError((err as Error).message);
+        toast.error("Failed to load privacy settings");
+      } finally {
+        setLoading(false);
+      }
+    }
+
+    if (isLoaded && isSignedIn) {
+      fetchPrivacySettings();
+    } else if (isLoaded && !isSignedIn) {
+      router.push("/sign-in");
+    }
+  }, [isLoaded, isSignedIn, router]);
+
+  const handleToggle = (key: keyof PrivacySettings) => {
+    setSettings((prev) => ({
+      ...prev,
+      [key]: !prev[key as keyof PrivacySettings],
+    }));
+  };
+
+  const handleRadioChange = (key: keyof PrivacySettings, value: string) => {
+    setSettings((prev) => ({
+      ...prev,
+      [key]: value,
+    }));
+  };
+
+  const saveSettings = async () => {
+    try {
+      setSaving(true);
+      const response = await fetch("/api/users/me/privacy-settings", {
+        method: "PATCH",
+        headers: {
+          "Content-Type": "application/json",
+        },
+        body: JSON.stringify(settings),
+      });
+
+      if (!response.ok) throw new Error("Failed to save privacy settings");
+      toast.success("Privacy settings saved successfully");
+    } catch (err) {
+      toast.error((err as Error).message);
+    } finally {
+      setSaving(false);
+    }
+  };
+
+  if (loading) {
+    return (
+      <div className="flex items-center justify-center h-full">
+        <Loader2 className="h-8 w-8 animate-spin text-blue-500" />
+      </div>
+    );
+  }
+
+  if (error) {
+    return (
+      <div className="max-w-2xl mx-auto p-6">
+        <div className="bg-red-50 border border-red-200 rounded-lg p-4 flex items-start">
+          <AlertCircle className="h-5 w-5 text-red-500 mt-0.5 mr-3" />
+          <div>
+            <h3 className="text-red-800 font-medium">Error</h3>
+            <p className="text-red-700 text-sm">{error}</p>
+          </div>
+        </div>
+        <Button className="mt-4" onClick={() => window.location.reload()}>
+          Try Again
+        </Button>
+      </div>
+    );
+  }
+
+  return (
+    <motion.div
+      initial={{ opacity: 0 }}
+      animate={{ opacity: 1 }}
+      className="max-w-2xl mx-auto p-6"
+    >
+      <div className="mb-8">
+        <h1 className="text-2xl font-bold text-gray-900">Privacy Settings</h1>
+        <p className="text-gray-500">Control who can see your content and interact with you</p>
+      </div>
+
+      <div className="space-y-6">
+        <Card>
+          <CardHeader>
+            <CardTitle className="flex items-center">
+              <Eye className="h-5 w-5 mr-2 text-blue-500" />
+              Profile Visibility
+            </CardTitle>
+            <CardDescription>
+              Control who can see your profile information
+            </CardDescription>
+          </CardHeader>
+          <CardContent>
+            <div className="space-y-4">
+              <div>
+                <Label className="text-base">Who can see your profile?</Label>
+                <RadioGroup
+                  value={settings.profileVisibility}
+                  onValueChange={(value) => handleRadioChange("profileVisibility", value)}
+                  className="mt-2 space-y-2"
+                >
+                  <div className="flex items-center space-x-2">
+                    <RadioGroupItem value="public" id="profile-public" />
+                    <Label htmlFor="profile-public" className="flex items-center">
+                      <Globe className="h-4 w-4 mr-2 text-green-500" />
+                      <div>
+                        <span>Public</span>
+                        <p className="text-sm text-gray-500">Anyone can view your profile</p>
+                      </div>
+                    </Label>
+                  </div>
+                  <div className="flex items-center space-x-2">
+                    <RadioGroupItem value="followers" id="profile-followers" />
+                    <Label htmlFor="profile-followers" className="flex items-center">
+                      <Users className="h-4 w-4 mr-2 text-blue-500" />
+                      <div>
+                        <span>Followers Only</span>
+                        <p className="text-sm text-gray-500">Only people who follow you can view your profile</p>
+                      </div>
+                    </Label>
+                  </div>
+                  <div className="flex items-center space-x-2">
+                    <RadioGroupItem value="private" id="profile-private" />
+                    <Label htmlFor="profile-private" className="flex items-center">
+                      <Lock className="h-4 w-4 mr-2 text-red-500" />
+                      <div>
+                        <span>Private</span>
+                        <p className="text-sm text-gray-500">Only you can view your profile</p>
+                      </div>
+                    </Label>
+                  </div>
+                </RadioGroup>
+              </div>
+
+              <Separator />
+
+              <div>
+                <Label className="text-base">Who can see your activity?</Label>
+                <RadioGroup
+                  value={settings.activityVisibility}
+                  onValueChange={(value) => handleRadioChange("activityVisibility", value)}
+                  className="mt-2 space-y-2"
+                >
+                  <div className="flex items-center space-x-2">
+                    <RadioGroupItem value="public" id="activity-public" />
+                    <Label htmlFor="activity-public" className="flex items-center">
+                      <Globe className="h-4 w-4 mr-2 text-green-500" />
+                      <div>
+                        <span>Public</span>
+                        <p className="text-sm text-gray-500">Anyone can see your posts and comments</p>
+                      </div>
+                    </Label>
+                  </div>
+                  <div className="flex items-center space-x-2">
+                    <RadioGroupItem value="followers" id="activity-followers" />
+                    <Label htmlFor="activity-followers" className="flex items-center">
+                      <Users className="h-4 w-4 mr-2 text-blue-500" />
+                      <div>
+                        <span>Followers Only</span>
+                        <p className="text-sm text-gray-500">Only people who follow you can see your posts and comments</p>
+                      </div>
+                    </Label>
+                  </div>
+                  <div className="flex items-center space-x-2">
+                    <RadioGroupItem value="private" id="activity-private" />
+                    <Label htmlFor="activity-private" className="flex items-center">
+                      <Lock className="h-4 w-4 mr-2 text-red-500" />
+                      <div>
+                        <span>Private</span>
+                        <p className="text-sm text-gray-500">Only you can see your posts and comments</p>
+                      </div>
+                    </Label>
+                  </div>
+                </RadioGroup>
+              </div>
+            </div>
+          </CardContent>
+        </Card>
+
+        <Card>
+          <CardHeader>
+            <CardTitle className="flex items-center">
+              <Shield className="h-5 w-5 mr-2 text-blue-500" />
+              Interaction Settings
+            </CardTitle>
+            <CardDescription>
+              Control how others can interact with you
+            </CardDescription>
+          </CardHeader>
+          <CardContent>
+            <div className="space-y-4">
+              <div className="flex items-center justify-between">
+                <div>
+                  <Label htmlFor="allow-followers" className="flex items-center space-x-2">
+                    <Users className="h-4 w-4 text-green-500 mr-2" />
+                    <span>Allow people to follow you</span>
+                  </Label>
+                  <p className="text-sm text-gray-500 mt-1">
+                    When disabled, no one can follow you
+                  </p>
+                </div>
+                <Switch
+                  id="allow-followers"
+                  checked={settings.allowFollowers}
+                  onCheckedChange={() => handleToggle("allowFollowers")}
+                />
+              </div>
+
+              <Separator />
+
+              <div>
+                <Label className="text-base">Who can send you messages?</Label>
+                <RadioGroup
+                  value={settings.allowMessages}
+                  onValueChange={(value) => handleRadioChange("allowMessages", value)}
+                  className="mt-2 space-y-2"
+                >
+                  <div className="flex items-center space-x-2">
+                    <RadioGroupItem value="everyone" id="messages-everyone" />
+                    <Label htmlFor="messages-everyone" className="flex items-center">
+                      <Globe className="h-4 w-4 mr-2 text-green-500" />
+                      <span>Everyone</span>
+                    </Label>
+                  </div>
+                  <div className="flex items-center space-x-2">
+                    <RadioGroupItem value="followers" id="messages-followers" />
+                    <Label htmlFor="messages-followers" className="flex items-center">
+                      <Users className="h-4 w-4 mr-2 text-blue-500" />
+                      <span>Followers Only</span>
+                    </Label>
+                  </div>
+                  <div className="flex items-center space-x-2">
+                    <RadioGroupItem value="none" id="messages-none" />
+                    <Label htmlFor="messages-none" className="flex items-center">
+                      <Lock className="h-4 w-4 mr-2 text-red-500" />
+                      <span>No One</span>
+                    </Label>
+                  </div>
+                </RadioGroup>
+              </div>
+
+              <Separator />
+
+              <div className="flex items-center justify-between">
+                <div>
+                  <Label htmlFor="show-online" className="flex items-center space-x-2">
+                    <Eye className="h-4 w-4 text-blue-500 mr-2" />
+                    <span>Show when you're online</span>
+                  </Label>
+                  <p className="text-sm text-gray-500 mt-1">
+                    Others can see when you're active on the platform
+                  </p>
+                </div>
+                <Switch
+                  id="show-online"
+                  checked={settings.showOnlineStatus}
+                  onCheckedChange={() => handleToggle("showOnlineStatus")}
+                />
+              </div>
+
+              <div className="flex items-center justify-between">
+                <div>
+                  <Label htmlFor="allow-tagging" className="flex items-center space-x-2">
+                    <Users className="h-4 w-4 text-purple-500 mr-2" />
+                    <span>Allow tagging</span>
+                  </Label>
+                  <p className="text-sm text-gray-500 mt-1">
+                    Others can tag you in posts and comments
+                  </p>
+                </div>
+                <Switch
+                  id="allow-tagging"
+                  checked={settings.allowTagging}
+                  onCheckedChange={() => handleToggle("allowTagging")}
+                />
+              </div>
+
+              <div className="flex items-center justify-between">
+                <div>
+                  <Label htmlFor="allow-mentions" className="flex items-center space-x-2">
+                    <Users className="h-4 w-4 text-indigo-500 mr-2" />
+                    <span>Allow mentions</span>
+                  </Label>
+                  <p className="text-sm text-gray-500 mt-1">
+                    Others can mention you using @username
+                  </p>
+                </div>
+                <Switch
+                  id="allow-mentions"
+                  checked={settings.allowMentions}
+                  onCheckedChange={() => handleToggle("allowMentions")}
+                />
+              </div>
+            </div>
+          </CardContent>
+        </Card>
+
+        <Card>
+          <CardHeader>
+            <CardTitle className="flex items-center">
+              <UserSearch className="h-5 w-5 mr-2 text-blue-500" />
+              Search & Discovery
+            </CardTitle>
+            <CardDescription>
+              Control how others can find you
+            </CardDescription>
+          </CardHeader>
+          <CardContent>
+            <div className="flex items-center justify-between">
+              <div>
+                <Label htmlFor="searchable" className="flex items-center space-x-2">
+                  <UserSearch className="h-4 w-4 text-green-500 mr-2" />
+                  <span>Allow others to find you in search</span>
+                </Label>
+                <p className="text-sm text-gray-500 mt-1">
+                  Your profile will appear in search results
+                </p>
+              </div>
+              <Switch
+                id="searchable"
+                checked={settings.searchable}
+                onCheckedChange={() => handleToggle("searchable")}
+              />
+            </div>
+          </CardContent>
+        </Card>
+
+        <div className="flex justify-end">
+          <Button
+            onClick={saveSettings}
+            disabled={saving}
+            className="bg-blue-600 hover:bg-blue-700"
+          >
+            {saving ? (
+              <>
+                <Loader2 className="h-4 w-4 mr-2 animate-spin" />
+                Saving...
+              </>
+            ) : (
+              "Save Settings"
+            )}
+          </Button>
+        </div>
+      </div>
+    </motion.div>
+  );
+}
Index: src/types/mongoose.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/types/mongoose.ts b/src/types/mongoose.ts
new file mode 100644
--- /dev/null	(date 1747009940428)
+++ b/src/types/mongoose.ts	(date 1747009940428)
@@ -0,0 +1,51 @@
+import { Document, Types } from 'mongoose';
+
+/**
+ * Type for a MongoDB ObjectId
+ */
+export type ObjectId = Types.ObjectId;
+
+/**
+ * Type for a lean document (plain JavaScript object) from Mongoose
+ * This removes Mongoose document methods but keeps the _id as ObjectId
+ */
+export type LeanDocument<T> = Omit<T, keyof Document> & {
+  _id: Types.ObjectId;
+};
+
+/**
+ * Type for a lean document with populated fields
+ * @template T The document type
+ * @template K Keys of T that should be populated
+ * @template P The populated field types
+ */
+export type PopulatedDocument<
+  T,
+  K extends keyof T,
+  P = unknown
+> = Omit<LeanDocument<T>, K> & {
+  [key in K]: P;
+};
+
+/**
+ * Type for a serialized document (ready for JSON)
+ * This converts ObjectIds to strings and handles Date serialization
+ */
+export type SerializedDocument<T> = {
+  [K in keyof T]: T[K] extends Types.ObjectId
+    ? string
+    : T[K] extends Types.ObjectId[]
+    ? string[]
+    : T[K] extends Date
+    ? string
+    : T[K] extends object
+    ? SerializedDocument<T[K]>
+    : T[K];
+} & {
+  id: string; // Add string id for client-side use
+};
+
+/**
+ * Type for a document with virtuals
+ */
+export type WithVirtuals<T, V> = T & V;
Index: src/app/(main)/settings/notifications/page.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/app/(main)/settings/notifications/page.tsx b/src/app/(main)/settings/notifications/page.tsx
new file mode 100644
--- /dev/null	(date 1747009940343)
+++ b/src/app/(main)/settings/notifications/page.tsx	(date 1747009940343)
@@ -0,0 +1,405 @@
+"use client";
+
+import { useState, useEffect } from "react";
+import { useRouter } from "next/navigation";
+import { motion } from "framer-motion";
+import { Button } from "@/components/ui/button";
+import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
+import { Switch } from "@/components/ui/switch";
+import { Label } from "@/components/ui/label";
+import { Separator } from "@/components/ui/separator";
+import { Loader2, Bell, Mail, MessageSquare, Heart, UserPlus, AtSign, AlertCircle } from "lucide-react";
+import { toast } from "sonner";
+import { useAuth } from "@clerk/nextjs";
+
+interface NotificationSettings {
+  inApp: {
+    likes: boolean;
+    comments: boolean;
+    follows: boolean;
+    mentions: boolean;
+    messages: boolean;
+    communityInvites: boolean;
+    roleAssignments: boolean;
+  };
+  email: {
+    likes: boolean;
+    comments: boolean;
+    follows: boolean;
+    mentions: boolean;
+    messages: boolean;
+    communityInvites: boolean;
+    roleAssignments: boolean;
+    digest: boolean;
+  };
+}
+
+export default function NotificationSettingsPage() {
+  const router = useRouter();
+  const { isLoaded, isSignedIn } = useAuth();
+  const [loading, setLoading] = useState(true);
+  const [saving, setSaving] = useState(false);
+  const [error, setError] = useState<string | null>(null);
+  const [settings, setSettings] = useState<NotificationSettings>({
+    inApp: {
+      likes: true,
+      comments: true,
+      follows: true,
+      mentions: true,
+      messages: true,
+      communityInvites: true,
+      roleAssignments: true,
+    },
+    email: {
+      likes: false,
+      comments: true,
+      follows: true,
+      mentions: true,
+      messages: true,
+      communityInvites: true,
+      roleAssignments: true,
+      digest: true,
+    },
+  });
+
+  useEffect(() => {
+    async function fetchNotificationSettings() {
+      try {
+        setLoading(true);
+        const response = await fetch("/api/users/me/notification-settings");
+        if (!response.ok) throw new Error("Failed to fetch notification settings");
+        const data = await response.json();
+        setSettings(data);
+      } catch (err) {
+        setError((err as Error).message);
+        toast.error("Failed to load notification settings");
+      } finally {
+        setLoading(false);
+      }
+    }
+
+    if (isLoaded && isSignedIn) {
+      fetchNotificationSettings();
+    } else if (isLoaded && !isSignedIn) {
+      router.push("/sign-in");
+    }
+  }, [isLoaded, isSignedIn, router]);
+
+  const handleInAppToggle = (key: keyof NotificationSettings["inApp"]) => {
+    setSettings((prev) => ({
+      ...prev,
+      inApp: {
+        ...prev.inApp,
+        [key]: !prev.inApp[key],
+      },
+    }));
+  };
+
+  const handleEmailToggle = (key: keyof NotificationSettings["email"]) => {
+    setSettings((prev) => ({
+      ...prev,
+      email: {
+        ...prev.email,
+        [key]: !prev.email[key],
+      },
+    }));
+  };
+
+  const saveSettings = async () => {
+    try {
+      setSaving(true);
+      const response = await fetch("/api/users/me/notification-settings", {
+        method: "PATCH",
+        headers: {
+          "Content-Type": "application/json",
+        },
+        body: JSON.stringify(settings),
+      });
+
+      if (!response.ok) throw new Error("Failed to save notification settings");
+      toast.success("Notification settings saved successfully");
+    } catch (err) {
+      toast.error((err as Error).message);
+    } finally {
+      setSaving(false);
+    }
+  };
+
+  if (loading) {
+    return (
+      <div className="flex items-center justify-center h-full">
+        <Loader2 className="h-8 w-8 animate-spin text-blue-500" />
+      </div>
+    );
+  }
+
+  if (error) {
+    return (
+      <div className="max-w-2xl mx-auto p-6">
+        <div className="bg-red-50 border border-red-200 rounded-lg p-4 flex items-start">
+          <AlertCircle className="h-5 w-5 text-red-500 mt-0.5 mr-3" />
+          <div>
+            <h3 className="text-red-800 font-medium">Error</h3>
+            <p className="text-red-700 text-sm">{error}</p>
+          </div>
+        </div>
+        <Button className="mt-4" onClick={() => window.location.reload()}>
+          Try Again
+        </Button>
+      </div>
+    );
+  }
+
+  return (
+    <motion.div
+      initial={{ opacity: 0 }}
+      animate={{ opacity: 1 }}
+      className="max-w-2xl mx-auto p-6"
+    >
+      <div className="mb-8">
+        <h1 className="text-2xl font-bold text-gray-900">Notification Settings</h1>
+        <p className="text-gray-500">Manage how and when you receive notifications</p>
+      </div>
+
+      <div className="space-y-6">
+        <Card>
+          <CardHeader>
+            <CardTitle className="flex items-center">
+              <Bell className="h-5 w-5 mr-2 text-blue-500" />
+              In-App Notifications
+            </CardTitle>
+            <CardDescription>
+              Control which notifications appear in the app
+            </CardDescription>
+          </CardHeader>
+          <CardContent>
+            <div className="space-y-4">
+              <div className="flex items-center justify-between">
+                <div className="flex items-center space-x-2">
+                  <Heart className="h-4 w-4 text-pink-500" />
+                  <Label htmlFor="inapp-likes">Likes</Label>
+                </div>
+                <Switch
+                  id="inapp-likes"
+                  checked={settings.inApp.likes}
+                  onCheckedChange={() => handleInAppToggle("likes")}
+                />
+              </div>
+
+              <div className="flex items-center justify-between">
+                <div className="flex items-center space-x-2">
+                  <MessageSquare className="h-4 w-4 text-blue-500" />
+                  <Label htmlFor="inapp-comments">Comments</Label>
+                </div>
+                <Switch
+                  id="inapp-comments"
+                  checked={settings.inApp.comments}
+                  onCheckedChange={() => handleInAppToggle("comments")}
+                />
+              </div>
+
+              <div className="flex items-center justify-between">
+                <div className="flex items-center space-x-2">
+                  <UserPlus className="h-4 w-4 text-green-500" />
+                  <Label htmlFor="inapp-follows">Follows</Label>
+                </div>
+                <Switch
+                  id="inapp-follows"
+                  checked={settings.inApp.follows}
+                  onCheckedChange={() => handleInAppToggle("follows")}
+                />
+              </div>
+
+              <div className="flex items-center justify-between">
+                <div className="flex items-center space-x-2">
+                  <AtSign className="h-4 w-4 text-purple-500" />
+                  <Label htmlFor="inapp-mentions">Mentions</Label>
+                </div>
+                <Switch
+                  id="inapp-mentions"
+                  checked={settings.inApp.mentions}
+                  onCheckedChange={() => handleInAppToggle("mentions")}
+                />
+              </div>
+
+              <div className="flex items-center justify-between">
+                <div className="flex items-center space-x-2">
+                  <MessageSquare className="h-4 w-4 text-indigo-500" />
+                  <Label htmlFor="inapp-messages">Direct Messages</Label>
+                </div>
+                <Switch
+                  id="inapp-messages"
+                  checked={settings.inApp.messages}
+                  onCheckedChange={() => handleInAppToggle("messages")}
+                />
+              </div>
+
+              <Separator />
+
+              <div className="flex items-center justify-between">
+                <div className="flex items-center space-x-2">
+                  <UserPlus className="h-4 w-4 text-orange-500" />
+                  <Label htmlFor="inapp-community-invites">Community Invites</Label>
+                </div>
+                <Switch
+                  id="inapp-community-invites"
+                  checked={settings.inApp.communityInvites}
+                  onCheckedChange={() => handleInAppToggle("communityInvites")}
+                />
+              </div>
+
+              <div className="flex items-center justify-between">
+                <div className="flex items-center space-x-2">
+                  <Bell className="h-4 w-4 text-yellow-500" />
+                  <Label htmlFor="inapp-role-assignments">Role Assignments</Label>
+                </div>
+                <Switch
+                  id="inapp-role-assignments"
+                  checked={settings.inApp.roleAssignments}
+                  onCheckedChange={() => handleInAppToggle("roleAssignments")}
+                />
+              </div>
+            </div>
+          </CardContent>
+        </Card>
+
+        <Card>
+          <CardHeader>
+            <CardTitle className="flex items-center">
+              <Mail className="h-5 w-5 mr-2 text-blue-500" />
+              Email Notifications
+            </CardTitle>
+            <CardDescription>
+              Control which notifications are sent to your email
+            </CardDescription>
+          </CardHeader>
+          <CardContent>
+            <div className="space-y-4">
+              <div className="flex items-center justify-between">
+                <div className="flex items-center space-x-2">
+                  <Heart className="h-4 w-4 text-pink-500" />
+                  <Label htmlFor="email-likes">Likes</Label>
+                </div>
+                <Switch
+                  id="email-likes"
+                  checked={settings.email.likes}
+                  onCheckedChange={() => handleEmailToggle("likes")}
+                />
+              </div>
+
+              <div className="flex items-center justify-between">
+                <div className="flex items-center space-x-2">
+                  <MessageSquare className="h-4 w-4 text-blue-500" />
+                  <Label htmlFor="email-comments">Comments</Label>
+                </div>
+                <Switch
+                  id="email-comments"
+                  checked={settings.email.comments}
+                  onCheckedChange={() => handleEmailToggle("comments")}
+                />
+              </div>
+
+              <div className="flex items-center justify-between">
+                <div className="flex items-center space-x-2">
+                  <UserPlus className="h-4 w-4 text-green-500" />
+                  <Label htmlFor="email-follows">Follows</Label>
+                </div>
+                <Switch
+                  id="email-follows"
+                  checked={settings.email.follows}
+                  onCheckedChange={() => handleEmailToggle("follows")}
+                />
+              </div>
+
+              <div className="flex items-center justify-between">
+                <div className="flex items-center space-x-2">
+                  <AtSign className="h-4 w-4 text-purple-500" />
+                  <Label htmlFor="email-mentions">Mentions</Label>
+                </div>
+                <Switch
+                  id="email-mentions"
+                  checked={settings.email.mentions}
+                  onCheckedChange={() => handleEmailToggle("mentions")}
+                />
+              </div>
+
+              <div className="flex items-center justify-between">
+                <div className="flex items-center space-x-2">
+                  <MessageSquare className="h-4 w-4 text-indigo-500" />
+                  <Label htmlFor="email-messages">Direct Messages</Label>
+                </div>
+                <Switch
+                  id="email-messages"
+                  checked={settings.email.messages}
+                  onCheckedChange={() => handleEmailToggle("messages")}
+                />
+              </div>
+
+              <Separator />
+
+              <div className="flex items-center justify-between">
+                <div className="flex items-center space-x-2">
+                  <UserPlus className="h-4 w-4 text-orange-500" />
+                  <Label htmlFor="email-community-invites">Community Invites</Label>
+                </div>
+                <Switch
+                  id="email-community-invites"
+                  checked={settings.email.communityInvites}
+                  onCheckedChange={() => handleEmailToggle("communityInvites")}
+                />
+              </div>
+
+              <div className="flex items-center justify-between">
+                <div className="flex items-center space-x-2">
+                  <Bell className="h-4 w-4 text-yellow-500" />
+                  <Label htmlFor="email-role-assignments">Role Assignments</Label>
+                </div>
+                <Switch
+                  id="email-role-assignments"
+                  checked={settings.email.roleAssignments}
+                  onCheckedChange={() => handleEmailToggle("roleAssignments")}
+                />
+              </div>
+
+              <Separator />
+
+              <div className="flex items-center justify-between">
+                <div>
+                  <Label htmlFor="email-digest" className="flex items-center space-x-2">
+                    <Mail className="h-4 w-4 text-gray-500" />
+                    <span>Weekly Digest</span>
+                  </Label>
+                  <p className="text-sm text-gray-500 mt-1">
+                    Receive a weekly summary of activity
+                  </p>
+                </div>
+                <Switch
+                  id="email-digest"
+                  checked={settings.email.digest}
+                  onCheckedChange={() => handleEmailToggle("digest")}
+                />
+              </div>
+            </div>
+          </CardContent>
+        </Card>
+
+        <div className="flex justify-end">
+          <Button
+            onClick={saveSettings}
+            disabled={saving}
+            className="bg-blue-600 hover:bg-blue-700"
+          >
+            {saving ? (
+              <>
+                <Loader2 className="h-4 w-4 mr-2 animate-spin" />
+                Saving...
+              </>
+            ) : (
+              "Save Settings"
+            )}
+          </Button>
+        </div>
+      </div>
+    </motion.div>
+  );
+}
Index: src/types/api.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/types/api.ts b/src/types/api.ts
new file mode 100644
--- /dev/null	(date 1747009940520)
+++ b/src/types/api.ts	(date 1747009940520)
@@ -0,0 +1,190 @@
+// API response types
+
+/**
+ * Base user info for API responses
+ */
+export interface UserInfo {
+  id: string;
+  username: string;
+  name: string;
+  image?: string;
+}
+
+/**
+ * Base community info for API responses
+ */
+export interface CommunityInfo {
+  id: string;
+  name: string;
+  image?: string;
+}
+
+/**
+ * Post data structure for API responses
+ */
+export interface PostResponse {
+  id: string;
+  author: UserInfo;
+  content: string;
+  mediaFiles: string[];
+  community?: CommunityInfo;
+  upvoteCount: number;
+  downvoteCount: number;
+  voteCount: number;
+  commentCount: number;
+  savedCount: number;
+  isUpvoted: boolean;
+  isDownvoted: boolean;
+  isSaved: boolean;
+  createdAt: string;
+  updatedAt: string;
+}
+
+/**
+ * Comment data structure for API responses
+ */
+export interface CommentResponse {
+  id: string;
+  author: UserInfo;
+  content: string;
+  post: string;
+  parentComment: string | null;
+  upvoteCount: number;
+  downvoteCount: number;
+  voteCount: number;
+  replyCount: number;
+  isUpvoted: boolean;
+  isDownvoted: boolean;
+  createdAt: string;
+  updatedAt: string;
+}
+
+/**
+ * User profile data structure for API responses
+ */
+export interface UserProfileResponse extends UserInfo {
+  bio?: string;
+  followingCount: number;
+  followersCount: number;
+  isFollowing: boolean;
+  isCurrentUser: boolean;
+  createdAt: string;
+}
+
+/**
+ * Community profile data structure for API responses
+ */
+export interface CommunityProfileResponse extends CommunityInfo {
+  description: string;
+  creator: UserInfo;
+  memberCount: number;
+  postCount: number;
+  channelCount: number;
+  roleCount: number;
+  rules?: string;
+  isMember: boolean;
+  isModerator: boolean;
+  isCreator: boolean;
+  createdAt: string;
+  updatedAt: string;
+}
+
+/**
+ * Channel info for API responses
+ */
+export interface ChannelInfo {
+  id: string;
+  name: string;
+  slug: string;
+  type: 'text' | 'voice';
+  description?: string;
+  position: number;
+  isPrivate: boolean;
+  messageCount: number;
+}
+
+/**
+ * Role info for API responses
+ */
+export interface RoleInfo {
+  id: string;
+  name: string;
+  color: string;
+  position: number;
+  isDefault: boolean;
+}
+
+/**
+ * Message data structure for API responses
+ */
+export interface MessageResponse {
+  id: string;
+  content: string;
+  author: UserInfo;
+  attachments: string[];
+  mentions: UserInfo[];
+  isPinned: boolean;
+  isEdited: boolean;
+  reactions: {
+    emoji: string;
+    count: number;
+    hasReacted: boolean;
+  }[];
+  createdAt: string;
+  updatedAt: string;
+}
+
+/**
+ * Pagination metadata for API responses
+ */
+export interface PaginationMeta {
+  page: number;
+  limit: number;
+  totalItems: number;
+  hasMore: boolean;
+}
+
+/**
+ * Generic paginated response
+ */
+export interface PaginatedResponse<T> {
+  data: T[];
+  pagination: PaginationMeta;
+}
+
+/**
+ * Vote response
+ */
+export interface VoteResponse {
+  upvoteCount: number;
+  downvoteCount: number;
+  voteCount: number;
+  isUpvoted: boolean;
+  isDownvoted: boolean;
+}
+
+/**
+ * Bookmark response
+ */
+export interface BookmarkResponse {
+  isSaved: boolean;
+  savedCount: number;
+}
+
+/**
+ * Follow response
+ */
+export interface FollowResponse {
+  isFollowing: boolean;
+  followersCount: number;
+}
+
+/**
+ * Upload response
+ */
+export interface UploadResponse {
+  success: boolean;
+  url: string;
+  fileType: string;
+  fileName: string;
+}
Index: src/lib/supabaseClient.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lib/supabaseClient.ts b/src/lib/supabaseClient.ts
new file mode 100644
--- /dev/null	(date 1747009940541)
+++ b/src/lib/supabaseClient.ts	(date 1747009940541)
@@ -0,0 +1,6 @@
+import { createClient } from '@supabase/supabase-js';
+
+const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
+const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;
+
+export const supabase = createClient(supabaseUrl, supabaseAnonKey);
Index: src/components/rich-text-editor.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/rich-text-editor.tsx b/src/components/rich-text-editor.tsx
new file mode 100644
--- /dev/null	(date 1747009940451)
+++ b/src/components/rich-text-editor.tsx	(date 1747009940451)
@@ -0,0 +1,279 @@
+"use client";
+
+import { useEditor, EditorContent, BubbleMenu } from "@tiptap/react";
+import StarterKit from "@tiptap/starter-kit";
+import Image from "@tiptap/extension-image";
+import Link from "@tiptap/extension-link";
+import Underline from "@tiptap/extension-underline";
+import TextAlign from "@tiptap/extension-text-align";
+import { useState, useRef, useCallback } from "react";
+import { Button } from "@/components/ui/button";
+import { Bold, Italic, Underline as UnderlineIcon, List, ListOrdered, AlignLeft, AlignCenter, AlignRight, Link as LinkIcon, Image as ImageIcon, Heading1, Heading2, Loader2 } from "lucide-react";
+import { cn } from "@/lib/utils";
+import { toast } from "sonner";
+import { uploadMediaToSupabase } from "@/lib/supabase-upload";
+
+interface RichTextEditorProps {
+  value: string;
+  onChange: (value: string) => void;
+  placeholder?: string;
+  minHeight?: string;
+  maxHeight?: string;
+  onMediaUpload?: (url: string) => void;
+}
+
+// Define action type for file input change
+type FileInputChangeAction = (e: React.ChangeEvent<HTMLInputElement>) => void;
+
+export default function RichTextEditor({
+                                         value,
+                                         onChange: onChangeAction,
+                                         placeholder = "What's on your mind?",
+                                         minHeight = "150px",
+                                         maxHeight = "400px",
+                                         onMediaUpload: onMediaUploadAction,
+                                       }: RichTextEditorProps) {
+  const [isUploading, setIsUploading] = useState(false);
+  const fileInputRef = useRef<HTMLInputElement>(null);
+
+  const editor = useEditor({
+    extensions: [
+      StarterKit,
+      Underline,
+      Image,
+      Link.configure({
+        openOnClick: false,
+        HTMLAttributes: {
+          class: "text-blue-500 underline cursor-pointer",
+        },
+      }),
+      TextAlign.configure({
+        types: ["heading", "paragraph"],
+      }),
+    ],
+    content: value,
+    onUpdate: ({ editor }) => {
+      onChangeAction(editor.getHTML());
+    },
+    editorProps: {
+      attributes: {
+        class: "prose prose-sm sm:prose max-w-none focus:outline-none min-h-[150px]",
+        placeholder,
+      },
+    },
+  });
+
+  const handleImageUpload = useCallback(async (file: File) => {
+    if (!editor) return;
+    try {
+      setIsUploading(true);
+
+      // Upload the file to Supabase
+      const url = await uploadMediaToSupabase(file);
+
+      if (!url) {
+        throw new Error("Failed to upload media");
+      }
+
+      // Insert the image into the editor
+      editor.chain().focus().setImage({ src: url, alt: file.name }).run();
+
+      // Call onMediaUploadAction if provided
+      if (onMediaUploadAction) {
+        onMediaUploadAction(url);
+      }
+
+      toast.success("Image uploaded successfully!");
+    } catch (error) {
+      console.error("[RichTextEditor] Image upload error:", error);
+      toast.error("Failed to upload image. Please try again.");
+    } finally {
+      setIsUploading(false);
+    }
+  }, [editor, onMediaUploadAction]);
+
+  const handleFileInputChangeAction = useCallback<FileInputChangeAction>((e) => {
+    const file = e.target.files?.[0];
+    if (file) {
+      handleImageUpload(file);
+    }
+    if (fileInputRef.current) {
+      fileInputRef.current.value = "";
+    }
+  }, [handleImageUpload]);
+
+  if (!editor) {
+    return null;
+  }
+
+  return (
+      <div className="relative border border-gray-200 rounded-md">
+        {/* Toolbar */}
+        <div className="flex flex-wrap items-center gap-1 p-2 border-b border-gray-200 bg-gray-50 rounded-t-md">
+          {/* Formatting buttons */}
+          {[
+            { icon: Bold, action: () => editor.chain().focus().toggleBold().run(), active: "bold" },
+            { icon: Italic, action: () => editor.chain().focus().toggleItalic().run(), active: "italic" },
+            { icon: UnderlineIcon, action: () => editor.chain().focus().toggleUnderline().run(), active: "underline" },
+          ].map(({ icon: Icon, action, active }, idx) => (
+              <Button
+                  key={idx}
+                  type="button"
+                  variant="ghost"
+                  size="sm"
+                  onClick={action}
+                  className={cn(
+                      "h-8 px-2 text-gray-700 hover:bg-gray-200",
+                      editor.isActive(active) && "bg-gray-200"
+                  )}
+              >
+                <Icon className="h-4 w-4" />
+              </Button>
+          ))}
+
+          <div className="h-6 w-px bg-gray-300 mx-1" />
+
+          {/* Heading buttons */}
+          {[1, 2].map((level) => (
+              <Button
+                  key={level}
+                  type="button"
+                  variant="ghost"
+                  size="sm"
+                  onClick={() => {
+                    editor.chain().focus().toggleHeading({ level: level as 1 | 2 }).run();
+                  }}
+                  className={cn(
+                      "h-8 px-2 text-gray-700 hover:bg-gray-200",
+                      editor.isActive("heading", { level }) && "bg-gray-200"
+                  )}
+              >
+                {level === 1 ? <Heading1 className="h-4 w-4" /> : <Heading2 className="h-4 w-4" />}
+              </Button>
+          ))}
+
+          <div className="h-6 w-px bg-gray-300 mx-1" />
+
+          {/* List buttons */}
+          {[
+            { icon: List, action: () => editor.chain().focus().toggleBulletList().run(), active: "bulletList" },
+            { icon: ListOrdered, action: () => editor.chain().focus().toggleOrderedList().run(), active: "orderedList" },
+          ].map(({ icon: Icon, action, active }, idx) => (
+              <Button
+                  key={idx}
+                  type="button"
+                  variant="ghost"
+                  size="sm"
+                  onClick={action}
+                  className={cn(
+                      "h-8 px-2 text-gray-700 hover:bg-gray-200",
+                      editor.isActive(active) && "bg-gray-200"
+                  )}
+              >
+                <Icon className="h-4 w-4" />
+              </Button>
+          ))}
+
+          <div className="h-6 w-px bg-gray-300 mx-1" />
+
+          {/* Align buttons */}
+          {[
+            { icon: AlignLeft, align: "left" },
+            { icon: AlignCenter, align: "center" },
+            { icon: AlignRight, align: "right" },
+          ].map(({ icon: Icon, align }, idx) => (
+              <Button
+                  key={idx}
+                  type="button"
+                  variant="ghost"
+                  size="sm"
+                  onClick={() => editor.chain().focus().setTextAlign(align).run()}
+                  className={cn(
+                      "h-8 px-2 text-gray-700 hover:bg-gray-200",
+                      editor.isActive({ textAlign: align }) && "bg-gray-200"
+                  )}
+              >
+                <Icon className="h-4 w-4" />
+              </Button>
+          ))}
+
+          <div className="h-6 w-px bg-gray-300 mx-1" />
+
+          {/* Link */}
+          <Button
+              type="button"
+              variant="ghost"
+              size="sm"
+              onClick={() => {
+                const url = prompt("Enter URL:");
+                if (url) {
+                  editor.chain().focus().setLink({ href: url }).run();
+                }
+              }}
+              className={cn(
+                  "h-8 px-2 text-gray-700 hover:bg-gray-200",
+                  editor.isActive("link") && "bg-gray-200"
+              )}
+          >
+            <LinkIcon className="h-4 w-4" />
+          </Button>
+
+          {/* Upload */}
+          <Button
+              type="button"
+              variant="ghost"
+              size="sm"
+              onClick={() => fileInputRef.current?.click()}
+              disabled={isUploading}
+              className="h-8 px-2 text-gray-700 hover:bg-gray-200"
+          >
+            {isUploading ? <Loader2 className="h-4 w-4 animate-spin" /> : <ImageIcon className="h-4 w-4" />}
+          </Button>
+
+          <input
+              type="file"
+              ref={fileInputRef}
+              onChange={handleFileInputChangeAction}
+              accept="image/jpeg,image/png,image/webp,image/gif"
+              className="hidden"
+          />
+        </div>
+
+        {/* Editor Content */}
+        <div className="p-3 overflow-y-auto" style={{ minHeight, maxHeight }}>
+          <EditorContent editor={editor} />
+        </div>
+
+        {/* Bubble Menu */}
+        {editor && (
+            <BubbleMenu editor={editor} tippyOptions={{ duration: 100 }} className="bg-white shadow-md border border-gray-200 rounded-md flex overflow-hidden">
+              {[
+                { icon: Bold, action: () => editor.chain().focus().toggleBold().run(), active: "bold" },
+                { icon: Italic, action: () => editor.chain().focus().toggleItalic().run(), active: "italic" },
+                { icon: UnderlineIcon, action: () => editor.chain().focus().toggleUnderline().run(), active: "underline" },
+                { icon: LinkIcon, action: () => {
+                    const url = prompt("Enter URL:");
+                    if (url) {
+                      editor.chain().focus().setLink({ href: url }).run();
+                    }
+                  }, active: "link" },
+              ].map(({ icon: Icon, action, active }, idx) => (
+                  <Button
+                      key={idx}
+                      type="button"
+                      variant="ghost"
+                      size="sm"
+                      onClick={action}
+                      className={cn(
+                          "h-8 px-2 text-gray-700 hover:bg-gray-200 rounded-none",
+                          editor.isActive(active) && "bg-gray-200"
+                      )}
+                  >
+                    <Icon className="h-4 w-4" />
+                  </Button>
+              ))}
+            </BubbleMenu>
+        )}
+      </div>
+  );
+}
Index: src/components/sanitized-html.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/sanitized-html.tsx b/src/components/sanitized-html.tsx
new file mode 100644
--- /dev/null	(date 1747009940499)
+++ b/src/components/sanitized-html.tsx	(date 1747009940499)
@@ -0,0 +1,60 @@
+"use client";
+
+import { useEffect, useState } from "react";
+import DOMPurify from "dompurify";
+
+interface SanitizedHtmlProps {
+  content: string;
+  className?: string;
+}
+
+export default function SanitizedHtml({ content, className }: SanitizedHtmlProps) {
+  const [sanitizedContent, setSanitizedContent] = useState("");
+
+  useEffect(() => {
+    if (typeof window === "undefined") return;
+
+    // Create a fresh instance of DOMPurify
+    const purifyInstance = DOMPurify(window);
+
+    purifyInstance.addHook("afterSanitizeAttributes", (node: Element) => {
+      if (node.tagName === "IMG") {
+        node.setAttribute("loading", "lazy");
+        const existingClass = node.getAttribute("class") || "";
+        node.setAttribute(
+            "class",
+            `${existingClass} max-w-full h-auto rounded-md my-2`.trim()
+        );
+      }
+
+      if (node.tagName === "A") {
+        node.setAttribute("target", "_blank");
+        node.setAttribute("rel", "noopener noreferrer");
+        const existingClass = node.getAttribute("class") || "";
+        node.setAttribute(
+            "class",
+            `${existingClass} text-blue-500 hover:underline`.trim()
+        );
+      }
+    });
+
+    const clean = purifyInstance.sanitize(content, {
+      ADD_TAGS: ["iframe"],
+      ADD_ATTR: ["allow", "allowfullscreen", "frameborder", "scrolling"],
+    });
+
+    setSanitizedContent(clean);
+
+    // Cleanup (optional, but nice to have)
+    return () => {
+      purifyInstance.removeAllHooks();
+    };
+  }, [content]);
+
+  return (
+      <div
+          className={className}
+          dangerouslySetInnerHTML={{ __html: sanitizedContent }}
+      />
+  );
+}
Index: src/app/api/posts/[postId]/comments/route.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/app/api/posts/[postId]/comments/route.ts b/src/app/api/posts/[postId]/comments/route.ts
new file mode 100644
--- /dev/null	(date 1747009940602)
+++ b/src/app/api/posts/[postId]/comments/route.ts	(date 1747009940602)
@@ -0,0 +1,231 @@
+// src/app/api/posts/[postId]/comments/route.ts
+import { NextRequest, NextResponse } from "next/server";
+import { auth } from "@clerk/nextjs/server";
+import dbConnect from "@/lib/dbConnect";
+import Post from "@/models/Post";
+import User, { IUser } from "@/models/User";
+import Comment, { IComment } from "@/models/Comment";
+import { Types } from "mongoose";
+import { LeanDocument } from "@/types/mongoose";
+import { CommentResponse, PaginationMeta, UserInfo } from "@/types/api";
+
+// Define types for the populated comment document
+type CommentWithAuthor = LeanDocument<IComment> & {
+  author: LeanDocument<IUser> & {
+    username: string;
+    name: string;
+    image?: string;
+  };
+  upvotes: Types.ObjectId[];
+  downvotes: Types.ObjectId[];
+  replies: Types.ObjectId[];
+  createdAt: Date;
+  updatedAt: Date;
+};
+
+interface CommentPaginationResponse {
+  comments: CommentResponse[];
+  pagination: PaginationMeta;
+}
+
+// GET /api/posts/[postId]/comments
+export async function GET(
+    req: NextRequest,
+    { params }: { params: { postId: string } }
+) {
+  try {
+    console.log("[COMMENTS:GET] Fetching comments for post");
+
+    const { userId } = await auth();
+    const { postId } = params;
+
+    if (!Types.ObjectId.isValid(postId)) {
+      return NextResponse.json({ error: "Invalid post ID" }, { status: 400 });
+    }
+
+    await dbConnect();
+
+    const url = req.nextUrl;
+    const page = parseInt(url.searchParams.get("page") ?? "1", 10);
+    const limit = parseInt(url.searchParams.get("limit") ?? "10", 10);
+    const skip = (page - 1) * limit;
+    const parentId = url.searchParams.get("parentId") || null;
+
+    // Build the query with proper typing
+    const query: { post: Types.ObjectId; parentComment?: Types.ObjectId | { $exists: boolean } } = {
+      post: new Types.ObjectId(postId)
+    };
+    if (parentId) {
+      if (!Types.ObjectId.isValid(parentId)) {
+        return NextResponse.json({ error: "Invalid parent comment ID" }, { status: 400 });
+      }
+      query.parentComment = new Types.ObjectId(parentId);
+    } else {
+      query.parentComment = { $exists: false };
+    }
+
+    const commentsRaw = await Comment.find(query)
+        .sort({ createdAt: -1 })
+        .skip(skip)
+        .limit(limit)
+        .populate("author", "username name image")
+        .lean<CommentWithAuthor[]>();
+
+    const totalComments = await Comment.countDocuments(query);
+    const hasMore = totalComments > skip + commentsRaw.length;
+
+    // Get current user ID if authenticated
+    const meUser = userId ? await User.findOne({ clerkId: userId }).select("_id").lean<{ _id: Types.ObjectId }>() : null;
+    const meId = meUser?._id;
+
+    // Transform raw comments to response format
+    const comments: CommentResponse[] = commentsRaw.map((c) => {
+      const upvotes = c.upvotes ?? [];
+      const downvotes = c.downvotes ?? [];
+      const replies = c.replies ?? [];
+
+      const isUpvoted = meId ? upvotes.some((id) => id.equals(meId)) : false;
+      const isDownvoted = meId ? downvotes.some((id) => id.equals(meId)) : false;
+
+      const authorInfo: UserInfo = {
+        id: c.author._id.toString(),
+        username: c.author.username,
+        name: c.author.name,
+        image: c.author.image,
+      };
+
+      return {
+        id: c._id.toString(),
+        author: authorInfo,
+        content: c.content,
+        post: c.post.toString(),
+        parentComment: c.parentComment ? c.parentComment.toString() : null,
+        upvoteCount: upvotes.length,
+        downvoteCount: downvotes.length,
+        voteCount: upvotes.length - downvotes.length,
+        replyCount: replies.length,
+        isUpvoted,
+        isDownvoted,
+        createdAt: c.createdAt.toISOString(),
+        updatedAt: c.updatedAt.toISOString(),
+      };
+    });
+
+    // Prepare the response
+    const response: CommentPaginationResponse = {
+      comments,
+      pagination: {
+        page,
+        limit,
+        totalItems: totalComments,
+        hasMore,
+      },
+    };
+
+    return NextResponse.json(response, { status: 200 });
+  } catch (error) {
+    console.error("[COMMENTS:GET] Error:", error);
+    return NextResponse.json({ error: "Failed to fetch comments" }, { status: 500 });
+  }
+}
+
+// POST /api/posts/[postId]/comments
+export async function POST(
+    req: NextRequest,
+    { params }: { params: { postId: string } }
+) {
+  try {
+    console.log("[COMMENTS:POST] Creating a new comment");
+
+    const { userId } = await auth();
+    if (!userId) {
+      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
+    }
+
+    const { postId } = params;
+    if (!Types.ObjectId.isValid(postId)) {
+      return NextResponse.json({ error: "Invalid post ID" }, { status: 400 });
+    }
+
+    await dbConnect();
+
+    const { content, parentCommentId } = await req.json();
+    if (!content || !content.trim()) {
+      return NextResponse.json({ error: "Comment content required" }, { status: 400 });
+    }
+
+    const user = await User.findOne({ clerkId: userId });
+    if (!user) {
+      return NextResponse.json({ error: "User not found" }, { status: 404 });
+    }
+
+    const post = await Post.findById(postId);
+    if (!post) {
+      return NextResponse.json({ error: "Post not found" }, { status: 404 });
+    }
+
+    // Prepare comment data with proper typing
+    const commentData: Omit<IComment, '_id' | 'createdAt' | 'updatedAt'> = {
+      author: user._id,
+      post: post._id,
+      content: content.trim(),
+      upvotes: [],
+      downvotes: [],
+      replies: [],
+    };
+
+    if (parentCommentId) {
+      if (!Types.ObjectId.isValid(parentCommentId)) {
+        return NextResponse.json({ error: "Invalid parent comment ID" }, { status: 400 });
+      }
+
+      const parentComment = await Comment.findById(parentCommentId);
+      if (!parentComment) {
+        return NextResponse.json({ error: "Parent comment not found" }, { status: 404 });
+      }
+
+      commentData.parentComment = parentComment._id;
+    }
+
+    const newComment = await Comment.create(commentData);
+
+    // Update references
+    await Post.findByIdAndUpdate(postId, { $push: { comments: newComment._id } });
+    if (parentCommentId) {
+      await Comment.findByIdAndUpdate(parentCommentId, { $push: { replies: newComment._id } });
+    }
+
+    await newComment.populate("author", "username name image");
+
+    // Prepare the response
+    const authorInfo: UserInfo = {
+      id: newComment.author._id.toString(),
+      username: newComment.author.username,
+      name: newComment.author.name,
+      image: newComment.author.image,
+    };
+
+    const commentResponse: { comment: CommentResponse } = {
+      comment: {
+        id: newComment._id.toString(),
+        author: authorInfo,
+        content: newComment.content,
+        post: newComment.post.toString(),
+        parentComment: newComment.parentComment ? newComment.parentComment.toString() : null,
+        upvoteCount: 0,
+        downvoteCount: 0,
+        voteCount: 0,
+        replyCount: 0,
+        isUpvoted: false,
+        isDownvoted: false,
+        createdAt: newComment.createdAt.toISOString(),
+        updatedAt: newComment.updatedAt.toISOString(),
+      },
+    };
+
+    return NextResponse.json(commentResponse, { status: 201 });
+  } catch (error) {
+    console.error("[COMMENTS:POST] Error:", error);
+    return NextResponse.json({ error: "Failed to create comment" }, { status: 500 });
+  }
+}
Index: src/app/api/communities/[communityId]/members/[memberId]/roles/assign/route.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/app/api/communities/[communityId]/members/[memberId]/roles/assign/route.ts b/src/app/api/communities/[communityId]/members/[memberId]/roles/assign/route.ts
new file mode 100644
--- /dev/null	(date 1747009940569)
+++ b/src/app/api/communities/[communityId]/members/[memberId]/roles/assign/route.ts	(date 1747009940569)
@@ -0,0 +1,120 @@
+// src/app/api/communities/[communityId]/members/[memberId]/roles/assign/route.ts
+import { NextRequest, NextResponse } from "next/server";
+import { auth } from "@clerk/nextjs/server";
+import connectToDatabase from "@/lib/dbConnect";
+import Role from "@/models/Role";
+import User from "@/models/User";
+import Membership from "@/models/Membership";
+import { Types } from "mongoose";
+import { RoleInfo } from "@/types/api";
+import { z } from "zod";
+import { isCommunityCreator, hasPermission } from "@/utils/roleUtils";
+
+// Validation schemas
+const ParamsSchema = z.object({
+  communityId: z.string().min(1),
+  memberId: z.string().min(1)
+});
+
+const AssignRolesSchema = z.object({
+  roleIds: z.array(z.string().min(1))
+});
+
+/**
+ * POST to assign roles to a member
+ */
+export async function POST(
+  req: NextRequest,
+  { params }: { params: { communityId: string; memberId: string } }
+) {
+  try {
+    // Authenticate user
+    const { userId } = await auth();
+    if (!userId) {
+      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
+    }
+
+    // Validate parameters
+    const validatedParams = ParamsSchema.safeParse(params);
+    if (!validatedParams.success) {
+      return NextResponse.json({ error: "Invalid parameters", details: validatedParams.error.format() }, { status: 400 });
+    }
+
+    const { communityId, memberId } = validatedParams.data;
+
+    await connectToDatabase();
+
+    // Check if user is the creator or has MANAGE_MEMBERS permission
+    const isCreator = await isCommunityCreator(userId, communityId);
+    const canManageMembers = !isCreator ? await hasPermission(userId, communityId, 'MANAGE_MEMBERS') : false;
+
+    if (!isCreator && !canManageMembers) {
+      return NextResponse.json({
+        error: "You don't have permission to assign roles"
+      }, { status: 403 });
+    }
+
+    // Parse and validate request body
+    const body = await req.json();
+    const validatedBody = AssignRolesSchema.safeParse(body);
+
+    if (!validatedBody.success) {
+      return NextResponse.json({
+        error: "Invalid role assignment data",
+        details: validatedBody.error.format()
+      }, { status: 400 });
+    }
+
+    const { roleIds } = validatedBody.data;
+
+    // Verify the target member exists
+    const targetUser = await User.findById(memberId);
+    if (!targetUser) {
+      return NextResponse.json({ error: "Member not found" }, { status: 404 });
+    }
+
+    // Verify the membership exists
+    const membership = await Membership.findOne({
+      user: memberId,
+      community: communityId
+    });
+
+    if (!membership) {
+      return NextResponse.json({ error: "User is not a member of this community" }, { status: 404 });
+    }
+
+    // Verify all roles exist and belong to this community
+    const roles = await Role.find({
+      _id: { $in: roleIds.map(id => new Types.ObjectId(id))},
+      community: communityId
+    }).lean();
+
+    if (roles.length !== roleIds.length) {
+      return NextResponse.json({
+        error: "One or more roles do not exist or do not belong to this community"
+      }, { status: 400 });
+    }
+
+    // Assign the roles
+    membership.roles = roleIds.map(id => new Types.ObjectId(id));
+    await membership.save();
+
+    // Format the response
+    const formattedRoles: RoleInfo[] = roles.map(role => ({
+      id: role._id.toString(),
+      name: role.name,
+      color: role.color,
+      position: role.position,
+      isDefault: role.isDefault
+    }));
+
+    return NextResponse.json({
+      success: true,
+      message: "Roles assigned successfully",
+      roles: formattedRoles
+    }, { status: 200 });
+  } catch (error) {
+    console.error("[ASSIGN ROLES]", error);
+    return NextResponse.json({ error: "Failed to assign roles" }, { status: 500 });
+  }
+}
Index: src/app/api/comments/[commentId]/route.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/app/api/comments/[commentId]/route.ts b/src/app/api/comments/[commentId]/route.ts
new file mode 100644
--- /dev/null	(date 1747009940646)
+++ b/src/app/api/comments/[commentId]/route.ts	(date 1747009940646)
@@ -0,0 +1,332 @@
+// src/app/api/comments/[commentId]/route.ts
+import { NextRequest, NextResponse } from "next/server";
+import { auth } from "@clerk/nextjs/server";
+import dbConnect from "@/lib/dbConnect";
+import User from "@/models/User";
+import Comment from "@/models/Comment";
+import Post from "@/models/Post";
+import { Types } from "mongoose";
+
+// GET /api/comments/[commentId]
+export async function GET(
+  req: NextRequest,
+  { params }: { params: { commentId: string } }
+) {
+  try {
+    const { userId } = await auth();
+    const { commentId } = params;
+
+    if (!Types.ObjectId.isValid(commentId)) {
+      return NextResponse.json(
+        { error: "Invalid comment ID format" },
+        { status: 400 }
+      );
+    }
+
+    await dbConnect();
+
+    const comment = await Comment.findById(commentId)
+      .populate("author", "username name image")
+      .lean();
+
+    if (!comment) {
+      return NextResponse.json({ error: "Comment not found" }, { status: 404 });
+    }
+
+    // Check if user has voted
+    const meId = userId ? await User.findOne({ clerkId: userId }).then(u => u?._id) : null;
+    const isUpvoted = meId ? comment.upvotes.some((id: Types.ObjectId) => id.equals(meId)) : false;
+    const isDownvoted = meId ? comment.downvotes.some((id: Types.ObjectId) => id.equals(meId)) : false;
+
+    return NextResponse.json(
+      {
+        comment: {
+          id: comment._id.toString(),
+          author: {
+            id: comment.author._id.toString(),
+            username: comment.author.username,
+            name: comment.author.name,
+            image: comment.author.image,
+          },
+          content: comment.content,
+          post: comment.post.toString(),
+          parentComment: comment.parentComment
+            ? comment.parentComment.toString()
+            : null,
+          upvoteCount: comment.upvotes.length,
+          downvoteCount: comment.downvotes.length,
+          voteCount: comment.upvotes.length - comment.downvotes.length,
+          replyCount: comment.replies?.length || 0,
+          isUpvoted,
+          isDownvoted,
+          createdAt: comment.createdAt.toISOString(),
+          updatedAt: comment.updatedAt.toISOString(),
+        },
+      },
+      { status: 200 }
+    );
+  } catch (error) {
+    console.error("[GET Comment] Error:", error);
+    return NextResponse.json(
+      { error: "Failed to fetch comment" },
+      { status: 500 }
+    );
+  }
+}
+
+// PATCH /api/comments/[commentId]
+export async function PATCH(
+  req: NextRequest,
+  { params }: { params: { commentId: string } }
+) {
+  try {
+    const { userId } = await auth();
+    if (!userId) {
+      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
+    }
+
+    const { commentId } = params;
+    if (!Types.ObjectId.isValid(commentId)) {
+      return NextResponse.json(
+        { error: "Invalid comment ID format" },
+        { status: 400 }
+      );
+    }
+
+    await dbConnect();
+
+    const { content } = await req.json();
+    if (!content || !content.trim()) {
+      return NextResponse.json(
+        { error: "Comment content is required" },
+        { status: 400 }
+      );
+    }
+
+    // Find user
+    const user = await User.findOne({ clerkId: userId });
+    if (!user) {
+      return NextResponse.json({ error: "User not found" }, { status: 404 });
+    }
+
+    // Find comment
+    const comment = await Comment.findById(commentId);
+    if (!comment) {
+      return NextResponse.json({ error: "Comment not found" }, { status: 404 });
+    }
+
+    // Check if user is the author
+    if (!comment.author.equals(user._id)) {
+      return NextResponse.json(
+        { error: "You can only edit your own comments" },
+        { status: 403 }
+      );
+    }
+
+    // Update comment
+    comment.content = content.trim();
+    await comment.save();
+
+    // Populate author
+    await comment.populate("author", "username name image");
+
+    return NextResponse.json(
+      {
+        comment: {
+          id: comment._id.toString(),
+          author: {
+            id: comment.author._id.toString(),
+            username: comment.author.username,
+            name: comment.author.name,
+            image: comment.author.image,
+          },
+          content: comment.content,
+          post: comment.post.toString(),
+          parentComment: comment.parentComment
+            ? comment.parentComment.toString()
+            : null,
+          upvoteCount: comment.upvotes.length,
+          downvoteCount: comment.downvotes.length,
+          voteCount: comment.upvotes.length - comment.downvotes.length,
+          replyCount: comment.replies?.length || 0,
+          isUpvoted: comment.upvotes.some(id => id.equals(user._id)),
+          isDownvoted: comment.downvotes.some(id => id.equals(user._id)),
+          createdAt: comment.createdAt.toISOString(),
+          updatedAt: comment.updatedAt.toISOString(),
+        },
+      },
+      { status: 200 }
+    );
+  } catch (error) {
+    console.error("[PATCH Comment] Error:", error);
+    return NextResponse.json(
+      { error: "Failed to update comment" },
+      { status: 500 }
+    );
+  }
+}
+
+// DELETE /api/comments/[commentId]
+export async function DELETE(
+  req: NextRequest,
+  { params }: { params: { commentId: string } }
+) {
+  try {
+    const { userId } = await auth();
+    if (!userId) {
+      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
+    }
+
+    const { commentId } = params;
+    if (!Types.ObjectId.isValid(commentId)) {
+      return NextResponse.json(
+        { error: "Invalid comment ID format" },
+        { status: 400 }
+      );
+    }
+
+    await dbConnect();
+
+    // Find user
+    const user = await User.findOne({ clerkId: userId });
+    if (!user) {
+      return NextResponse.json({ error: "User not found" }, { status: 404 });
+    }
+
+    // Find comment
+    const comment = await Comment.findById(commentId);
+    if (!comment) {
+      return NextResponse.json({ error: "Comment not found" }, { status: 404 });
+    }
+
+    // Check if user is the author
+    if (!comment.author.equals(user._id)) {
+      return NextResponse.json(
+        { error: "You can only delete your own comments" },
+        { status: 403 }
+      );
+    }
+
+    // Remove comment from post
+    await Post.findByIdAndUpdate(comment.post, {
+      $pull: { comments: comment._id },
+    });
+
+    // If this is a reply, remove from parent comment
+    if (comment.parentComment) {
+      await Comment.findByIdAndUpdate(comment.parentComment, {
+        $pull: { replies: comment._id },
+      });
+    }
+
+    // Delete comment
+    await Comment.findByIdAndDelete(commentId);
+
+    return NextResponse.json({ success: true }, { status: 200 });
+  } catch (error) {
+    console.error("[DELETE Comment] Error:", error);
+    return NextResponse.json(
+      { error: "Failed to delete comment" },
+      { status: 500 }
+    );
+  }
+}
+
+// POST /api/comments/[commentId]/vote
+export async function POST(
+  req: NextRequest,
+  { params }: { params: { commentId: string } }
+) {
+  try {
+    const { userId } = await auth();
+    if (!userId) {
+      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
+    }
+
+    const { commentId } = params;
+    if (!Types.ObjectId.isValid(commentId)) {
+      return NextResponse.json(
+        { error: "Invalid comment ID format" },
+        { status: 400 }
+      );
+    }
+
+    await dbConnect();
+
+    const { voteType } = await req.json();
+    if (voteType !== "upvote" && voteType !== "downvote") {
+      return NextResponse.json(
+        { error: "Invalid vote type" },
+        { status: 400 }
+      );
+    }
+
+    // Find user
+    const user = await User.findOne({ clerkId: userId });
+    if (!user) {
+      return NextResponse.json({ error: "User not found" }, { status: 404 });
+    }
+
+    // Find comment
+    const comment = await Comment.findById(commentId);
+    if (!comment) {
+      return NextResponse.json({ error: "Comment not found" }, { status: 404 });
+    }
+
+    const isUpvoted = comment.upvotes.some(id => id.equals(user._id));
+    const isDownvoted = comment.downvotes.some(id => id.equals(user._id));
+
+    // Handle voting logic
+    if (voteType === "upvote") {
+      if (isUpvoted) {
+        // Remove upvote
+        comment.upvotes = comment.upvotes.filter(
+          id => !id.equals(user._id)
+        );
+      } else {
+        // Add upvote and remove downvote if exists
+        comment.upvotes.push(user._id);
+        if (isDownvoted) {
+          comment.downvotes = comment.downvotes.filter(
+            id => !id.equals(user._id)
+          );
+        }
+      }
+    } else {
+      // downvote
+      if (isDownvoted) {
+        // Remove downvote
+        comment.downvotes = comment.downvotes.filter(
+          id => !id.equals(user._id)
+        );
+      } else {
+        // Add downvote and remove upvote if exists
+        comment.downvotes.push(user._id);
+        if (isUpvoted) {
+          comment.upvotes = comment.upvotes.filter(
+            id => !id.equals(user._id)
+          );
+        }
+      }
+    }
+
+    await comment.save();
+
+    return NextResponse.json(
+      {
+        upvoteCount: comment.upvotes.length,
+        downvoteCount: comment.downvotes.length,
+        voteCount: comment.upvotes.length - comment.downvotes.length,
+        isUpvoted: comment.upvotes.some(id => id.equals(user._id)),
+        isDownvoted: comment.downvotes.some(id => id.equals(user._id)),
+      },
+      { status: 200 }
+    );
+  } catch (error) {
+    console.error("[POST Comment Vote] Error:", error);
+    return NextResponse.json(
+      { error: "Failed to vote on comment" },
+      { status: 500 }
+    );
+  }
+}
Index: src/app/(main)/settings/profile/page.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/app/(main)/settings/profile/page.tsx b/src/app/(main)/settings/profile/page.tsx
new file mode 100644
--- /dev/null	(date 1747009940625)
+++ b/src/app/(main)/settings/profile/page.tsx	(date 1747009940625)
@@ -0,0 +1,214 @@
+"use client";
+
+import { useState, useEffect } from "react";
+import { useRouter } from "next/navigation";
+import { motion } from "framer-motion";
+import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
+import { Button } from "@/components/ui/button";
+import { Input } from "@/components/ui/input";
+import { Textarea } from "@/components/ui/textarea";
+import { Loader2, Save, AlertCircle, User } from "lucide-react";
+import { toast } from "sonner";
+import { useAuth } from "@clerk/nextjs";
+import UploadAvatar from "@/components/upload-avatar";
+
+interface UserProfile {
+  id: string;
+  username: string;
+  name: string;
+  bio: string;
+  image: string;
+  email: string;
+  createdAt: string;
+  updatedAt: string;
+}
+
+export default function ProfileSettingsPage() {
+  const router = useRouter();
+  const { isSignedIn, isLoaded } = useAuth();
+
+  const [profile, setProfile] = useState<UserProfile | null>(null);
+  const [formState, setFormState] = useState({
+    username: "",
+    name: "",
+    bio: "",
+    image: "",
+  });
+  const [loading, setLoading] = useState(true);
+  const [submitting, setSubmitting] = useState(false);
+  const [error, setError] = useState<string | null>(null);
+  const [fieldErrors, setFieldErrors] = useState<Record<string, string>>({});
+
+  useEffect(() => {
+    async function fetchUserProfile() {
+      try {
+        setLoading(true);
+        const response = await fetch("/api/users/me");
+        if (!response.ok) throw new Error("Failed to fetch profile");
+        const data = await response.json();
+        setProfile(data);
+        setFormState({
+          username: data.username || "",
+          name: data.name || "",
+          bio: data.bio || "",
+          image: data.image || "",
+        });
+      } catch (err) {
+        setError((err as Error).message);
+        toast.error("Failed to load profile");
+      } finally {
+        setLoading(false);
+      }
+    }
+
+    if (isLoaded && isSignedIn) {
+      fetchUserProfile();
+    } else if (isLoaded && !isSignedIn) {
+      router.push("/sign-in");
+    }
+  }, [isLoaded, isSignedIn, router]);
+
+  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
+    const { name, value } = e.target;
+    setFormState((prev) => ({ ...prev, [name]: value }));
+    if (fieldErrors[name]) {
+      setFieldErrors((prev) => {
+        const newErrors = { ...prev };
+        delete newErrors[name];
+        return newErrors;
+      });
+    }
+  };
+
+  const handleSubmit = async (e: React.FormEvent) => {
+    e.preventDefault();
+
+    if (!formState.username.trim() || !formState.name.trim()) {
+      toast.error("Please fill in required fields");
+      return;
+    }
+
+    try {
+      setSubmitting(true);
+      const response = await fetch("/api/users/me", {
+        method: "PATCH",
+        headers: {
+          "Content-Type": "application/json",
+        },
+        body: JSON.stringify({
+          username: formState.username.trim(),
+          name: formState.name.trim(),
+          bio: formState.bio.trim(),
+          image: formState.image.trim(),
+        }),
+      });
+
+      if (!response.ok) {
+        const errorData = await response.json();
+        if (response.status === 400 && errorData.details) {
+          const serverFieldErrors: Record<string, string> = {};
+          Object.entries(errorData.details).forEach(([field, error]) => {
+            if (typeof error === "object" && Array.isArray((error as any)._errors)) {
+              serverFieldErrors[field] = (error as any)._errors[0];
+            }
+          });
+          setFieldErrors(serverFieldErrors);
+          throw new Error("Validation failed");
+        }
+        throw new Error(errorData.error || "Update failed");
+      }
+
+      const updated = await response.json();
+      setProfile(updated);
+      toast.success("Profile updated");
+    } catch (err) {
+      toast.error((err as Error).message);
+    } finally {
+      setSubmitting(false);
+    }
+  };
+
+  const handleAvatarUpload = (url: string) => {
+    setFormState((prev) => ({ ...prev, image: url }));
+  };
+
+  if (!isLoaded) return null;
+  if (loading) {
+    return (
+        <div className="max-w-3xl mx-auto py-12 px-6">
+          <div className="bg-white rounded-lg border border-gray-100 p-8 shadow-sm">
+            <div className="flex items-center justify-center h-40">
+              <Loader2 className="h-8 w-8 animate-spin text-gray-400" />
+            </div>
+          </div>
+        </div>
+    );
+  }
+
+  return (
+      <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} className="max-w-3xl mx-auto py-12 px-6">
+        <div className="bg-white rounded-lg border border-gray-100 overflow-hidden shadow-sm">
+          <div className="bg-gray-50 px-6 py-4 border-b border-gray-100">
+            <h1 className="text-xl font-semibold text-gray-800">Profile Settings</h1>
+            <p className="text-sm text-gray-500 mt-1">Update your profile information</p>
+          </div>
+
+          <form onSubmit={handleSubmit} className="p-6 space-y-6">
+            {error && (
+                <div className="p-4 bg-red-50 border border-red-200 rounded-lg text-red-700 flex items-start gap-3">
+                  <AlertCircle className="h-5 w-5 mt-0.5" />
+                  <div>
+                    <p className="font-medium">Error</p>
+                    <p className="text-sm mt-1">{error}</p>
+                  </div>
+                </div>
+            )}
+
+            {/* Avatar Upload */}
+            <div className="space-y-3">
+              <label className="block text-sm font-medium text-gray-700">Profile Picture</label>
+              <UploadAvatar
+                currentUrl={formState.image}
+                onUpload={handleAvatarUpload}
+                username={formState.username || profile?.username || ''}
+                name={formState.name || profile?.name || ''}
+              />
+              <p className="text-xs text-gray-500 mt-1">
+                Click the camera icon to upload a new profile picture. Supported formats: JPEG, PNG, WEBP, GIF (max 5MB).
+              </p>
+            </div>
+
+            <div>
+              <label className="block text-sm font-medium text-gray-700">Username</label>
+              <Input name="username" value={formState.username} onChange={handleChange} required />
+              {fieldErrors.username && <p className="text-sm text-red-600">{fieldErrors.username}</p>}
+            </div>
+
+            <div>
+              <label className="block text-sm font-medium text-gray-700">Full Name</label>
+              <Input name="name" value={formState.name} onChange={handleChange} required />
+              {fieldErrors.name && <p className="text-sm text-red-600">{fieldErrors.name}</p>}
+            </div>
+
+            <div>
+              <label className="block text-sm font-medium text-gray-700">Bio</label>
+              <Textarea name="bio" value={formState.bio} onChange={handleChange} className="min-h-[120px]" />
+              <p className="text-xs text-gray-500 mt-1">{formState.bio.length}/500 characters</p>
+            </div>
+
+            <div>
+              <label className="block text-sm font-medium text-gray-700">Email</label>
+              <Input value={profile?.email || ""} disabled className="bg-gray-50 text-gray-500" />
+            </div>
+
+            <div className="flex justify-end gap-3">
+              <Button type="button" variant="outline" onClick={() => router.back()} disabled={submitting}>Cancel</Button>
+              <Button type="submit" disabled={submitting} className="bg-[#00AEEF] text-white">
+                {submitting ? <><Loader2 className="mr-2 h-4 w-4 animate-spin" /> Saving...</> : <><Save className="mr-2 h-4 w-4" /> Save Changes</>}
+              </Button>
+            </div>
+          </form>
+        </div>
+      </motion.div>
+  );
+}
Index: qodana.yaml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/qodana.yaml b/qodana.yaml
new file mode 100644
--- /dev/null	(date 1747009940692)
+++ b/qodana.yaml	(date 1747009940692)
@@ -0,0 +1,6 @@
+version: "1.0"
+linter: jetbrains/qodana-js:2024.3
+profile:
+  name: qodana.recommended
+include:
+  - name: CheckDependencyLicenses
Index: src/components/comment-section.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/comment-section.tsx b/src/components/comment-section.tsx
new file mode 100644
--- /dev/null	(date 1747009940712)
+++ b/src/components/comment-section.tsx	(date 1747009940712)
@@ -0,0 +1,308 @@
+"use client";
+
+import { useState, useEffect } from "react";
+import { useAuth } from "@clerk/nextjs";
+import { Button } from "@/components/ui/button";
+import { Textarea } from "@/components/ui/textarea";
+import { Loader2, MessageSquare } from "lucide-react";
+import CommentItem from "@/components/comment-item";
+import { toast } from "sonner";
+
+interface Comment {
+  id: string;
+  author: {
+    id: string;
+    username: string;
+    name: string;
+    image?: string;
+  };
+  content: string;
+  post: string;
+  parentComment: string | null;
+  upvoteCount: number;
+  downvoteCount: number;
+  voteCount: number;
+  replyCount: number;
+  isUpvoted: boolean;
+  isDownvoted: boolean;
+  createdAt: string;
+  updatedAt: string;
+}
+
+interface CommentSectionProps {
+  postId: string;
+  initialCommentCount?: number;
+}
+
+export default function CommentSection({
+  postId,
+  initialCommentCount = 0,
+}: CommentSectionProps) {
+  const { userId, isSignedIn } = useAuth();
+  const [comments, setComments] = useState<Comment[]>([]);
+  const [commentContent, setCommentContent] = useState("");
+  const [isSubmitting, setIsSubmitting] = useState(false);
+  const [isLoading, setIsLoading] = useState(false);
+  const [hasMore, setHasMore] = useState(false);
+  const [page, setPage] = useState(1);
+  const [totalComments, setTotalComments] = useState(initialCommentCount);
+  const [error, setError] = useState<string | null>(null);
+
+  // Fetch comments
+  const fetchComments = async (reset = false) => {
+    try {
+      setIsLoading(true);
+      setError(null);
+      
+      const nextPage = reset ? 1 : page;
+      const response = await fetch(
+        `/api/posts/${postId}/comments?page=${nextPage}&limit=10`
+      );
+      
+      if (!response.ok) {
+        const data = await response.json();
+        throw new Error(data.error || `Failed to fetch comments (${response.status})`);
+      }
+      
+      const data = await response.json();
+      
+      setComments(prev => (reset ? data.comments : [...prev, ...data.comments]));
+      setHasMore(data.pagination.hasMore);
+      setPage(reset ? 2 : page + 1);
+      setTotalComments(data.pagination.totalComments);
+    } catch (err) {
+      setError(err instanceof Error ? err.message : "Failed to load comments");
+      toast.error("Failed to load comments");
+    } finally {
+      setIsLoading(false);
+    }
+  };
+
+  // Load initial comments
+  useEffect(() => {
+    if (postId) {
+      fetchComments(true);
+    }
+  }, [postId]);
+
+  // Submit a new comment
+  const handleSubmitComment = async (e: React.FormEvent) => {
+    e.preventDefault();
+    
+    if (!isSignedIn) {
+      toast.error("Please sign in to comment");
+      return;
+    }
+    
+    if (!commentContent.trim()) {
+      toast.error("Comment cannot be empty");
+      return;
+    }
+    
+    try {
+      setIsSubmitting(true);
+      
+      const response = await fetch(`/api/posts/${postId}/comments`, {
+        method: "POST",
+        headers: { "Content-Type": "application/json" },
+        body: JSON.stringify({ content: commentContent }),
+      });
+      
+      if (!response.ok) {
+        const data = await response.json();
+        throw new Error(data.error || `Failed to post comment (${response.status})`);
+      }
+      
+      const data = await response.json();
+      
+      // Add new comment to the top of the list
+      setComments(prev => [data.comment, ...prev]);
+      setTotalComments(prev => prev + 1);
+      setCommentContent("");
+      toast.success("Comment posted successfully");
+    } catch (err) {
+      toast.error(err instanceof Error ? err.message : "Failed to post comment");
+    } finally {
+      setIsSubmitting(false);
+    }
+  };
+
+  // Handle comment vote
+  const handleVote = async (commentId: string, voteType: "upvote" | "downvote") => {
+    if (!isSignedIn) {
+      toast.error("Please sign in to vote");
+      return;
+    }
+    
+    try {
+      // Optimistic update
+      setComments(prev =>
+        prev.map(comment => {
+          if (comment.id === commentId) {
+            const isUpvoted = comment.isUpvoted;
+            const isDownvoted = comment.isDownvoted;
+            
+            let upvoteCount = comment.upvoteCount;
+            let downvoteCount = comment.downvoteCount;
+            
+            if (voteType === "upvote") {
+              if (isUpvoted) {
+                upvoteCount--;
+              } else {
+                upvoteCount++;
+                if (isDownvoted) {
+                  downvoteCount--;
+                }
+              }
+              
+              return {
+                ...comment,
+                upvoteCount,
+                downvoteCount,
+                voteCount: upvoteCount - downvoteCount,
+                isUpvoted: !isUpvoted,
+                isDownvoted: isDownvoted && voteType === "upvote" ? false : isDownvoted,
+              };
+            } else {
+              if (isDownvoted) {
+                downvoteCount--;
+              } else {
+                downvoteCount++;
+                if (isUpvoted) {
+                  upvoteCount--;
+                }
+              }
+              
+              return {
+                ...comment,
+                upvoteCount,
+                downvoteCount,
+                voteCount: upvoteCount - downvoteCount,
+                isDownvoted: !isDownvoted,
+                isUpvoted: isUpvoted && voteType === "downvote" ? false : isUpvoted,
+              };
+            }
+          }
+          return comment;
+        })
+      );
+      
+      // Send request to server
+      const response = await fetch(`/api/comments/${commentId}/vote`, {
+        method: "POST",
+        headers: { "Content-Type": "application/json" },
+        body: JSON.stringify({ voteType }),
+      });
+      
+      if (!response.ok) {
+        throw new Error("Failed to vote");
+      }
+      
+      // Server response will be handled by the optimistic update
+    } catch (err) {
+      toast.error("Failed to vote on comment");
+      // Revert optimistic update by refetching
+      fetchComments(true);
+    }
+  };
+
+  // Delete a comment
+  const handleDelete = async (commentId: string) => {
+    try {
+      const response = await fetch(`/api/comments/${commentId}`, {
+        method: "DELETE",
+      });
+      
+      if (!response.ok) {
+        throw new Error("Failed to delete comment");
+      }
+      
+      // Remove comment from list
+      setComments(prev => prev.filter(comment => comment.id !== commentId));
+      setTotalComments(prev => prev - 1);
+      toast.success("Comment deleted");
+    } catch (err) {
+      toast.error("Failed to delete comment");
+    }
+  };
+
+  return (
+    <div className="mt-6">
+      <div className="flex items-center gap-2 mb-4">
+        <MessageSquare className="h-5 w-5 text-gray-500" />
+        <h3 className="text-lg font-medium">
+          Comments ({totalComments})
+        </h3>
+      </div>
+      
+      {/* Comment form */}
+      {isSignedIn && (
+        <form onSubmit={handleSubmitComment} className="mb-6">
+          <Textarea
+            placeholder="Write a comment..."
+            value={commentContent}
+            onChange={e => setCommentContent(e.target.value)}
+            className="mb-2 min-h-[100px]"
+          />
+          <div className="flex justify-end">
+            <Button
+              type="submit"
+              disabled={isSubmitting || !commentContent.trim()}
+              className="bg-[#00AEEF] hover:bg-[#00AEEF]/90 text-white"
+            >
+              {isSubmitting ? (
+                <>
+                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
+                  Posting...
+                </>
+              ) : (
+                "Post Comment"
+              )}
+            </Button>
+          </div>
+        </form>
+      )}
+      
+      {/* Comments list */}
+      <div className="space-y-4">
+        {comments.length === 0 && !isLoading ? (
+          <p className="text-gray-500 text-center py-4">No comments yet. Be the first to comment!</p>
+        ) : (
+          comments.map(comment => (
+            <CommentItem
+              key={comment.id}
+              comment={comment}
+              onVote={handleVote}
+              onDelete={handleDelete}
+              postId={postId}
+            />
+          ))
+        )}
+        
+        {isLoading && (
+          <div className="flex justify-center py-4">
+            <Loader2 className="h-6 w-6 animate-spin text-gray-400" />
+          </div>
+        )}
+        
+        {error && (
+          <div className="text-red-500 text-center py-4">
+            {error}
+          </div>
+        )}
+        
+        {hasMore && !isLoading && (
+          <div className="flex justify-center pt-2">
+            <Button
+              variant="outline"
+              onClick={() => fetchComments()}
+              className="text-gray-600"
+            >
+              Load More Comments
+            </Button>
+          </div>
+        )}
+      </div>
+    </div>
+  );
+}
Index: src/app/api/bookmarks/route.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/app/api/bookmarks/route.ts b/src/app/api/bookmarks/route.ts
new file mode 100644
--- /dev/null	(date 1747009940671)
+++ b/src/app/api/bookmarks/route.ts	(date 1747009940671)
@@ -0,0 +1,140 @@
+// src/app/api/bookmarks/route.ts
+import { NextRequest, NextResponse } from "next/server";
+import { auth } from "@clerk/nextjs/server";
+import dbConnect from "@/lib/dbConnect";
+import User, { IUser } from "@/models/User";
+import Post, { IPost } from "@/models/Post";
+import { Types } from "mongoose";
+import { LeanDocument } from "@/types/mongoose";
+import { PostResponse } from "@/types/api";
+
+// Define types for the populated post document
+type PopulatedAuthor = {
+  _id: Types.ObjectId;
+  username: string;
+  name: string;
+  image?: string;
+};
+
+type PopulatedCommunity = {
+  _id: Types.ObjectId;
+  name: string;
+  image?: string;
+};
+
+type BookmarkedPost = LeanDocument<IPost> & {
+  author: PopulatedAuthor;
+  community?: PopulatedCommunity;
+  mediaFiles: string[];
+  upvotes: Types.ObjectId[];
+  downvotes: Types.ObjectId[];
+  comments: Types.ObjectId[];
+  savedBy: Types.ObjectId[];
+};
+
+interface BookmarksResponse {
+  posts: PostResponse[];
+  pagination: {
+    page: number;
+    limit: number;
+    totalPosts: number;
+    hasMore: boolean;
+  };
+}
+
+// GET /api/bookmarks
+export async function GET(req: NextRequest) {
+  try {
+    const { userId } = await auth();
+    if (!userId) {
+      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
+    }
+
+    await dbConnect();
+
+    // Get query parameters
+    const url = req.nextUrl;
+    const page = parseInt(url.searchParams.get("page") ?? "1", 10);
+    const limit = parseInt(url.searchParams.get("limit") ?? "10", 10);
+    const skip = (page - 1) * limit;
+
+    // Find user
+    const user = await User.findOne({ clerkId: userId }).lean<LeanDocument<IUser>>();
+    if (!user) {
+      return NextResponse.json({ error: "User not found" }, { status: 404 });
+    }
+
+    // Find posts saved by the user
+    const posts = await Post.find({ savedBy: user._id })
+      .sort({ createdAt: -1 })
+      .skip(skip)
+      .limit(limit)
+      .populate("author", "username name image")
+      .populate("community", "name image")
+      .lean<BookmarkedPost[]>();
+
+    // Get total count
+    const total = await Post.countDocuments({ savedBy: user._id });
+
+    // Transform posts for client
+    const transformedPosts: PostResponse[] = posts.map(p => {
+      const upvotes = p.upvotes ?? [];
+      const downvotes = p.downvotes ?? [];
+      const comments = p.comments ?? [];
+      const savedBy = p.savedBy ?? [];
+
+      const isUpvoted = upvotes.some(id => id.equals(user._id));
+      const isDownvoted = downvotes.some(id => id.equals(user._id));
+      const isSaved = savedBy.some(id => id.equals(user._id));
+
+      // Create community info if available
+      const communityInfo = p.community ? {
+        id: p.community._id.toString(),
+        name: p.community.name,
+        image: p.community.image,
+      } : undefined;
+
+      return {
+        id: p._id.toString(),
+        author: {
+          id: p.author._id.toString(),
+          username: p.author.username,
+          name: p.author.name,
+          image: p.author.image,
+        },
+        content: p.content,
+        mediaFiles: p.mediaFiles || [],
+        community: communityInfo,
+        upvoteCount: upvotes.length,
+        downvoteCount: downvotes.length,
+        voteCount: upvotes.length - downvotes.length,
+        commentCount: comments.length,
+        savedCount: savedBy.length,
+        isUpvoted,
+        isDownvoted,
+        isSaved,
+        createdAt: p.createdAt.toISOString(),
+        updatedAt: p.updatedAt.toISOString(),
+      };
+    });
+
+    // Prepare the response
+    const response: BookmarksResponse = {
+      posts: transformedPosts,
+      pagination: {
+        page,
+        limit,
+        totalPosts: total,
+        hasMore: total > skip + posts.length,
+      },
+    };
+
+    return NextResponse.json(response, { status: 200 });
+  } catch (error) {
+    console.error("[GET Bookmarks] Error:", error);
+    return NextResponse.json(
+      { error: "Failed to fetch bookmarks" },
+      { status: 500 }
+    );
+  }
+}
Index: src/components/comment-item.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/comment-item.tsx b/src/components/comment-item.tsx
new file mode 100644
--- /dev/null	(date 1747009940733)
+++ b/src/components/comment-item.tsx	(date 1747009940733)
@@ -0,0 +1,424 @@
+"use client";
+
+import { useState, useCallback } from "react";
+import { formatDistanceToNow } from "date-fns";
+import { ArrowUp, ArrowDown, Reply, MoreVertical, Trash, Edit } from "lucide-react";
+import { Button } from "@/components/ui/button";
+import { Textarea } from "@/components/ui/textarea";
+import { cn } from "@/lib/utils";
+import { useAuth } from "@clerk/nextjs";
+import Image from "next/image";
+import Link from "next/link";
+import {
+  DropdownMenu,
+  DropdownMenuContent,
+  DropdownMenuItem,
+  DropdownMenuTrigger,
+} from "@/components/ui/dropdown-menu";
+import { toast } from "sonner";
+
+interface Comment {
+  id: string;
+  author: {
+    id: string;
+    username: string;
+    name: string;
+    image?: string;
+  };
+  content: string;
+  post: string;
+  parentComment: string | null;
+  upvoteCount: number;
+  downvoteCount: number;
+  voteCount: number;
+  replyCount: number;
+  isUpvoted: boolean;
+  isDownvoted: boolean;
+  createdAt: string;
+  updatedAt: string;
+}
+
+// Define action types for client components
+type VoteCommentActionType = (commentId: string, voteType: "upvote" | "downvote") => Promise<void>;
+type DeleteCommentActionType = (commentId: string) => Promise<void>;
+type ToggleEditActionType = () => void;
+type SubmitEditActionType = (e: React.FormEvent) => Promise<void>;
+
+interface CommentItemProps {
+  comment: Comment;
+  onVote: VoteCommentActionType;
+  onDelete: DeleteCommentActionType;
+  postId: string;
+}
+
+export default function CommentItem({
+  comment,
+  onVote,
+  onDelete,
+  postId,
+}: CommentItemProps) {
+  const { userId } = useAuth();
+  const [isReplying, setIsReplying] = useState(false);
+  const [replyContent, setReplyContent] = useState("");
+  const [isSubmittingReply, setIsSubmittingReply] = useState(false);
+  const [showReplies, setShowReplies] = useState(false);
+  const [replies, setReplies] = useState<Comment[]>([]);
+  const [isLoadingReplies, setIsLoadingReplies] = useState(false);
+  const [isEditing, setIsEditing] = useState(false);
+  const [editContent, setEditContent] = useState(comment.content);
+  const [isSubmittingEdit, setIsSubmittingEdit] = useState(false);
+
+  const isAuthor = userId && comment.author.id === userId;
+
+  // Toggle reply form
+  const toggleReply = () => {
+    setIsReplying(!isReplying);
+    if (!isReplying) {
+      setReplyContent("");
+    }
+  };
+
+  // Submit a reply
+  const handleSubmitReply = async (e: React.FormEvent) => {
+    e.preventDefault();
+
+    if (!replyContent.trim()) {
+      toast.error("Reply cannot be empty");
+      return;
+    }
+
+    try {
+      setIsSubmittingReply(true);
+
+      const response = await fetch(`/api/posts/${postId}/comments`, {
+        method: "POST",
+        headers: { "Content-Type": "application/json" },
+        body: JSON.stringify({
+          content: replyContent,
+          parentCommentId: comment.id,
+        }),
+      });
+
+      if (!response.ok) {
+        const data = await response.json();
+        throw new Error(data.error || `Failed to post reply (${response.status})`);
+      }
+
+      const data = await response.json();
+
+      // Add new reply to the list if replies are already loaded
+      if (showReplies) {
+        setReplies(prev => [data.comment, ...prev]);
+      }
+
+      // Update reply count
+      comment.replyCount += 1;
+
+      setReplyContent("");
+      setIsReplying(false);
+      toast.success("Reply posted successfully");
+
+      // Show replies if they weren't already visible
+      if (!showReplies) {
+        toggleReplies();
+      }
+    } catch (error) {
+      toast.error(error instanceof Error ? error.message : "Failed to post reply");
+    } finally {
+      setIsSubmittingReply(false);
+    }
+  };
+
+  // Toggle showing replies
+  const toggleReplies = async () => {
+    if (!showReplies && comment.replyCount > 0) {
+      // Load replies
+      try {
+        setIsLoadingReplies(true);
+
+        const response = await fetch(
+          `/api/posts/${postId}/comments?parentId=${comment.id}&page=1&limit=10`
+        );
+
+        if (!response.ok) {
+          throw new Error("Failed to load replies");
+        }
+
+        const data = await response.json();
+        setReplies(data.comments);
+      } catch (error) {
+        toast.error(error instanceof Error ? error.message : "Failed to load replies");
+      } finally {
+        setIsLoadingReplies(false);
+      }
+    }
+
+    setShowReplies(!showReplies);
+  };
+
+  // Toggle edit mode
+  const toggleEditAction = useCallback<ToggleEditActionType>(() => {
+    setIsEditing(!isEditing);
+    if (!isEditing) {
+      setEditContent(comment.content);
+    }
+  }, [isEditing, comment.content]);
+
+  // Submit an edit
+  const handleSubmitEditAction = useCallback<SubmitEditActionType>(async (e) => {
+    e.preventDefault();
+
+    if (!editContent.trim()) {
+      toast.error("Comment cannot be empty");
+      return;
+    }
+
+    try {
+      setIsSubmittingEdit(true);
+
+      const response = await fetch(`/api/comments/${comment.id}`, {
+        method: "PATCH",
+        headers: { "Content-Type": "application/json" },
+        body: JSON.stringify({ content: editContent }),
+      });
+
+      if (!response.ok) {
+        const data = await response.json();
+        throw new Error(data.error || `Failed to edit comment (${response.status})`);
+      }
+
+      const data = await response.json();
+
+      // Update comment with edited content
+      comment.content = data.comment.content;
+      comment.updatedAt = data.comment.updatedAt;
+
+      setIsEditing(false);
+      toast.success("Comment updated successfully");
+    } catch (err) {
+      toast.error(err instanceof Error ? err.message : "Failed to edit comment");
+    } finally {
+      setIsSubmittingEdit(false);
+    }
+  }, [comment, editContent]);
+
+  return (
+    <div className="border border-gray-100 rounded-lg p-4 bg-white">
+      <div className="flex gap-3">
+        {/* Author avatar */}
+        <div className="flex-shrink-0">
+          {comment.author.image ? (
+            <div className="relative h-8 w-8 rounded-full overflow-hidden">
+              <Image
+                src={comment.author.image}
+                alt={comment.author.name}
+                fill
+                className="object-cover"
+              />
+            </div>
+          ) : (
+            <div className="h-8 w-8 rounded-full bg-gray-200 flex items-center justify-center">
+              <span className="text-xs font-medium text-gray-600">
+                {comment.author.name.charAt(0).toUpperCase()}
+              </span>
+            </div>
+          )}
+        </div>
+
+        <div className="flex-1 min-w-0">
+          {/* Comment header */}
+          <div className="flex items-center justify-between mb-1">
+            <div>
+              <Link
+                href={`/profile/${comment.author.id}`}
+                className="text-sm font-medium text-gray-900 hover:text-[#00AEEF]"
+              >
+                {comment.author.name}
+              </Link>
+              <span className="text-xs text-gray-500 ml-2">
+                {formatDistanceToNow(new Date(comment.createdAt), { addSuffix: true })}
+              </span>
+            </div>
+
+            {/* Actions dropdown for author */}
+            {isAuthor && (
+              <DropdownMenu>
+                <DropdownMenuTrigger>
+                  <Button variant="ghost" size="sm" className="h-8 w-8 p-0">
+                    <MoreVertical className="h-4 w-4" />
+                    <span className="sr-only">More</span>
+                  </Button>
+                </DropdownMenuTrigger>
+                <DropdownMenuContent>
+                  <DropdownMenuItem onClick={toggleEditAction}>
+                    <Edit className="h-4 w-4 mr-2" />
+                    Edit
+                  </DropdownMenuItem>
+                  <DropdownMenuItem
+                    onClick={() => onDelete(comment.id)}
+                    className="text-red-600 focus:text-red-600"
+                  >
+                    <Trash className="h-4 w-4 mr-2" />
+                    Delete
+                  </DropdownMenuItem>
+                </DropdownMenuContent>
+              </DropdownMenu>
+            )}
+          </div>
+
+          {/* Comment content */}
+          {isEditing ? (
+            <form onSubmit={handleSubmitEditAction}>
+              <Textarea
+                value={editContent}
+                onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => setEditContent(e.target.value)}
+                className="mb-2 min-h-[100px]"
+              />
+              <div className="flex justify-end gap-2">
+                <Button
+                  type="button"
+                  variant="outline"
+                  size="sm"
+                  onClick={toggleEditAction}
+                  disabled={isSubmittingEdit}
+                >
+                  Cancel
+                </Button>
+                <Button
+                  type="submit"
+                  size="sm"
+                  disabled={isSubmittingEdit || !editContent.trim()}
+                  className="bg-[#00AEEF] hover:bg-[#00AEEF]/90 text-white"
+                >
+                  {isSubmittingEdit ? "Saving..." : "Save"}
+                </Button>
+              </div>
+            </form>
+          ) : (
+            <p className="text-gray-700 text-sm whitespace-pre-wrap">{comment.content}</p>
+          )}
+
+          {/* Comment actions */}
+          <div className="flex items-center gap-4 mt-2">
+            {/* Voting */}
+            <div className="flex items-center gap-1">
+              <Button
+                variant="ghost"
+                size="icon"
+                className={cn(
+                  "h-7 w-7 rounded-full hover:bg-blue-50",
+                  comment.isUpvoted ? "text-[#00AEEF]" : "text-gray-500 hover:text-[#00AEEF]",
+                )}
+                onClick={() => onVote(comment.id, "upvote")}
+              >
+                <ArrowUp className="h-3.5 w-3.5" />
+                <span className="sr-only">Upvote</span>
+              </Button>
+
+              <span
+                className={cn(
+                  "text-xs font-medium",
+                  comment.isUpvoted
+                    ? "text-[#00AEEF]"
+                    : comment.isDownvoted
+                    ? "text-red-500"
+                    : "text-gray-600",
+                )}
+              >
+                {comment.voteCount}
+              </span>
+
+              <Button
+                variant="ghost"
+                size="icon"
+                className={cn(
+                  "h-7 w-7 rounded-full hover:bg-blue-50",
+                  comment.isDownvoted ? "text-red-500" : "text-gray-500 hover:text-red-500",
+                )}
+                onClick={() => onVote(comment.id, "downvote")}
+              >
+                <ArrowDown className="h-3.5 w-3.5" />
+                <span className="sr-only">Downvote</span>
+              </Button>
+            </div>
+
+            {/* Reply button */}
+            <Button
+              variant="ghost"
+              size="sm"
+              className="h-7 px-2 text-xs text-gray-500 hover:text-[#00AEEF] hover:bg-blue-50"
+              onClick={toggleReply}
+            >
+              <Reply className="h-3.5 w-3.5 mr-1" />
+              Reply
+            </Button>
+
+            {/* Show replies button (if there are replies) */}
+            {comment.replyCount > 0 && (
+              <Button
+                variant="ghost"
+                size="sm"
+                className="h-7 px-2 text-xs text-gray-500 hover:text-[#00AEEF] hover:bg-blue-50"
+                onClick={toggleReplies}
+              >
+                {showReplies ? "Hide Replies" : `Show Replies (${comment.replyCount})`}
+              </Button>
+            )}
+          </div>
+
+          {/* Reply form */}
+          {isReplying && (
+            <form onSubmit={handleSubmitReply} className="mt-3">
+              <Textarea
+                placeholder="Write a reply..."
+                value={replyContent}
+                onChange={e => setReplyContent(e.target.value)}
+                className="mb-2 min-h-[80px] text-sm"
+              />
+              <div className="flex justify-end gap-2">
+                <Button
+                  type="button"
+                  variant="outline"
+                  size="sm"
+                  onClick={toggleReply}
+                  disabled={isSubmittingReply}
+                >
+                  Cancel
+                </Button>
+                <Button
+                  type="submit"
+                  size="sm"
+                  disabled={isSubmittingReply || !replyContent.trim()}
+                  className="bg-[#00AEEF] hover:bg-[#00AEEF]/90 text-white"
+                >
+                  {isSubmittingReply ? "Posting..." : "Post Reply"}
+                </Button>
+              </div>
+            </form>
+          )}
+
+          {/* Replies */}
+          {showReplies && (
+            <div className="mt-3 pl-4 border-l-2 border-gray-100 space-y-3">
+              {isLoadingReplies ? (
+                <p className="text-gray-500 text-xs py-2">Loading replies...</p>
+              ) : replies.length > 0 ? (
+                replies.map(reply => (
+                  <CommentItem
+                    key={reply.id}
+                    comment={reply}
+                    onVote={onVote}
+                    onDelete={onDelete}
+                    postId={postId}
+                  />
+                ))
+              ) : (
+                <p className="text-gray-500 text-xs py-2">No replies yet</p>
+              )}
+            </div>
+          )}
+        </div>
+      </div>
+    </div>
+  );
+}
Index: src/components/upload-media.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/upload-media.tsx b/src/components/upload-media.tsx
new file mode 100644
--- /dev/null	(date 1747009940931)
+++ b/src/components/upload-media.tsx	(date 1747009940931)
@@ -0,0 +1,141 @@
+"use client";
+
+import { useCallback, useState } from "react";
+import { useDropzone } from "react-dropzone";
+import { Button } from "@/components/ui/button";
+import { toast } from "sonner";
+import { Image as ImageIcon, Film, X, Loader2, Upload } from "lucide-react";
+import { uploadMediaToSupabase } from "@/lib/supabase-upload";
+import Image from "next/image";
+
+interface UploadMediaProps {
+  onUpload: (url: string) => void;
+  onRemove?: (url: string) => void;
+  uploadedFiles?: string[];
+  maxFiles?: number;
+  className?: string;
+}
+
+export default function UploadMedia({
+  onUpload,
+  onRemove,
+  uploadedFiles = [],
+  maxFiles = 4,
+  className = "",
+}: UploadMediaProps) {
+  const [uploading, setUploading] = useState(false);
+  const [currentFile, setCurrentFile] = useState<string | null>(null);
+
+  const onDrop = useCallback(
+    async (acceptedFiles: File[]) => {
+      const file = acceptedFiles[0];
+      if (!file) return;
+
+      // Check if we've reached the maximum number of files
+      if (uploadedFiles.length >= maxFiles) {
+        toast.error(`You can only upload a maximum of ${maxFiles} files.`);
+        return;
+      }
+
+      setCurrentFile(file.name);
+
+      try {
+        setUploading(true);
+        const url = await uploadMediaToSupabase(file);
+        onUpload(url);
+        toast.success("Media uploaded successfully!");
+      } catch (err) {
+        console.error("Upload error:", err);
+        toast.error(err instanceof Error ? err.message : "Failed to upload media");
+      } finally {
+        setUploading(false);
+        setCurrentFile(null);
+      }
+    },
+    [onUpload, uploadedFiles.length, maxFiles]
+  );
+
+  const { getRootProps, getInputProps, isDragActive } = useDropzone({
+    onDrop,
+    accept: {
+      "image/*": [],
+      "video/mp4": [],
+      "video/quicktime": [],
+      "video/webm": [],
+    },
+    maxFiles: 1,
+  });
+
+  const handleRemove = (url: string) => {
+    if (onRemove) {
+      onRemove(url);
+    }
+  };
+
+  return (
+    <div className={`space-y-4 ${className}`}>
+      {/* Uploaded Files Preview */}
+      {uploadedFiles.length > 0 && (
+        <div className="grid grid-cols-2 gap-2">
+          {uploadedFiles.map((url, index) => (
+            <div key={index} className="relative rounded-md overflow-hidden border border-gray-200 group">
+              {url.endsWith(".mp4") || url.endsWith(".mov") || url.endsWith(".webm") ? (
+                <div className="aspect-video bg-gray-100 flex items-center justify-center">
+                  <Film className="h-8 w-8 text-gray-400" />
+                  <span className="text-xs text-gray-500 ml-2">Video</span>
+                </div>
+              ) : (
+                <div className="aspect-video relative">
+                  <Image
+                    src={url}
+                    alt={`Uploaded media ${index + 1}`}
+                    fill
+                    className="object-cover"
+                  />
+                </div>
+              )}
+              <Button
+                type="button"
+                size="icon"
+                variant="destructive"
+                className="absolute top-1 right-1 h-6 w-6 rounded-full opacity-0 group-hover:opacity-100 transition-opacity"
+                onClick={() => handleRemove(url)}
+              >
+                <X className="h-3 w-3" />
+              </Button>
+            </div>
+          ))}
+        </div>
+      )}
+
+      {/* Upload Area */}
+      <div
+        {...getRootProps()}
+        className={`border-2 border-dashed rounded-lg p-4 text-center cursor-pointer transition-colors ${
+          isDragActive ? "border-blue-400 bg-blue-50" : "border-gray-300 hover:border-blue-400"
+        }`}
+      >
+        <input {...getInputProps()} />
+        
+        {uploading ? (
+          <div className="flex flex-col items-center py-4">
+            <Loader2 className="h-8 w-8 text-blue-500 animate-spin mb-2" />
+            <p className="text-sm text-gray-600">Uploading {currentFile}...</p>
+          </div>
+        ) : (
+          <div className="flex flex-col items-center py-4">
+            <div className="bg-gray-100 rounded-full p-3 mb-2">
+              <Upload className="h-6 w-6 text-gray-500" />
+            </div>
+            <p className="text-sm font-medium text-gray-700">
+              Drag & drop or click to upload
+            </p>
+            <p className="text-xs text-gray-500 mt-1">
+              Supports images and videos (max {maxFiles} files)
+            </p>
+          </div>
+        )}
+      </div>
+    </div>
+  );
+}
Index: src/app/api/posts/user/[username]/route.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/app/api/posts/user/[username]/route.ts b/src/app/api/posts/user/[username]/route.ts
new file mode 100644
--- /dev/null	(date 1747009940820)
+++ b/src/app/api/posts/user/[username]/route.ts	(date 1747009940820)
@@ -0,0 +1,39 @@
+import { NextRequest, NextResponse } from "next/server";
+import dbConnect from "@/lib/dbConnect";
+import Post from "@/models/Post";
+import User from "@/models/User";
+
+export async function GET(
+    req: NextRequest,
+    { params }: { params: { username: string } }
+) {
+    try {
+        await dbConnect();
+
+        const { username } = params;
+
+        // Find the user by username
+        const user = await User.findOne({ username }).select("_id");
+        if (!user) {
+            return NextResponse.json({ error: "User not found" }, { status: 404 });
+        }
+
+        // Fetch posts authored by this user
+        const posts = await Post.find({ author: user._id })
+            .sort({ createdAt: -1 })
+            .select("content createdAt")
+            .lean();
+
+        // Transform posts
+        const transformedPosts = posts.map((post) => ({
+            id: post._id.toString(),
+            content: post.content,
+            createdAt: post.createdAt.toISOString(),
+        }));
+
+        return NextResponse.json({ posts: transformedPosts }, { status: 200 });
+    } catch (error) {
+        console.error("[User Posts API Error]:", error);
+        return NextResponse.json({ error: "Failed to fetch user's posts" }, { status: 500 });
+    }
+}
Index: src/components/upload-avatar.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/upload-avatar.tsx b/src/components/upload-avatar.tsx
new file mode 100644
--- /dev/null	(date 1747009940906)
+++ b/src/components/upload-avatar.tsx	(date 1747009940906)
@@ -0,0 +1,136 @@
+"use client";
+
+import { useCallback, useState, useRef } from "react";
+import { useDropzone } from "react-dropzone";
+import { Button } from "@/components/ui/button";
+import { toast } from "sonner";
+import { Avatar, AvatarImage, AvatarFallback } from "@/components/ui/avatar";
+import { User, Camera, Loader2, X } from "lucide-react";
+import { uploadAvatarToSupabase } from "@/lib/supabase-upload";
+
+interface UploadAvatarProps {
+    currentUrl?: string;
+    onUpload: (url: string) => void;
+    username?: string;
+    name?: string;
+    className?: string;
+}
+
+export default function UploadAvatar({
+    currentUrl,
+    onUpload,
+    username = 'user',
+    name = '',
+    className = ''
+}: UploadAvatarProps) {
+    const [uploading, setUploading] = useState(false);
+    const [fileName, setFileName] = useState<string | null>(null);
+    const [previewUrl, setPreviewUrl] = useState<string | null>(null);
+    const fileInputRef = useRef<HTMLInputElement>(null);
+
+    const onDrop = useCallback(
+        async (acceptedFiles: File[]) => {
+            const file = acceptedFiles[0];
+            if (!file) return;
+
+            // Create a preview
+            const objectUrl = URL.createObjectURL(file);
+            setPreviewUrl(objectUrl);
+
+            try {
+                setUploading(true);
+                setFileName(file.name);
+                const url = await uploadAvatarToSupabase(file);
+                onUpload(url);
+                toast.success("Profile picture uploaded successfully!");
+            } catch (err) {
+                console.error("Upload error:", err);
+                toast.error(err instanceof Error ? err.message : "Failed to upload avatar");
+                // Reset preview on error
+                setPreviewUrl(null);
+            } finally {
+                setUploading(false);
+            }
+        },
+        [onUpload]
+    );
+
+    const { getRootProps, getInputProps, isDragActive } = useDropzone({
+        onDrop,
+        accept: { "image/*": [] },
+        maxFiles: 1,
+        noClick: true, // Disable click to open file dialog (we'll use our own button)
+    });
+
+    const triggerFileInput = () => {
+        fileInputRef.current?.click();
+    };
+
+    const clearPreview = () => {
+        setPreviewUrl(null);
+        setFileName(null);
+        if (fileInputRef.current) {
+            fileInputRef.current.value = "";
+        }
+    };
+
+    const displayImage = previewUrl || currentUrl;
+    const firstLetter = name ? name.charAt(0).toUpperCase() : "U";
+
+    return (
+        <div {...getRootProps()} className={`relative ${className}`}>
+            <Avatar className="h-24 w-24 border-2 border-gray-100 shadow-sm">
+                {displayImage ? (
+                    <AvatarImage src={displayImage} alt={name || "Avatar"} />
+                ) : (
+                    <AvatarFallback className="bg-gradient-to-br from-violet-500 to-indigo-600 text-white text-4xl">
+                        {firstLetter}
+                    </AvatarFallback>
+                )}
+            </Avatar>
+
+            <input
+                {...getInputProps()}
+                ref={fileInputRef}
+                aria-label="Upload profile picture"
+            />
+
+            {fileName && (
+                <div className="text-xs text-gray-600 font-medium truncate mt-2 max-w-[200px]">
+                    {fileName}
+                </div>
+            )}
+
+            {uploading ? (
+                <div className="absolute bottom-0 right-0 bg-white rounded-full p-1.5 shadow-md">
+                    <Loader2 className="h-5 w-5 text-blue-500 animate-spin" />
+                </div>
+            ) : (
+                <Button
+                    type="button"
+                    size="icon"
+                    variant="secondary"
+                    className="absolute bottom-0 right-0 h-8 w-8 rounded-full shadow-md"
+                    onClick={triggerFileInput}
+                    disabled={uploading}
+                >
+                    <Camera className="h-4 w-4" />
+                    <span className="sr-only">Upload profile picture</span>
+                </Button>
+            )}
+
+            {previewUrl && (
+                <Button
+                    type="button"
+                    size="icon"
+                    variant="destructive"
+                    className="absolute top-0 right-0 h-6 w-6 rounded-full shadow-md"
+                    onClick={clearPreview}
+                >
+                    <X className="h-3 w-3" />
+                    <span className="sr-only">Clear preview</span>
+                </Button>
+            )}
+        </div>
+    );
+}
Index: src/models/Notification.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/models/Notification.ts b/src/models/Notification.ts
new file mode 100644
--- /dev/null	(date 1747009941031)
+++ b/src/models/Notification.ts	(date 1747009941031)
@@ -0,0 +1,86 @@
+import mongoose, { Document, Schema, Types } from 'mongoose';
+
+export type NotificationType = 
+  | 'like' 
+  | 'comment' 
+  | 'follow' 
+  | 'mention' 
+  | 'role_assigned'
+  | 'community_invite'
+  | 'message';
+
+export interface INotification extends Document {
+  recipient: Types.ObjectId;
+  sender: Types.ObjectId;
+  type: NotificationType;
+  read: boolean;
+  content: string;
+  relatedPost?: Types.ObjectId;
+  relatedComment?: Types.ObjectId;
+  relatedCommunity?: Types.ObjectId;
+  relatedChannel?: Types.ObjectId;
+  relatedMessage?: Types.ObjectId;
+  createdAt: Date;
+  updatedAt: Date;
+}
+
+const NotificationSchema = new Schema<INotification>(
+  {
+    recipient: {
+      type: Schema.Types.ObjectId,
+      ref: 'User',
+      required: true,
+      index: true
+    },
+    sender: {
+      type: Schema.Types.ObjectId,
+      ref: 'User',
+      required: true
+    },
+    type: {
+      type: String,
+      enum: ['like', 'comment', 'follow', 'mention', 'role_assigned', 'community_invite', 'message'],
+      required: true
+    },
+    read: {
+      type: Boolean,
+      default: false
+    },
+    content: {
+      type: String,
+      required: true,
+      trim: true,
+      maxlength: 500
+    },
+    relatedPost: {
+      type: Schema.Types.ObjectId,
+      ref: 'Post'
+    },
+    relatedComment: {
+      type: Schema.Types.ObjectId,
+      ref: 'Comment'
+    },
+    relatedCommunity: {
+      type: Schema.Types.ObjectId,
+      ref: 'Community'
+    },
+    relatedChannel: {
+      type: Schema.Types.ObjectId,
+      ref: 'Channel'
+    },
+    relatedMessage: {
+      type: Schema.Types.ObjectId,
+      ref: 'Message'
+    }
+  },
+  {
+    timestamps: true
+  }
+);
+
+// Indexes for efficient querying
+NotificationSchema.index({ recipient: 1, read: 1, createdAt: -1 });
+NotificationSchema.index({ recipient: 1, type: 1, createdAt: -1 });
+
+export default mongoose.models.Notification || 
+  mongoose.model<INotification>('Notification', NotificationSchema);
Index: src/components/community/settings/roles-settings.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/community/settings/roles-settings.tsx b/src/components/community/settings/roles-settings.tsx
new file mode 100644
--- /dev/null	(date 1747009941008)
+++ b/src/components/community/settings/roles-settings.tsx	(date 1747009941008)
@@ -0,0 +1,537 @@
+"use client";
+
+import { useState, useEffect } from "react";
+import { toast } from "sonner";
+import {
+  Card,
+  CardHeader,
+  CardTitle,
+  CardDescription,
+  CardContent,
+} from "@/components/ui/card";
+import { Button } from "@/components/ui/button";
+import { Plus, Edit, Trash2, Shield } from "lucide-react";
+import {
+  Dialog,
+  DialogContent,
+  DialogHeader,
+  DialogTitle,
+  DialogDescription,
+  DialogFooter,
+} from "@/components/ui/dialog";
+import { Input } from "@/components/ui/input";
+import { Label } from "@/components/ui/label";
+import { Checkbox } from "@/components/ui/checkbox";
+import { Permission } from "@/models/Role";
+
+interface Role {
+  id: string;
+  name: string;
+  color: string;
+  position: number;
+  isDefault: boolean;
+  permissions?: Permission[];
+}
+
+interface RolesSettingsProps {
+  communityId: string;
+  isCreatorOnly: boolean;
+}
+
+export default function RolesSettings({ communityId, isCreatorOnly }: RolesSettingsProps) {
+  const [roles, setRoles] = useState<Role[]>([]);
+  const [loading, setLoading] = useState(true);
+  const [error, setError] = useState<string | null>(null);
+  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);
+  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);
+  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);
+  const [currentRole, setCurrentRole] = useState<Role | null>(null);
+  const [formData, setFormData] = useState({
+    name: "",
+    color: "#99AAB5",
+    permissions: [] as Permission[],
+    isDefault: false,
+  });
+
+  // Available permissions
+  const availablePermissions: { value: Permission; label: string }[] = [
+    { value: "MANAGE_COMMUNITY", label: "Manage Community" },
+    { value: "MANAGE_CHANNELS", label: "Manage Channels" },
+    { value: "MANAGE_ROLES", label: "Manage Roles" },
+    { value: "MANAGE_MEMBERS", label: "Manage Members" },
+    { value: "MANAGE_MESSAGES", label: "Manage Messages" },
+    { value: "CREATE_INVITES", label: "Create Invites" },
+    { value: "SEND_MESSAGES", label: "Send Messages" },
+    { value: "CONNECT_VOICE", label: "Connect to Voice" },
+    { value: "UPLOAD_FILES", label: "Upload Files" },
+    { value: "PIN_MESSAGES", label: "Pin Messages" },
+    { value: "MENTION_EVERYONE", label: "Mention @everyone" },
+  ];
+
+  // Fetch roles
+  useEffect(() => {
+    const fetchRoles = async () => {
+      try {
+        setLoading(true);
+        setError(null);
+        
+        const response = await fetch(`/api/communities/${communityId}/roles`);
+        
+        if (!response.ok) {
+          throw new Error("Failed to fetch roles");
+        }
+        
+        const data = await response.json();
+        setRoles(data.roles || []);
+      } catch (err) {
+        console.error(err);
+        setError("Failed to load roles");
+        toast.error("Failed to load roles");
+      } finally {
+        setLoading(false);
+      }
+    };
+    
+    if (communityId) {
+      fetchRoles();
+    }
+  }, [communityId]);
+
+  // Handle form input changes
+  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
+    const { name, value, type, checked } = e.target;
+    setFormData(prev => ({
+      ...prev,
+      [name]: type === "checkbox" ? checked : value,
+    }));
+  };
+
+  // Handle permission checkbox changes
+  const handlePermissionChange = (permission: Permission, checked: boolean) => {
+    setFormData(prev => ({
+      ...prev,
+      permissions: checked
+        ? [...prev.permissions, permission]
+        : prev.permissions.filter(p => p !== permission),
+    }));
+  };
+
+  // Open create role dialog
+  const openCreateDialog = () => {
+    setFormData({
+      name: "",
+      color: "#99AAB5",
+      permissions: ["SEND_MESSAGES", "CONNECT_VOICE"],
+      isDefault: false,
+    });
+    setIsCreateDialogOpen(true);
+  };
+
+  // Open edit role dialog
+  const openEditDialog = (role: Role) => {
+    setCurrentRole(role);
+    setFormData({
+      name: role.name,
+      color: role.color,
+      permissions: role.permissions || [],
+      isDefault: role.isDefault,
+    });
+    setIsEditDialogOpen(true);
+  };
+
+  // Open delete role dialog
+  const openDeleteDialog = (role: Role) => {
+    setCurrentRole(role);
+    setIsDeleteDialogOpen(true);
+  };
+
+  // Create a new role
+  const createRole = async () => {
+    try {
+      const response = await fetch(`/api/communities/${communityId}/roles`, {
+        method: "POST",
+        headers: {
+          "Content-Type": "application/json",
+        },
+        body: JSON.stringify(formData),
+      });
+
+      if (!response.ok) {
+        throw new Error("Failed to create role");
+      }
+
+      const data = await response.json();
+      setRoles(prev => [...prev, data.role]);
+      setIsCreateDialogOpen(false);
+      toast.success("Role created successfully");
+    } catch (err) {
+      console.error(err);
+      toast.error("Failed to create role");
+    }
+  };
+
+  // Update an existing role
+  const updateRole = async () => {
+    if (!currentRole) return;
+
+    try {
+      const response = await fetch(`/api/communities/${communityId}/roles/${currentRole.id}`, {
+        method: "PATCH",
+        headers: {
+          "Content-Type": "application/json",
+        },
+        body: JSON.stringify(formData),
+      });
+
+      if (!response.ok) {
+        throw new Error("Failed to update role");
+      }
+
+      const data = await response.json();
+      setRoles(prev =>
+        prev.map(role => (role.id === currentRole.id ? data.role : role))
+      );
+      setIsEditDialogOpen(false);
+      toast.success("Role updated successfully");
+    } catch (err) {
+      console.error(err);
+      toast.error("Failed to update role");
+    }
+  };
+
+  // Delete a role
+  const deleteRole = async () => {
+    if (!currentRole) return;
+
+    try {
+      const response = await fetch(`/api/communities/${communityId}/roles/${currentRole.id}`, {
+        method: "DELETE",
+      });
+
+      if (!response.ok) {
+        throw new Error("Failed to delete role");
+      }
+
+      setRoles(prev => prev.filter(role => role.id !== currentRole.id));
+      setIsDeleteDialogOpen(false);
+      toast.success("Role deleted successfully");
+    } catch (err) {
+      console.error(err);
+      toast.error("Failed to delete role");
+    }
+  };
+
+  if (loading) {
+    return (
+      <Card>
+        <CardContent className="p-6">
+          <div className="flex items-center justify-center h-40">
+            <div className="animate-spin h-8 w-8 border-4 border-blue-500 rounded-full border-t-transparent"></div>
+          </div>
+        </CardContent>
+      </Card>
+    );
+  }
+
+  if (error) {
+    return (
+      <Card>
+        <CardContent className="p-6">
+          <div className="flex flex-col items-center justify-center h-40">
+            <div className="text-red-500 mb-2">{error}</div>
+            <Button
+              variant="outline"
+              onClick={() => window.location.reload()}
+            >
+              Try Again
+            </Button>
+          </div>
+        </CardContent>
+      </Card>
+    );
+  }
+
+  return (
+    <>
+      <Card>
+        <CardHeader className="flex flex-row items-center justify-between">
+          <div>
+            <CardTitle>Manage Roles</CardTitle>
+            <CardDescription>
+              Create and manage roles and permissions
+            </CardDescription>
+          </div>
+          <Button 
+            onClick={openCreateDialog}
+            disabled={isCreatorOnly}
+          >
+            <Plus className="h-4 w-4 mr-2" />
+            Create Role
+          </Button>
+        </CardHeader>
+        <CardContent>
+          <div className="space-y-4">
+            {roles.length === 0 ? (
+              <div className="text-center p-6 text-gray-500">
+                No roles found. Create your first role to get started.
+              </div>
+            ) : (
+              roles
+                .sort((a, b) => a.position - b.position)
+                .map(role => (
+                  <div
+                    key={role.id}
+                    className="flex items-center justify-between p-3 border border-gray-200 rounded-md hover:bg-gray-50"
+                  >
+                    <div className="flex items-center">
+                      <div
+                        className="h-3 w-3 rounded-full mr-2"
+                        style={{ backgroundColor: role.color }}
+                      ></div>
+                      <span style={{ color: role.color }}>{role.name}</span>
+                      {role.isDefault && (
+                        <span className="ml-2 text-xs bg-gray-200 text-gray-700 px-2 py-0.5 rounded-full">
+                          Default
+                        </span>
+                      )}
+                    </div>
+
+                    <div className="flex items-center space-x-2">
+                      <Button 
+                        variant="ghost" 
+                        size="sm"
+                        onClick={() => openEditDialog(role)}
+                        disabled={isCreatorOnly}
+                      >
+                        <Edit className="h-4 w-4" />
+                      </Button>
+                      {!role.isDefault && (
+                        <Button 
+                          variant="ghost" 
+                          size="sm" 
+                          className="text-red-500"
+                          onClick={() => openDeleteDialog(role)}
+                          disabled={isCreatorOnly}
+                        >
+                          <Trash2 className="h-4 w-4" />
+                        </Button>
+                      )}
+                    </div>
+                  </div>
+                ))
+            )}
+          </div>
+        </CardContent>
+      </Card>
+
+      {/* Create Role Dialog */}
+      <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>
+        <DialogContent>
+          <DialogHeader>
+            <DialogTitle>Create New Role</DialogTitle>
+            <DialogDescription>
+              Add a new role to your community with custom permissions
+            </DialogDescription>
+          </DialogHeader>
+
+          <div className="space-y-4 py-4">
+            <div className="space-y-2">
+              <Label htmlFor="name">Role Name</Label>
+              <Input
+                id="name"
+                name="name"
+                value={formData.name}
+                onChange={handleInputChange}
+                placeholder="e.g. Moderator"
+              />
+            </div>
+
+            <div className="space-y-2">
+              <Label htmlFor="color">Role Color</Label>
+              <div className="flex items-center space-x-2">
+                <Input
+                  id="color"
+                  name="color"
+                  type="color"
+                  value={formData.color}
+                  onChange={handleInputChange}
+                  className="w-12 h-8 p-1"
+                />
+                <Input
+                  name="color"
+                  value={formData.color}
+                  onChange={handleInputChange}
+                  placeholder="#99AAB5"
+                  className="flex-1"
+                />
+              </div>
+            </div>
+
+            <div className="space-y-2">
+              <Label>Permissions</Label>
+              <div className="grid grid-cols-1 md:grid-cols-2 gap-2 mt-2">
+                {availablePermissions.map(permission => (
+                  <div key={permission.value} className="flex items-center space-x-2">
+                    <Checkbox
+                      id={`permission-${permission.value}`}
+                      checked={formData.permissions.includes(permission.value)}
+                      onCheckedChange={(checked) =>
+                        handlePermissionChange(permission.value, checked as boolean)
+                      }
+                    />
+                    <Label
+                      htmlFor={`permission-${permission.value}`}
+                      className="text-sm font-normal"
+                    >
+                      {permission.label}
+                    </Label>
+                  </div>
+                ))}
+              </div>
+            </div>
+
+            <div className="flex items-center space-x-2">
+              <Checkbox
+                id="isDefault"
+                name="isDefault"
+                checked={formData.isDefault}
+                onCheckedChange={(checked) =>
+                  setFormData(prev => ({ ...prev, isDefault: checked as boolean }))
+                }
+              />
+              <Label htmlFor="isDefault" className="text-sm font-normal">
+                Make this the default role for new members
+              </Label>
+            </div>
+          </div>
+
+          <DialogFooter>
+            <Button variant="outline" onClick={() => setIsCreateDialogOpen(false)}>
+              Cancel
+            </Button>
+            <Button onClick={createRole}>Create Role</Button>
+          </DialogFooter>
+        </DialogContent>
+      </Dialog>
+
+      {/* Edit Role Dialog */}
+      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>
+        <DialogContent>
+          <DialogHeader>
+            <DialogTitle>Edit Role</DialogTitle>
+            <DialogDescription>
+              Modify this role's settings and permissions
+            </DialogDescription>
+          </DialogHeader>
+
+          <div className="space-y-4 py-4">
+            <div className="space-y-2">
+              <Label htmlFor="edit-name">Role Name</Label>
+              <Input
+                id="edit-name"
+                name="name"
+                value={formData.name}
+                onChange={handleInputChange}
+              />
+            </div>
+
+            <div className="space-y-2">
+              <Label htmlFor="edit-color">Role Color</Label>
+              <div className="flex items-center space-x-2">
+                <Input
+                  id="edit-color"
+                  name="color"
+                  type="color"
+                  value={formData.color}
+                  onChange={handleInputChange}
+                  className="w-12 h-8 p-1"
+                />
+                <Input
+                  name="color"
+                  value={formData.color}
+                  onChange={handleInputChange}
+                  className="flex-1"
+                />
+              </div>
+            </div>
+
+            <div className="space-y-2">
+              <Label>Permissions</Label>
+              <div className="grid grid-cols-1 md:grid-cols-2 gap-2 mt-2">
+                {availablePermissions.map(permission => (
+                  <div key={permission.value} className="flex items-center space-x-2">
+                    <Checkbox
+                      id={`edit-permission-${permission.value}`}
+                      checked={formData.permissions.includes(permission.value)}
+                      onCheckedChange={(checked) =>
+                        handlePermissionChange(permission.value, checked as boolean)
+                      }
+                    />
+                    <Label
+                      htmlFor={`edit-permission-${permission.value}`}
+                      className="text-sm font-normal"
+                    >
+                      {permission.label}
+                    </Label>
+                  </div>
+                ))}
+              </div>
+            </div>
+
+            <div className="flex items-center space-x-2">
+              <Checkbox
+                id="edit-isDefault"
+                name="isDefault"
+                checked={formData.isDefault}
+                onCheckedChange={(checked) =>
+                  setFormData(prev => ({ ...prev, isDefault: checked as boolean }))
+                }
+              />
+              <Label htmlFor="edit-isDefault" className="text-sm font-normal">
+                Make this the default role for new members
+              </Label>
+            </div>
+          </div>
+
+          <DialogFooter>
+            <Button variant="outline" onClick={() => setIsEditDialogOpen(false)}>
+              Cancel
+            </Button>
+            <Button onClick={updateRole}>Save Changes</Button>
+          </DialogFooter>
+        </DialogContent>
+      </Dialog>
+
+      {/* Delete Role Dialog */}
+      <Dialog open={isDeleteDialogOpen} onOpenChange={setIsDeleteDialogOpen}>
+        <DialogContent>
+          <DialogHeader>
+            <DialogTitle>Delete Role</DialogTitle>
+            <DialogDescription>
+              Are you sure you want to delete this role? This action cannot be undone.
+            </DialogDescription>
+          </DialogHeader>
+
+          <div className="py-4">
+            <div className="flex items-center p-3 border border-gray-200 rounded-md">
+              <div
+                className="h-3 w-3 rounded-full mr-2"
+                style={{ backgroundColor: currentRole?.color }}
+              ></div>
+              <span style={{ color: currentRole?.color }}>{currentRole?.name}</span>
+            </div>
+          </div>
+
+          <DialogFooter>
+            <Button variant="outline" onClick={() => setIsDeleteDialogOpen(false)}>
+              Cancel
+            </Button>
+            <Button variant="destructive" onClick={deleteRole}>
+              Delete Role
+            </Button>
+          </DialogFooter>
+        </DialogContent>
+      </Dialog>
+    </>
+  );
+}
Index: src/app/(main)/messages/[conversationId]/page.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/app/(main)/messages/[conversationId]/page.tsx b/src/app/(main)/messages/[conversationId]/page.tsx
new file mode 100644
--- /dev/null	(date 1747009941122)
+++ b/src/app/(main)/messages/[conversationId]/page.tsx	(date 1747009941122)
@@ -0,0 +1,223 @@
+"use client";
+
+import { useState, useEffect } from "react";
+import { useParams, useRouter } from "next/navigation";
+import { useUser } from "@clerk/nextjs";
+import { ConversationList } from "@/components/messages/conversation-list";
+import { MessageList } from "@/components/messages/message-list";
+import { MessageInput } from "@/components/messages/message-input";
+import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
+import { Button } from "@/components/ui/button";
+import { Loader2, ArrowLeft, MoreHorizontal } from "lucide-react";
+import { toast } from "sonner";
+import {
+  DropdownMenu,
+  DropdownMenuContent,
+  DropdownMenuItem,
+  DropdownMenuSeparator,
+  DropdownMenuTrigger,
+} from "@/components/ui/dropdown-menu";
+
+interface Conversation {
+  id: string;
+  participants: {
+    id: string;
+    username: string;
+    name: string;
+    image?: string;
+  }[];
+  lastMessage?: {
+    content: string;
+    createdAt: string;
+    isRead: boolean;
+  };
+  unreadCount: number;
+}
+
+export default function ConversationPage() {
+  const { conversationId } = useParams() as { conversationId: string };
+  const { user, isLoaded } = useUser();
+  const router = useRouter();
+  const [conversation, setConversation] = useState<Conversation | null>(null);
+  const [loading, setLoading] = useState(true);
+  const [error, setError] = useState<string | null>(null);
+  const [selectedConversation, setSelectedConversation] = useState<string | null>(conversationId);
+
+  // Fetch conversation details
+  useEffect(() => {
+    const fetchConversation = async () => {
+      try {
+        setLoading(true);
+        setError(null);
+        
+        const response = await fetch(`/api/conversations/${conversationId}`);
+        
+        if (!response.ok) {
+          throw new Error("Failed to fetch conversation");
+        }
+        
+        const data = await response.json();
+        setConversation(data.conversation);
+      } catch (err) {
+        console.error(err);
+        setError("Failed to load conversation");
+        toast.error("Failed to load conversation");
+      } finally {
+        setLoading(false);
+      }
+    };
+    
+    if (conversationId) {
+      fetchConversation();
+    }
+  }, [conversationId]);
+
+  // Redirect to the selected conversation
+  useEffect(() => {
+    if (selectedConversation && selectedConversation !== conversationId) {
+      router.push(`/messages/${selectedConversation}`);
+    }
+  }, [selectedConversation, conversationId, router]);
+
+  // Handle new conversation button click
+  const handleNewConversation = () => {
+    router.push("/messages/new");
+  };
+
+  // Handle back button click
+  const handleBack = () => {
+    router.push("/messages");
+  };
+
+  // Handle delete conversation
+  const handleDeleteConversation = async () => {
+    if (!confirm("Are you sure you want to delete this conversation?")) {
+      return;
+    }
+    
+    try {
+      const response = await fetch(`/api/conversations/${conversationId}`, {
+        method: "DELETE",
+      });
+      
+      if (!response.ok) {
+        throw new Error("Failed to delete conversation");
+      }
+      
+      toast.success("Conversation deleted");
+      router.push("/messages");
+    } catch (err) {
+      console.error(err);
+      toast.error("Failed to delete conversation");
+    }
+  };
+
+  if (!isLoaded) {
+    return (
+      <div className="flex items-center justify-center h-full">
+        <div className="animate-spin h-8 w-8 border-4 border-blue-500 rounded-full border-t-transparent"></div>
+      </div>
+    );
+  }
+
+  // Get the other participant
+  const otherParticipant = conversation?.participants[0];
+
+  return (
+    <div className="flex h-full">
+      {/* Conversation List (hidden on mobile) */}
+      <div className="hidden md:block w-80 h-full border-r border-gray-200">
+        <ConversationList
+          onSelectConversation={setSelectedConversation}
+          onNewConversation={handleNewConversation}
+          activeConversationId={conversationId}
+        />
+      </div>
+
+      {/* Conversation */}
+      <div className="flex-1 flex flex-col h-full">
+        {loading ? (
+          <div className="flex items-center justify-center h-full">
+            <Loader2 className="h-8 w-8 animate-spin text-[#00AEEF]" />
+          </div>
+        ) : error ? (
+          <div className="flex flex-col items-center justify-center h-full">
+            <p className="text-red-500 mb-4">{error}</p>
+            <Button variant="outline" onClick={() => window.location.reload()}>
+              Try Again
+            </Button>
+          </div>
+        ) : (
+          <>
+            {/* Conversation Header */}
+            <div className="flex items-center justify-between p-4 border-b border-gray-200">
+              <div className="flex items-center">
+                <Button
+                  variant="ghost"
+                  size="icon"
+                  className="md:hidden mr-2"
+                  onClick={handleBack}
+                >
+                  <ArrowLeft className="h-5 w-5" />
+                </Button>
+                
+                {otherParticipant && (
+                  <div className="flex items-center">
+                    <Avatar className="h-10 w-10 mr-3">
+                      <AvatarImage src={otherParticipant.image} />
+                      <AvatarFallback>
+                        {otherParticipant.name.substring(0, 2).toUpperCase()}
+                      </AvatarFallback>
+                    </Avatar>
+                    <div>
+                      <h2 className="font-semibold">{otherParticipant.name}</h2>
+                      <p className="text-sm text-gray-500">@{otherParticipant.username}</p>
+                    </div>
+                  </div>
+                )}
+              </div>
+              
+              <DropdownMenu>
+                <DropdownMenuTrigger asChild>
+                  <Button variant="ghost" size="icon">
+                    <MoreHorizontal className="h-5 w-5" />
+                  </Button>
+                </DropdownMenuTrigger>
+                <DropdownMenuContent align="end">
+                  <DropdownMenuItem onClick={() => router.push(`/profile/${otherParticipant?.username}`)}>
+                    View Profile
+                  </DropdownMenuItem>
+                  <DropdownMenuSeparator />
+                  <DropdownMenuItem
+                    onClick={handleDeleteConversation}
+                    className="text-red-600 focus:text-red-600"
+                  >
+                    Delete Conversation
+                  </DropdownMenuItem>
+                </DropdownMenuContent>
+              </DropdownMenu>
+            </div>
+            
+            {/* Message List */}
+            <div className="flex-1 overflow-y-auto">
+              {user?.id && (
+                <MessageList
+                  conversationId={conversationId}
+                  currentUserId={user.id}
+                />
+              )}
+            </div>
+            
+            {/* Message Input */}
+            <div className="p-4 border-t border-gray-200">
+              <MessageInput
+                conversationId={conversationId}
+                onMessageSent={() => {}}
+              />
+            </div>
+          </>
+        )}
+      </div>
+    </div>
+  );
+}
Index: src/app/(main)/messages/page.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/app/(main)/messages/page.tsx b/src/app/(main)/messages/page.tsx
new file mode 100644
--- /dev/null	(date 1747009941055)
+++ b/src/app/(main)/messages/page.tsx	(date 1747009941055)
@@ -0,0 +1,61 @@
+"use client";
+
+import { useState, useEffect } from "react";
+import { useRouter } from "next/navigation";
+import { useUser } from "@clerk/nextjs";
+import { ConversationList } from "@/components/messages/conversation-list";
+import { MessageSquare } from "lucide-react";
+import { Button } from "@/components/ui/button";
+
+export default function MessagesPage() {
+  const { user, isLoaded } = useUser();
+  const router = useRouter();
+  const [selectedConversation, setSelectedConversation] = useState<string | null>(null);
+
+  // Redirect to the selected conversation
+  useEffect(() => {
+    if (selectedConversation) {
+      router.push(`/messages/${selectedConversation}`);
+    }
+  }, [selectedConversation, router]);
+
+  // Handle new conversation button click
+  const handleNewConversation = () => {
+    router.push("/messages/new");
+  };
+
+  if (!isLoaded) {
+    return (
+      <div className="flex items-center justify-center h-full">
+        <div className="animate-spin h-8 w-8 border-4 border-blue-500 rounded-full border-t-transparent"></div>
+      </div>
+    );
+  }
+
+  return (
+    <div className="flex h-full">
+      {/* Conversation List */}
+      <div className="w-80 h-full border-r border-gray-200">
+        <ConversationList
+          onSelectConversation={setSelectedConversation}
+          onNewConversation={handleNewConversation}
+        />
+      </div>
+
+      {/* Empty State */}
+      <div className="flex-1 flex flex-col items-center justify-center p-8 text-center">
+        <MessageSquare className="h-16 w-16 text-gray-300 mb-4" />
+        <h2 className="text-2xl font-semibold text-gray-800 mb-2">Your Messages</h2>
+        <p className="text-gray-500 mb-6 max-w-md">
+          Select a conversation from the list or start a new one to begin messaging
+        </p>
+        <Button 
+          onClick={handleNewConversation}
+          className="bg-[#00AEEF] hover:bg-[#0099d6] text-white"
+        >
+          Start a New Conversation
+        </Button>
+      </div>
+    </div>
+  );
+}
Index: src/components/messages/message-item.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/messages/message-item.tsx b/src/components/messages/message-item.tsx
new file mode 100644
--- /dev/null	(date 1747009941308)
+++ b/src/components/messages/message-item.tsx	(date 1747009941308)
@@ -0,0 +1,332 @@
+"use client";
+
+import React, { useState } from "react";
+import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
+import { Button } from "@/components/ui/button";
+import { MoreHorizontal, Edit, Trash2, Smile } from "lucide-react";
+import { formatDistanceToNow } from "date-fns";
+import {
+  DropdownMenu,
+  DropdownMenuContent,
+  DropdownMenuItem,
+  DropdownMenuSeparator,
+  DropdownMenuTrigger
+} from "@/components/ui/dropdown-menu";
+import { toast } from "sonner";
+
+interface Message {
+  id: string;
+  content: string;
+  sender: {
+    id: string;
+    username: string;
+    name: string;
+    image?: string;
+  };
+  isRead: boolean;
+  isEdited: boolean;
+  attachments: string[];
+  reactions: {
+    emoji: string;
+    count: number;
+    hasReacted: boolean;
+  }[];
+  createdAt: string;
+  updatedAt: string;
+}
+
+interface MessageItemProps {
+  message: Message;
+  isCurrentUser: boolean;
+  conversationId: string;
+  onUpdate?: (messageId: string, content: string) => void;
+  onDelete?: (messageId: string) => void;
+}
+
+export function MessageItem({
+  message,
+  isCurrentUser,
+  conversationId,
+  onUpdate,
+  onDelete
+}: MessageItemProps) {
+  const [isEditing, setIsEditing] = useState(false);
+  const [editContent, setEditContent] = useState(message.content);
+
+  // Format date
+  const formatDate = (dateString: string) => {
+    try {
+      return formatDistanceToNow(new Date(dateString), { addSuffix: true });
+    } catch (err) {
+      return "some time ago";
+    }
+  };
+
+  // Handle edit message
+  const handleEdit = () => {
+    setEditContent(message.content);
+    setIsEditing(true);
+  };
+
+  // Handle save edit
+  const handleSaveEdit = async () => {
+    if (!editContent.trim()) {
+      toast.error("Message cannot be empty");
+      return;
+    }
+    
+    try {
+      const response = await fetch(`/api/conversations/${conversationId}/messages/${message.id}`, {
+        method: "PATCH",
+        headers: {
+          "Content-Type": "application/json",
+        },
+        body: JSON.stringify({
+          content: editContent,
+        }),
+      });
+      
+      if (!response.ok) {
+        throw new Error("Failed to update message");
+      }
+      
+      // Update message in parent component
+      if (onUpdate) {
+        onUpdate(message.id, editContent);
+      }
+      
+      setIsEditing(false);
+    } catch (err) {
+      console.error(err);
+      toast.error("Failed to update message");
+    }
+  };
+
+  // Handle cancel edit
+  const handleCancelEdit = () => {
+    setIsEditing(false);
+  };
+
+  // Handle delete message
+  const handleDelete = async () => {
+    if (!confirm("Are you sure you want to delete this message?")) {
+      return;
+    }
+    
+    try {
+      const response = await fetch(`/api/conversations/${conversationId}/messages/${message.id}`, {
+        method: "DELETE",
+      });
+      
+      if (!response.ok) {
+        throw new Error("Failed to delete message");
+      }
+      
+      // Remove message from parent component
+      if (onDelete) {
+        onDelete(message.id);
+      }
+    } catch (err) {
+      console.error(err);
+      toast.error("Failed to delete message");
+    }
+  };
+
+  // Handle add reaction
+  const handleAddReaction = async (emoji: string) => {
+    try {
+      const response = await fetch(`/api/conversations/${conversationId}/messages/${message.id}/reactions`, {
+        method: "POST",
+        headers: {
+          "Content-Type": "application/json",
+        },
+        body: JSON.stringify({
+          emoji,
+        }),
+      });
+      
+      if (!response.ok) {
+        throw new Error("Failed to add reaction");
+      }
+    } catch (err) {
+      console.error(err);
+      toast.error("Failed to add reaction");
+    }
+  };
+
+  return (
+    <div className={`flex ${isCurrentUser ? "justify-end" : "justify-start"}`}>
+      <div className={`max-w-[80%] ${isCurrentUser ? "order-2" : "order-1"}`}>
+        {/* Message Content */}
+        <div className={`flex items-start gap-3 ${isCurrentUser ? "flex-row-reverse" : "flex-row"}`}>
+          {/* Avatar (only show for other users) */}
+          {!isCurrentUser && (
+            <Avatar className="h-8 w-8 mt-1">
+              <AvatarImage src={message.sender.image} />
+              <AvatarFallback>
+                {message.sender.name.substring(0, 2).toUpperCase()}
+              </AvatarFallback>
+            </Avatar>
+          )}
+          
+          {/* Message Bubble */}
+          <div className="space-y-1">
+            {/* Sender Name (only show for other users) */}
+            {!isCurrentUser && (
+              <div className="flex items-center gap-2">
+                <span className="text-sm font-medium">{message.sender.name}</span>
+                <span className="text-xs text-gray-500">{formatDate(message.createdAt)}</span>
+              </div>
+            )}
+            
+            {/* Message Content */}
+            <div
+              className={`p-3 rounded-lg ${
+                isCurrentUser
+                  ? "bg-blue-500 text-white"
+                  : "bg-gray-100 text-gray-800"
+              }`}
+            >
+              {isEditing ? (
+                <div className="space-y-2">
+                  <textarea
+                    className="w-full p-2 border border-gray-300 rounded-md text-gray-800"
+                    value={editContent}
+                    onChange={(e) => setEditContent(e.target.value)}
+                    rows={3}
+                    autoFocus
+                  />
+                  <div className="flex justify-end gap-2">
+                    <Button
+                      variant="outline"
+                      size="sm"
+                      onClick={handleCancelEdit}
+                    >
+                      Cancel
+                    </Button>
+                    <Button
+                      size="sm"
+                      onClick={handleSaveEdit}
+                    >
+                      Save
+                    </Button>
+                  </div>
+                </div>
+              ) : (
+                <>
+                  <div className="whitespace-pre-wrap break-words">
+                    {message.content}
+                  </div>
+                  
+                  {/* Edited indicator */}
+                  {message.isEdited && (
+                    <span className={`text-xs ${isCurrentUser ? "text-blue-200" : "text-gray-500"}`}>
+                      (edited)
+                    </span>
+                  )}
+                </>
+              )}
+            </div>
+            
+            {/* Attachments */}
+            {message.attachments && message.attachments.length > 0 && (
+              <div className="flex flex-wrap gap-2 mt-2">
+                {message.attachments.map((attachment, index) => (
+                  <div
+                    key={index}
+                    className="relative group rounded-md overflow-hidden"
+                  >
+                    {attachment.match(/\.(jpg|jpeg|png|gif)$/i) ? (
+                      <a href={attachment} target="_blank" rel="noopener noreferrer">
+                        <img
+                          src={attachment}
+                          alt="Attachment"
+                          className="max-h-40 max-w-xs object-cover rounded-md"
+                        />
+                      </a>
+                    ) : (
+                      <a
+                        href={attachment}
+                        target="_blank"
+                        rel="noopener noreferrer"
+                        className="flex items-center justify-center h-12 w-32 bg-gray-200 rounded-md text-gray-700 text-sm"
+                      >
+                        Download Attachment
+                      </a>
+                    )}
+                  </div>
+                ))}
+              </div>
+            )}
+            
+            {/* Reactions */}
+            {message.reactions && message.reactions.length > 0 && (
+              <div className="flex flex-wrap gap-1 mt-1">
+                {message.reactions.map((reaction, index) => (
+                  <button
+                    key={index}
+                    className={`text-xs py-0.5 px-1.5 rounded-full ${
+                      reaction.hasReacted
+                        ? "bg-blue-100 text-blue-700"
+                        : "bg-gray-100 text-gray-700 hover:bg-gray-200"
+                    }`}
+                    onClick={() => handleAddReaction(reaction.emoji)}
+                  >
+                    {reaction.emoji} {reaction.count}
+                  </button>
+                ))}
+              </div>
+            )}
+            
+            {/* Timestamp for current user */}
+            {isCurrentUser && (
+              <div className="flex justify-end">
+                <span className="text-xs text-gray-500">{formatDate(message.createdAt)}</span>
+              </div>
+            )}
+          </div>
+        </div>
+      </div>
+      
+      {/* Message Actions */}
+      <div className={`relative ${isCurrentUser ? "order-1 mr-2" : "order-2 ml-2"}`}>
+        <DropdownMenu>
+          <DropdownMenuTrigger asChild>
+            <Button
+              variant="ghost"
+              size="icon"
+              className="h-8 w-8 opacity-0 group-hover:opacity-100 hover:opacity-100 focus:opacity-100"
+            >
+              <MoreHorizontal className="h-4 w-4" />
+            </Button>
+          </DropdownMenuTrigger>
+          <DropdownMenuContent align={isCurrentUser ? "start" : "end"}>
+            <DropdownMenuItem onClick={() => toast.info("Emoji picker coming soon")}>
+              <Smile className="h-4 w-4 mr-2" />
+              Add Reaction
+            </DropdownMenuItem>
+            
+            {isCurrentUser && (
+              <>
+                <DropdownMenuSeparator />
+                
+                <DropdownMenuItem onClick={handleEdit}>
+                  <Edit className="h-4 w-4 mr-2" />
+                  Edit Message
+                </DropdownMenuItem>
+                
+                <DropdownMenuItem
+                  onClick={handleDelete}
+                  className="text-red-600 focus:text-red-600"
+                >
+                  <Trash2 className="h-4 w-4 mr-2" />
+                  Delete Message
+                </DropdownMenuItem>
+              </>
+            )}
+          </DropdownMenuContent>
+        </DropdownMenu>
+      </div>
+    </div>
+  );
+}
Index: src/app/(main)/messages/new/page.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/app/(main)/messages/new/page.tsx b/src/app/(main)/messages/new/page.tsx
new file mode 100644
--- /dev/null	(date 1747009941252)
+++ b/src/app/(main)/messages/new/page.tsx	(date 1747009941252)
@@ -0,0 +1,275 @@
+"use client";
+
+import { useState, useEffect } from "react";
+import { useRouter } from "next/navigation";
+import { useUser } from "@clerk/nextjs";
+import { ConversationList } from "@/components/messages/conversation-list";
+import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
+import { Button } from "@/components/ui/button";
+import { Input } from "@/components/ui/input";
+import { Textarea } from "@/components/ui/textarea";
+import { Loader2, ArrowLeft, Search, UserPlus } from "lucide-react";
+import { toast } from "sonner";
+
+interface User {
+  id: string;
+  username: string;
+  name: string;
+  image?: string;
+  bio?: string;
+}
+
+export default function NewMessagePage() {
+  const { user, isLoaded } = useUser();
+  const router = useRouter();
+  const [searchQuery, setSearchQuery] = useState("");
+  const [searchResults, setSearchResults] = useState<User[]>([]);
+  const [selectedUser, setSelectedUser] = useState<User | null>(null);
+  const [message, setMessage] = useState("");
+  const [loading, setLoading] = useState(false);
+  const [searching, setSearching] = useState(false);
+  const [selectedConversation, setSelectedConversation] = useState<string | null>(null);
+
+  // Search for users
+  useEffect(() => {
+    const searchUsers = async () => {
+      if (!searchQuery.trim()) {
+        setSearchResults([]);
+        return;
+      }
+      
+      try {
+        setSearching(true);
+        
+        const response = await fetch(`/api/search?query=${encodeURIComponent(searchQuery)}&type=users`);
+        
+        if (!response.ok) {
+          throw new Error("Failed to search users");
+        }
+        
+        const data = await response.json();
+        setSearchResults(data.results.users || []);
+      } catch (err) {
+        console.error(err);
+        toast.error("Failed to search users");
+      } finally {
+        setSearching(false);
+      }
+    };
+    
+    const debounceTimeout = setTimeout(searchUsers, 500);
+    
+    return () => clearTimeout(debounceTimeout);
+  }, [searchQuery]);
+
+  // Redirect to the selected conversation
+  useEffect(() => {
+    if (selectedConversation) {
+      router.push(`/messages/${selectedConversation}`);
+    }
+  }, [selectedConversation, router]);
+
+  // Handle back button click
+  const handleBack = () => {
+    router.push("/messages");
+  };
+
+  // Handle user selection
+  const handleSelectUser = (user: User) => {
+    setSelectedUser(user);
+    setSearchQuery("");
+    setSearchResults([]);
+  };
+
+  // Handle send message
+  const handleSendMessage = async () => {
+    if (!selectedUser) {
+      toast.error("Please select a recipient");
+      return;
+    }
+    
+    if (!message.trim()) {
+      toast.error("Please enter a message");
+      return;
+    }
+    
+    try {
+      setLoading(true);
+      
+      const response = await fetch("/api/conversations", {
+        method: "POST",
+        headers: {
+          "Content-Type": "application/json",
+        },
+        body: JSON.stringify({
+          recipientId: selectedUser.id,
+          initialMessage: message,
+        }),
+      });
+      
+      if (!response.ok) {
+        throw new Error("Failed to create conversation");
+      }
+      
+      const data = await response.json();
+      router.push(`/messages/${data.conversation.id}`);
+    } catch (err) {
+      console.error(err);
+      toast.error("Failed to send message");
+    } finally {
+      setLoading(false);
+    }
+  };
+
+  if (!isLoaded) {
+    return (
+      <div className="flex items-center justify-center h-full">
+        <div className="animate-spin h-8 w-8 border-4 border-blue-500 rounded-full border-t-transparent"></div>
+      </div>
+    );
+  }
+
+  return (
+    <div className="flex h-full">
+      {/* Conversation List (hidden on mobile) */}
+      <div className="hidden md:block w-80 h-full border-r border-gray-200">
+        <ConversationList
+          onSelectConversation={setSelectedConversation}
+          onNewConversation={() => {}}
+        />
+      </div>
+
+      {/* New Message */}
+      <div className="flex-1 flex flex-col h-full">
+        {/* Header */}
+        <div className="flex items-center p-4 border-b border-gray-200">
+          <Button
+            variant="ghost"
+            size="icon"
+            className="mr-2"
+            onClick={handleBack}
+          >
+            <ArrowLeft className="h-5 w-5" />
+          </Button>
+          <h2 className="text-xl font-semibold">New Message</h2>
+        </div>
+
+        {/* Content */}
+        <div className="flex-1 p-4 overflow-y-auto">
+          <div className="max-w-2xl mx-auto">
+            {/* Recipient Selection */}
+            <div className="mb-6">
+              <label className="block text-sm font-medium text-gray-700 mb-2">
+                To:
+              </label>
+              
+              {selectedUser ? (
+                <div className="flex items-center justify-between p-3 border border-gray-200 rounded-md">
+                  <div className="flex items-center">
+                    <Avatar className="h-8 w-8 mr-3">
+                      <AvatarImage src={selectedUser.image} />
+                      <AvatarFallback>
+                        {selectedUser.name.substring(0, 2).toUpperCase()}
+                      </AvatarFallback>
+                    </Avatar>
+                    <div>
+                      <div className="font-medium">{selectedUser.name}</div>
+                      <div className="text-sm text-gray-500">@{selectedUser.username}</div>
+                    </div>
+                  </div>
+                  <Button
+                    variant="ghost"
+                    size="sm"
+                    onClick={() => setSelectedUser(null)}
+                  >
+                    Change
+                  </Button>
+                </div>
+              ) : (
+                <>
+                  <div className="relative">
+                    <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-gray-400" />
+                    <Input
+                      placeholder="Search for a user..."
+                      className="pl-10"
+                      value={searchQuery}
+                      onChange={(e) => setSearchQuery(e.target.value)}
+                    />
+                  </div>
+                  
+                  {searching && (
+                    <div className="flex items-center justify-center py-4">
+                      <Loader2 className="h-5 w-5 animate-spin text-gray-400 mr-2" />
+                      <span className="text-sm text-gray-500">Searching...</span>
+                    </div>
+                  )}
+                  
+                  {searchResults.length > 0 && (
+                    <div className="mt-2 border border-gray-200 rounded-md overflow-hidden">
+                      {searchResults.map((user) => (
+                        <div
+                          key={user.id}
+                          className="flex items-center p-3 hover:bg-gray-50 cursor-pointer border-b border-gray-200 last:border-b-0"
+                          onClick={() => handleSelectUser(user)}
+                        >
+                          <Avatar className="h-8 w-8 mr-3">
+                            <AvatarImage src={user.image} />
+                            <AvatarFallback>
+                              {user.name.substring(0, 2).toUpperCase()}
+                            </AvatarFallback>
+                          </Avatar>
+                          <div>
+                            <div className="font-medium">{user.name}</div>
+                            <div className="text-sm text-gray-500">@{user.username}</div>
+                          </div>
+                        </div>
+                      ))}
+                    </div>
+                  )}
+                  
+                  {searchQuery && searchResults.length === 0 && !searching && (
+                    <div className="mt-2 p-4 text-center border border-gray-200 rounded-md">
+                      <p className="text-gray-500">No users found</p>
+                    </div>
+                  )}
+                </>
+              )}
+            </div>
+            
+            {/* Message Input */}
+            <div className="mb-6">
+              <label className="block text-sm font-medium text-gray-700 mb-2">
+                Message:
+              </label>
+              <Textarea
+                placeholder="Type your message here..."
+                className="min-h-[120px]"
+                value={message}
+                onChange={(e) => setMessage(e.target.value)}
+              />
+            </div>
+            
+            {/* Send Button */}
+            <Button
+              className="w-full bg-[#00AEEF] hover:bg-[#0099d6] text-white"
+              onClick={handleSendMessage}
+              disabled={!selectedUser || !message.trim() || loading}
+            >
+              {loading ? (
+                <>
+                  <Loader2 className="h-4 w-4 animate-spin mr-2" />
+                  Sending...
+                </>
+              ) : (
+                <>
+                  <UserPlus className="h-4 w-4 mr-2" />
+                  Send Message
+                </>
+              )}
+            </Button>
+          </div>
+        </div>
+      </div>
+    </div>
+  );
+}
Index: src/models/Channel.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/models/Channel.ts b/src/models/Channel.ts
new file mode 100644
--- /dev/null	(date 1747009941280)
+++ b/src/models/Channel.ts	(date 1747009941280)
@@ -0,0 +1,110 @@
+import mongoose, { Document, Schema, Types } from 'mongoose';
+        import slugify from 'slugify';
+
+        export interface IChannel extends Document {
+            name: string;
+            slug: string;
+            type: 'text' | 'voice';
+            description?: string;
+            community: Types.ObjectId;
+            position: number;
+            isPrivate: boolean;
+            allowedRoles: Types.ObjectId[];
+            messages?: Types.DocumentArray<Document>;
+            createdAt: Date;
+            updatedAt: Date;
+        }
+
+        const ChannelSchema = new Schema<IChannel>(
+            {
+                name: {
+                    type: String,
+                    required: true,
+                    trim: true,
+                    maxlength: 100,
+                },
+                slug: {
+                    type: String,
+                    required: true,
+                    trim: true,
+                    lowercase: true,
+                },
+                type: {
+                    type: String,
+                    required: true,
+                    enum: ['text', 'voice'],
+                    default: 'text',
+                },
+                description: {
+                    type: String,
+                    trim: true,
+                    maxlength: 1000,
+                    default: '',
+                },
+                community: {
+                    type: Schema.Types.ObjectId,
+                    ref: 'Community',
+                    required: true,
+                },
+                position: {
+                    type: Number,
+                    default: 0,
+                    min: 0,
+                },
+                isPrivate: {
+                    type: Boolean,
+                    default: false,
+                },
+                allowedRoles: [
+                    {
+                        type: Schema.Types.ObjectId,
+                        ref: 'Role',
+                    },
+                ],
+            },
+            {
+                timestamps: true,
+                toJSON: { virtuals: true },
+                toObject: { virtuals: true },
+            }
+        );
+
+        // Compound indexes: unique slug within a community; fast sorting by position
+        // Only create the unique index if it doesn't already exist
+        if (!ChannelSchema.indexes().some(idx =>
+          idx[0] && idx[0].slug === 1 && idx[1] && idx[1].unique === true
+        )) {
+          ChannelSchema.index({ community: 1, slug: 1 }, { unique: true });
+        }
+        ChannelSchema.index({ community: 1, position: 1 });
+
+        // Auto‐slugify on name changes
+        ChannelSchema.pre('validate', function (next) {
+            if (this.isModified('name')) {
+                this.slug = slugify(this.name, { lower: true, strict: true });
+            }
+            next();
+        });
+
+        // Virtual populate of messages (Message model must have channel ref)
+        ChannelSchema.virtual('messages', {
+            ref: 'Message',
+            localField: '_id',
+            foreignField: 'channel',
+        });
+
+        // Handy virtual for message count
+        ChannelSchema.virtual('messageCount').get(function () {
+            return Array.isArray(this.messages) ? this.messages.length : 0;
+        });
+
+        // Static helper to fetch by slug
+        ChannelSchema.statics.findBySlug = function (
+            communityId: Types.ObjectId,
+            slug: string
+        ) {
+            return this.findOne({ community: communityId, slug });
+        };
+
+        export default mongoose.models.Channel ||
+        mongoose.model<IChannel>('Channel', ChannelSchema);
\ No newline at end of file
Index: src/components/ui/switch.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/ui/switch.tsx b/src/components/ui/switch.tsx
new file mode 100644
--- /dev/null	(date 1747009941378)
+++ b/src/components/ui/switch.tsx	(date 1747009941378)
@@ -0,0 +1,29 @@
+"use client"
+
+import * as React from "react"
+import * as SwitchPrimitives from "@radix-ui/react-switch"
+
+import { cn } from "@/lib/utils"
+
+const Switch = React.forwardRef<
+  React.ElementRef<typeof SwitchPrimitives.Root>,
+  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
+>(({ className, ...props }, ref) => (
+  <SwitchPrimitives.Root
+    className={cn(
+      "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
+      className
+    )}
+    {...props}
+    ref={ref}
+  >
+    <SwitchPrimitives.Thumb
+      className={cn(
+        "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
+      )}
+    />
+  </SwitchPrimitives.Root>
+))
+Switch.displayName = SwitchPrimitives.Root.displayName
+
+export { Switch }
Index: src/models/Community.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import mongoose, { Document, Schema } from 'mongoose';\r\n\r\nexport interface ICommunity extends Document {\r\n  name: string;\r\n  description: string;\r\n  image?: string;\r\n  creator: mongoose.Types.ObjectId;\r\n  members: mongoose.Types.ObjectId[];\r\n  moderators: mongoose.Types.ObjectId[];\r\n  posts: mongoose.Types.ObjectId[];\r\n  createdAt: Date;\r\n  updatedAt: Date;\r\n}\r\n\r\nconst CommunitySchema = new Schema<ICommunity>(\r\n  {\r\n    name: { type: String, required: true, unique: true },\r\n    description: { type: String, required: true },\r\n    image: { type: String },\r\n    creator: { type: Schema.Types.ObjectId, ref: 'User', required: true },\r\n    members: [{ type: Schema.Types.ObjectId, ref: 'User' }],\r\n    moderators: [{ type: Schema.Types.ObjectId, ref: 'User' }],\r\n    posts: [{ type: Schema.Types.ObjectId, ref: 'Post' }],\r\n  },\r\n  { timestamps: true }\r\n);\r\n\r\n// Create index for creator (name index is already defined with unique: true)\r\nCommunitySchema.index({ creator: 1 });\r\n\r\n// Virtual field for member count\r\nCommunitySchema.virtual('memberCount').get(function() {\r\n  return this.members.length;\r\n});\r\n\r\n// Virtual field for post count\r\nCommunitySchema.virtual('postCount').get(function() {\r\n  return this.posts.length;\r\n});\r\n\r\nexport default mongoose.models.Community || mongoose.model<ICommunity>('Community', CommunitySchema);\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/models/Community.ts b/src/models/Community.ts
--- a/src/models/Community.ts	(revision 4c74be27f19335e5b956190fea65a1f797f84875)
+++ b/src/models/Community.ts	(date 1747009943692)
@@ -1,41 +1,155 @@
-import mongoose, { Document, Schema } from 'mongoose';
+import mongoose, { Document, Schema, Types } from 'mongoose';
+    import slugify from 'slugify';
+
+    export interface IInvite {
+        code: string;
+        createdAt: Date;
+        expiresAt?: Date;
+    }
 
-export interface ICommunity extends Document {
-  name: string;
-  description: string;
-  image?: string;
-  creator: mongoose.Types.ObjectId;
-  members: mongoose.Types.ObjectId[];
-  moderators: mongoose.Types.ObjectId[];
-  posts: mongoose.Types.ObjectId[];
-  createdAt: Date;
-  updatedAt: Date;
-}
+    export interface ICommunity extends Document {
+        name: string;
+        slug: string;
+        description: string;
+        image?: string;
+        creator: Types.ObjectId;
+        rules?: string;
+        createdAt: Date;
+        updatedAt: Date;
+
+        // Virtuals
+        members?: Types.DocumentArray<Document>;
+        channels?: Types.DocumentArray<Document>;
+        roles?: Types.DocumentArray<Document>;
+        posts?: Types.DocumentArray<Document>;
+        memberCount: number;
+        postCount: number;
+        channelCount: number;
+        roleCount: number;
+        invites: IInvite[];
+    }
+
+    const InviteSchema = new Schema<IInvite>(
+        {
+            code: {
+                type: String,
+                required: true,
+                unique: true,
+                trim: true,
+            },
+            createdAt: {
+                type: Date,
+                default: () => new Date(),
+                immutable: true,
+            },
+            expiresAt: Date,
+        },
+        { _id: false }
+    );
 
-const CommunitySchema = new Schema<ICommunity>(
-  {
-    name: { type: String, required: true, unique: true },
-    description: { type: String, required: true },
-    image: { type: String },
-    creator: { type: Schema.Types.ObjectId, ref: 'User', required: true },
-    members: [{ type: Schema.Types.ObjectId, ref: 'User' }],
-    moderators: [{ type: Schema.Types.ObjectId, ref: 'User' }],
-    posts: [{ type: Schema.Types.ObjectId, ref: 'Post' }],
-  },
-  { timestamps: true }
-);
+    const CommunitySchema = new Schema<ICommunity>(
+        {
+            name: {
+                type: String,
+                required: true,
+                trim: true,
+                maxlength: 200,
+            },
+            slug: {
+                type: String,
+                required: true,
+                trim: true,
+                lowercase: true,
+                unique: true,
+            },
+            description: {
+                type: String,
+                required: true,
+                trim: true,
+                maxlength: 2000,
+            },
+            image: {
+                type: String,
+                default: '',
+            },
+            creator: {
+                type: Schema.Types.ObjectId,
+                ref: 'User',
+                required: true,
+            },
+            rules: {
+                type: String,
+                trim: true,
+                maxlength: 2000,
+                default: '',
+            },
+            invites: {
+                type: [InviteSchema],
+                default: [],
+            },
+        },
+        {
+            timestamps: true,
+            toJSON: { virtuals: true },
+            toObject: { virtuals: true },
+        }
+    );
 
-// Create index for creator (name index is already defined with unique: true)
-CommunitySchema.index({ creator: 1 });
+    // Auto-generate slug from name
+    CommunitySchema.pre('validate', function (next) {
+        if (this.isModified('name')) {
+            this.slug = slugify(this.name, { lower: true, strict: true });
+        }
+        next();
+    });
+
+    // Indexes
+    CommunitySchema.index({ slug: 1 }, { unique: true });
+    CommunitySchema.index({ creator: 1, createdAt: -1 });
+
+    // Virtual population
+    CommunitySchema.virtual('members', {
+        ref: 'Membership',
+        localField: '_id',
+        foreignField: 'community',
+    });
+
+    CommunitySchema.virtual('channels', {
+        ref: 'Channel',
+        localField: '_id',
+        foreignField: 'community',
+    });
 
-// Virtual field for member count
-CommunitySchema.virtual('memberCount').get(function() {
-  return this.members.length;
-});
-
-// Virtual field for post count
-CommunitySchema.virtual('postCount').get(function() {
-  return this.posts.length;
-});
+    CommunitySchema.virtual('roles', {
+        ref: 'Role',
+        localField: '_id',
+        foreignField: 'community',
+    });
+
+    CommunitySchema.virtual('posts', {
+        ref: 'Post',
+        localField: '_id',
+        foreignField: 'community',
+    });
+
+    // Counts
+    CommunitySchema.virtual('memberCount').get(function () {
+        return Array.isArray(this.members) ? this.members.length : 0;
+    });
+    CommunitySchema.virtual('channelCount').get(function () {
+        return Array.isArray(this.channels) ? this.channels.length : 0;
+    });
+    CommunitySchema.virtual('roleCount').get(function () {
+        return Array.isArray(this.roles) ? this.roles.length : 0;
+    });
+    CommunitySchema.virtual('postCount').get(function () {
+        return Array.isArray(this.posts) ? this.posts.length : 0;
+    });
 
-export default mongoose.models.Community || mongoose.model<ICommunity>('Community', CommunitySchema);
+    // Static helper to find by slug
+    CommunitySchema.statics.findBySlug = function (slug: string) {
+        return this.findOne({ slug });
+    };
+
+    export default mongoose.models.Community ||
+    mongoose.model<ICommunity>('Community', CommunitySchema);
\ No newline at end of file
Index: src/models/User.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import mongoose, { Document, Schema } from 'mongoose';\r\n\r\nexport interface IUser extends Document {\r\n  clerkId: string;\r\n  username: string;\r\n  name: string;\r\n  email: string;\r\n  bio?: string;\r\n  image?: string;\r\n  following: mongoose.Types.ObjectId[];\r\n  followers: mongoose.Types.ObjectId[];\r\n  communities: mongoose.Types.ObjectId[];\r\n  createdAt: Date;\r\n  updatedAt: Date;\r\n}\r\n\r\nconst UserSchema = new Schema<IUser>(\r\n  {\r\n    clerkId: { type: String, required: true, unique: true },\r\n    username: { type: String, required: true, unique: true },\r\n    name: { type: String, required: true },\r\n    email: { type: String, required: true, unique: true },\r\n    bio: { type: String },\r\n    image: { type: String },\r\n    following: [{ type: Schema.Types.ObjectId, ref: 'User' }],\r\n    followers: [{ type: Schema.Types.ObjectId, ref: 'User' }],\r\n    communities: [{ type: Schema.Types.ObjectId, ref: 'Community' }],\r\n  },\r\n  { timestamps: true }\r\n);\r\n\r\n// Indexes are already defined with unique: true in the schema\r\n\r\nexport default mongoose.models.User || mongoose.model<IUser>('User', UserSchema);\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/models/User.ts b/src/models/User.ts
--- a/src/models/User.ts	(revision 4c74be27f19335e5b956190fea65a1f797f84875)
+++ b/src/models/User.ts	(date 1747009943714)
@@ -1,5 +1,38 @@
 import mongoose, { Document, Schema } from 'mongoose';
 
+export interface NotificationSettings {
+  inApp: {
+    likes: boolean;
+    comments: boolean;
+    follows: boolean;
+    mentions: boolean;
+    messages: boolean;
+    communityInvites: boolean;
+    roleAssignments: boolean;
+  };
+  email: {
+    likes: boolean;
+    comments: boolean;
+    follows: boolean;
+    mentions: boolean;
+    messages: boolean;
+    communityInvites: boolean;
+    roleAssignments: boolean;
+    digest: boolean;
+  };
+}
+
+export interface PrivacySettings {
+  profileVisibility: 'public' | 'followers' | 'private';
+  activityVisibility: 'public' | 'followers' | 'private';
+  allowFollowers: boolean;
+  allowMessages: 'everyone' | 'followers' | 'none';
+  showOnlineStatus: boolean;
+  allowTagging: boolean;
+  allowMentions: boolean;
+  searchable: boolean;
+}
+
 export interface IUser extends Document {
   clerkId: string;
   username: string;
@@ -10,10 +43,63 @@
   following: mongoose.Types.ObjectId[];
   followers: mongoose.Types.ObjectId[];
   communities: mongoose.Types.ObjectId[];
+  notificationSettings?: NotificationSettings;
+  privacySettings?: PrivacySettings;
   createdAt: Date;
   updatedAt: Date;
 }
 
+const NotificationSettingsSchema = new Schema(
+  {
+    inApp: {
+      likes: { type: Boolean, default: true },
+      comments: { type: Boolean, default: true },
+      follows: { type: Boolean, default: true },
+      mentions: { type: Boolean, default: true },
+      messages: { type: Boolean, default: true },
+      communityInvites: { type: Boolean, default: true },
+      roleAssignments: { type: Boolean, default: true },
+    },
+    email: {
+      likes: { type: Boolean, default: false },
+      comments: { type: Boolean, default: true },
+      follows: { type: Boolean, default: true },
+      mentions: { type: Boolean, default: true },
+      messages: { type: Boolean, default: true },
+      communityInvites: { type: Boolean, default: true },
+      roleAssignments: { type: Boolean, default: true },
+      digest: { type: Boolean, default: true },
+    },
+  },
+  { _id: false }
+);
+
+const PrivacySettingsSchema = new Schema(
+  {
+    profileVisibility: {
+      type: String,
+      enum: ['public', 'followers', 'private'],
+      default: 'public'
+    },
+    activityVisibility: {
+      type: String,
+      enum: ['public', 'followers', 'private'],
+      default: 'public'
+    },
+    allowFollowers: { type: Boolean, default: true },
+    allowMessages: {
+      type: String,
+      enum: ['everyone', 'followers', 'none'],
+      default: 'everyone'
+    },
+    showOnlineStatus: { type: Boolean, default: true },
+    allowTagging: { type: Boolean, default: true },
+    allowMentions: { type: Boolean, default: true },
+    searchable: { type: Boolean, default: true },
+  },
+  { _id: false }
+);
+
 const UserSchema = new Schema<IUser>(
   {
     clerkId: { type: String, required: true, unique: true },
@@ -25,6 +111,8 @@
     following: [{ type: Schema.Types.ObjectId, ref: 'User' }],
     followers: [{ type: Schema.Types.ObjectId, ref: 'User' }],
     communities: [{ type: Schema.Types.ObjectId, ref: 'Community' }],
+    notificationSettings: { type: NotificationSettingsSchema },
+    privacySettings: { type: PrivacySettingsSchema },
   },
   { timestamps: true }
 );
Index: src/models/Role.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/models/Role.ts b/src/models/Role.ts
new file mode 100644
--- /dev/null	(date 1747009941400)
+++ b/src/models/Role.ts	(date 1747009941400)
@@ -0,0 +1,105 @@
+import mongoose, { Document, Schema, Types } from 'mongoose';
+    import isHexColor from 'validator/lib/isHexColor';
+
+    export type Permission =
+        | 'MANAGE_COMMUNITY'
+        | 'MANAGE_CHANNELS'
+        | 'MANAGE_ROLES'
+        | 'MANAGE_MEMBERS'
+        | 'MANAGE_MESSAGES'
+        | 'CREATE_INVITES'
+        | 'SEND_MESSAGES'
+        | 'CONNECT_VOICE'
+        | 'UPLOAD_FILES'
+        | 'PIN_MESSAGES'
+        | 'MENTION_EVERYONE';
+
+    export interface IRole extends Document {
+        name: string;
+        color: string;
+        community: Types.ObjectId;
+        permissions: Permission[];
+        position: number;
+        isDefault: boolean;
+        createdAt: Date;
+        updatedAt: Date;
+    }
+
+    const RoleSchema = new Schema<IRole>(
+        {
+            name: {
+                type: String,
+                required: true,
+                trim: true,
+                maxlength: 100,
+            },
+            color: {
+                type: String,
+                default: '#99AAB5',
+                validate: {
+                    validator: (v: string) => isHexColor(v),
+                    message: (props: { value: unknown }) => `${props.value} is not a valid hex color!`,
+                },
+            },
+            community: {
+                type: Schema.Types.ObjectId,
+                ref: 'Community',
+                required: true,
+            },
+            permissions: [
+                {
+                    type: String,
+                    enum: [
+                        'MANAGE_COMMUNITY',
+                        'MANAGE_CHANNELS',
+                        'MANAGE_ROLES',
+                        'MANAGE_MEMBERS',
+                        'MANAGE_MESSAGES',
+                        'CREATE_INVITES',
+                        'SEND_MESSAGES',
+                        'CONNECT_VOICE',
+                        'UPLOAD_FILES',
+                        'PIN_MESSAGES',
+                        'MENTION_EVERYONE',
+                    ],
+                    default: ['SEND_MESSAGES', 'CONNECT_VOICE'],
+                },
+            ],
+            position: {
+                type: Number,
+                default: 0,
+                min: 0,
+            },
+            isDefault: {
+                type: Boolean,
+                default: false,
+            },
+        },
+        {
+            timestamps: true,
+        }
+    );
+
+    // Unique role name per community
+    RoleSchema.index({ community: 1, name: 1 }, { unique: true });
+    // Fast ordering by position
+    RoleSchema.index({ community: 1, position: 1 });
+
+    // Static to get the default “Member” role for a community
+    RoleSchema.statics.getDefaultRole = function (communityId: Types.ObjectId) {
+        return this.findOne({ community: communityId, isDefault: true });
+    };
+
+    // Before saving, ensure exactly one default role per community
+    RoleSchema.pre('save', async function (next) {
+        if (this.isModified('isDefault') && this.isDefault) {
+            await (this.constructor as typeof mongoose.Model).updateMany(
+                { community: this.community, _id: { $ne: this._id } },
+                { isDefault: false }
+            );
+        }
+        next();
+    });
+
+    export default mongoose.models.Role ||
+    mongoose.model<IRole>('Role', RoleSchema);
\ No newline at end of file
Index: src/models/Post.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// src/models/Post.ts\r\nimport { Schema, model, models, Document, Model, Types } from \"mongoose\";\r\n\r\nexport interface IPost extends Document {\r\n    author: Types.ObjectId;\r\n    content: string;\r\n    community?: Types.ObjectId | null;\r\n    upvotes: Types.ObjectId[];\r\n    downvotes: Types.ObjectId[];\r\n    comments: Types.ObjectId[];\r\n    createdAt: Date;\r\n    updatedAt: Date;\r\n}\r\n\r\nconst PostSchema = new Schema<IPost>(\r\n    {\r\n        author: {\r\n            type: Schema.Types.ObjectId,\r\n            ref: \"User\",\r\n            required: true,\r\n        },\r\n        content: {\r\n            type: String,\r\n            required: true,\r\n            trim: true,\r\n            maxlength: 50000,\r\n        },\r\n        community: {\r\n            type: Schema.Types.ObjectId,\r\n            ref: \"Community\",\r\n            default: null,\r\n        },\r\n        upvotes: {\r\n            type: [Schema.Types.ObjectId],\r\n            ref: \"User\",\r\n            default: []\r\n        },\r\n        downvotes: {\r\n            type: [Schema.Types.ObjectId],\r\n            ref: \"User\",\r\n            default: []\r\n        },\r\n        comments: {\r\n            type: [Schema.Types.ObjectId],\r\n            ref: \"Comment\",\r\n            default: []\r\n        }\r\n    },\r\n    {\r\n        timestamps: true,\r\n        toJSON: { virtuals: true },\r\n        toObject: { virtuals: true }\r\n    }\r\n);\r\n\r\n// Indexes for efficient querying\r\nPostSchema.index({ author: 1, createdAt: -1 });\r\nPostSchema.index({ community: 1, createdAt: -1 });\r\nPostSchema.index({ createdAt: -1 });\r\n\r\n// Virtual for vote count\r\nPostSchema.virtual(\"voteCount\").get(function (this: IPost) {\r\n    return (this.upvotes?.length || 0) - (this.downvotes?.length || 0);\r\n});\r\n\r\n// Virtual for comment count\r\nPostSchema.virtual(\"commentCount\").get(function (this: IPost) {\r\n    return this.comments?.length || 0;\r\n});\r\n\r\nconst Post: Model<IPost> = models.Post || model<IPost>(\"Post\", PostSchema);\r\n\r\nexport default Post;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/models/Post.ts b/src/models/Post.ts
--- a/src/models/Post.ts	(revision 4c74be27f19335e5b956190fea65a1f797f84875)
+++ b/src/models/Post.ts	(date 1747009943734)
@@ -1,13 +1,16 @@
 // src/models/Post.ts
+
 import { Schema, model, models, Document, Model, Types } from "mongoose";
 
 export interface IPost extends Document {
     author: Types.ObjectId;
-    content: string;
+    content: string; // Rich text (HTML)
+    mediaFiles: string[]; // Uploaded media files (images, videos)
     community?: Types.ObjectId | null;
     upvotes: Types.ObjectId[];
     downvotes: Types.ObjectId[];
     comments: Types.ObjectId[];
+    savedBy: Types.ObjectId[];
     createdAt: Date;
     updatedAt: Date;
 }
@@ -25,6 +28,14 @@
             trim: true,
             maxlength: 50000,
         },
+        mediaFiles: {
+            type: [String],
+            default: [],
+            validate: {
+                validator: (arr: string[]) => arr.every(url => typeof url === 'string' && url.length > 0),
+                message: "All media files must be valid non-empty URLs.",
+            },
+        },
         community: {
             type: Schema.Types.ObjectId,
             ref: "Community",
@@ -33,41 +44,49 @@
         upvotes: {
             type: [Schema.Types.ObjectId],
             ref: "User",
-            default: []
+            default: [],
         },
         downvotes: {
             type: [Schema.Types.ObjectId],
             ref: "User",
-            default: []
+            default: [],
         },
         comments: {
             type: [Schema.Types.ObjectId],
             ref: "Comment",
-            default: []
-        }
+            default: [],
+        },
+        savedBy: {
+            type: [Schema.Types.ObjectId],
+            ref: "User",
+            default: [],
+        },
     },
     {
         timestamps: true,
         toJSON: { virtuals: true },
-        toObject: { virtuals: true }
+        toObject: { virtuals: true },
     }
 );
 
-// Indexes for efficient querying
+// Indexes
 PostSchema.index({ author: 1, createdAt: -1 });
 PostSchema.index({ community: 1, createdAt: -1 });
 PostSchema.index({ createdAt: -1 });
 
-// Virtual for vote count
+// Virtual fields
 PostSchema.virtual("voteCount").get(function (this: IPost) {
     return (this.upvotes?.length || 0) - (this.downvotes?.length || 0);
 });
 
-// Virtual for comment count
 PostSchema.virtual("commentCount").get(function (this: IPost) {
     return this.comments?.length || 0;
 });
 
+PostSchema.virtual("savedCount").get(function (this: IPost) {
+    return this.savedBy?.length || 0;
+});
+
 const Post: Model<IPost> = models.Post || model<IPost>("Post", PostSchema);
 
 export default Post;
Index: src/components/messages/message-input.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/messages/message-input.tsx b/src/components/messages/message-input.tsx
new file mode 100644
--- /dev/null	(date 1747009941334)
+++ b/src/components/messages/message-input.tsx	(date 1747009941334)
@@ -0,0 +1,231 @@
+"use client";
+
+import React, { useState, useRef } from "react";
+import { Paperclip, Send, Image, Smile, X } from "lucide-react";
+import { Button } from "@/components/ui/button";
+import { toast } from "sonner";
+
+interface MessageInputProps {
+  conversationId: string;
+  onMessageSent?: () => void;
+}
+
+export function MessageInput({ conversationId, onMessageSent }: MessageInputProps) {
+  const [message, setMessage] = useState("");
+  const [attachments, setAttachments] = useState<string[]>([]);
+  const [isUploading, setIsUploading] = useState(false);
+  const [isSending, setIsSending] = useState(false);
+  const fileInputRef = useRef<HTMLInputElement>(null);
+
+  // Handle message input change
+  const handleMessageChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
+    setMessage(e.target.value);
+    
+    // Auto-resize textarea
+    e.target.style.height = "auto";
+    e.target.style.height = `${Math.min(e.target.scrollHeight, 150)}px`;
+  };
+
+  // Handle file upload
+  const handleFileUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {
+    const files = e.target.files;
+    if (!files || files.length === 0) return;
+    
+    try {
+      setIsUploading(true);
+      
+      // Upload each file to the server
+      const uploadPromises = Array.from(files).map(async (file) => {
+        const formData = new FormData();
+        formData.append('file', file);
+        
+        const response = await fetch('/api/upload', {
+          method: 'POST',
+          body: formData,
+        });
+        
+        if (!response.ok) {
+          throw new Error(`Failed to upload ${file.name}`);
+        }
+        
+        const data = await response.json();
+        return data.url; // Return the URL of the uploaded file
+      });
+      
+      // Wait for all uploads to complete
+      const newAttachments = await Promise.all(uploadPromises);
+      
+      // Add the new attachments to the existing ones
+      setAttachments(prev => [...prev, ...newAttachments]);
+      
+      // Reset file input
+      if (fileInputRef.current) {
+        fileInputRef.current.value = "";
+      }
+      
+      toast.success(`${files.length} file${files.length > 1 ? 's' : ''} uploaded`);
+    } catch (err) {
+      console.error(err);
+      toast.error("Failed to upload file");
+    } finally {
+      setIsUploading(false);
+    }
+  };
+
+  // Handle remove attachment
+  const handleRemoveAttachment = (index: number) => {
+    setAttachments(prev => prev.filter((_, i) => i !== index));
+  };
+
+  // Handle send message
+  const handleSendMessage = async () => {
+    if (!message.trim() && attachments.length === 0) return;
+    
+    try {
+      setIsSending(true);
+      
+      const response = await fetch(`/api/conversations/${conversationId}/messages`, {
+        method: "POST",
+        headers: {
+          "Content-Type": "application/json",
+        },
+        body: JSON.stringify({
+          content: message,
+          attachments,
+        }),
+      });
+      
+      if (!response.ok) {
+        throw new Error("Failed to send message");
+      }
+      
+      // Clear input
+      setMessage("");
+      setAttachments([]);
+      
+      // Reset textarea height
+      const textarea = document.querySelector("textarea");
+      if (textarea) {
+        textarea.style.height = "auto";
+      }
+      
+      // Notify parent
+      if (onMessageSent) {
+        onMessageSent();
+      }
+    } catch (err) {
+      console.error(err);
+      toast.error("Failed to send message");
+    } finally {
+      setIsSending(false);
+    }
+  };
+
+  // Handle key press
+  const handleKeyPress = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {
+    if (e.key === "Enter" && !e.shiftKey) {
+      e.preventDefault();
+      handleSendMessage();
+    }
+  };
+
+  return (
+    <div>
+      {/* Attachments */}
+      {attachments.length > 0 && (
+        <div className="flex flex-wrap gap-2 mb-2">
+          {attachments.map((attachment, index) => (
+            <div
+              key={index}
+              className="relative group bg-gray-100 rounded-md overflow-hidden"
+            >
+              {attachment.match(/\.(jpg|jpeg|png|gif)$/i) ? (
+                <img
+                  src={attachment}
+                  alt="Attachment"
+                  className="h-16 w-16 object-cover"
+                />
+              ) : (
+                <div className="h-16 w-16 flex items-center justify-center bg-gray-200">
+                  <Image className="h-6 w-6 text-gray-500" />
+                </div>
+              )}
+              <button
+                className="absolute top-1 right-1 bg-gray-800 bg-opacity-50 rounded-full p-0.5 text-white opacity-0 group-hover:opacity-100 transition-opacity"
+                onClick={() => handleRemoveAttachment(index)}
+              >
+                <X className="h-3 w-3" />
+              </button>
+            </div>
+          ))}
+        </div>
+      )}
+
+      {/* Input Area */}
+      <div className="flex items-end border border-gray-300 rounded-md focus-within:ring-2 focus-within:ring-blue-500 focus-within:border-blue-500">
+        <textarea
+          className="flex-1 p-3 resize-none outline-none min-h-[40px] max-h-[150px]"
+          placeholder="Type a message..."
+          value={message}
+          onChange={handleMessageChange}
+          onKeyDown={handleKeyPress}
+          rows={1}
+        />
+        
+        <div className="flex items-center p-2">
+          {/* File Upload */}
+          <input
+            type="file"
+            ref={fileInputRef}
+            className="hidden"
+            onChange={handleFileUpload}
+            multiple
+          />
+          
+          <Button
+            variant="ghost"
+            size="icon"
+            className="text-gray-500 hover:text-gray-700"
+            onClick={() => fileInputRef.current?.click()}
+            disabled={isUploading}
+          >
+            {isUploading ? (
+              <span className="h-5 w-5 animate-spin rounded-full border-2 border-gray-300 border-t-blue-600"></span>
+            ) : (
+              <Paperclip className="h-5 w-5" />
+            )}
+          </Button>
+          
+          {/* Emoji Picker (placeholder) */}
+          <Button
+            variant="ghost"
+            size="icon"
+            className="text-gray-500 hover:text-gray-700"
+            onClick={() => toast.info("Emoji picker coming soon")}
+          >
+            <Smile className="h-5 w-5" />
+          </Button>
+          
+          {/* Send Button */}
+          <Button
+            variant="ghost"
+            size="icon"
+            className={`${
+              message.trim() || attachments.length > 0
+                ? "text-blue-600 hover:text-blue-700"
+                : "text-gray-400"
+            }`}
+            onClick={handleSendMessage}
+            disabled={(!message.trim() && attachments.length === 0) || isSending}
+          >
+            {isSending ? (
+              <span className="h-5 w-5 animate-spin rounded-full border-2 border-gray-300 border-t-blue-600"></span>
+            ) : (
+              <Send className="h-5 w-5" />
+            )}
+          </Button>
+        </div>
+      </div>
+    </div>
+  );
+}
Index: src/models/Comment.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import mongoose, { Document, Schema } from 'mongoose';\r\n\r\nexport interface IComment extends Document {\r\n  author: mongoose.Types.ObjectId;\r\n  post: mongoose.Types.ObjectId;\r\n  content: string;\r\n  upvotes: mongoose.Types.ObjectId[];\r\n  downvotes: mongoose.Types.ObjectId[];\r\n  parentComment?: mongoose.Types.ObjectId;\r\n  createdAt: Date;\r\n  updatedAt: Date;\r\n}\r\n\r\nconst CommentSchema = new Schema<IComment>(\r\n  {\r\n    author: { type: Schema.Types.ObjectId, ref: 'User', required: true },\r\n    post: { type: Schema.Types.ObjectId, ref: 'Post', required: true },\r\n    content: { type: String, required: true },\r\n    upvotes: [{ type: Schema.Types.ObjectId, ref: 'User' }],\r\n    downvotes: [{ type: Schema.Types.ObjectId, ref: 'User' }],\r\n    parentComment: { type: Schema.Types.ObjectId, ref: 'Comment' },\r\n  },\r\n  { timestamps: true }\r\n);\r\n\r\n// Create indexes for faster queries\r\nCommentSchema.index({ post: 1, createdAt: -1 });\r\nCommentSchema.index({ author: 1, createdAt: -1 });\r\nCommentSchema.index({ parentComment: 1 });\r\n\r\n// Virtual field for vote count\r\nCommentSchema.virtual('voteCount').get(function() {\r\n  return this.upvotes.length - this.downvotes.length;\r\n});\r\n\r\nexport default mongoose.models.Comment || mongoose.model<IComment>('Comment', CommentSchema);\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/models/Comment.ts b/src/models/Comment.ts
--- a/src/models/Comment.ts	(revision 4c74be27f19335e5b956190fea65a1f797f84875)
+++ b/src/models/Comment.ts	(date 1747009943780)
@@ -7,6 +7,7 @@
   upvotes: mongoose.Types.ObjectId[];
   downvotes: mongoose.Types.ObjectId[];
   parentComment?: mongoose.Types.ObjectId;
+  replies: mongoose.Types.ObjectId[];
   createdAt: Date;
   updatedAt: Date;
 }
@@ -15,12 +16,17 @@
   {
     author: { type: Schema.Types.ObjectId, ref: 'User', required: true },
     post: { type: Schema.Types.ObjectId, ref: 'Post', required: true },
-    content: { type: String, required: true },
+    content: { type: String, required: true, trim: true, maxlength: 5000 },
     upvotes: [{ type: Schema.Types.ObjectId, ref: 'User' }],
     downvotes: [{ type: Schema.Types.ObjectId, ref: 'User' }],
     parentComment: { type: Schema.Types.ObjectId, ref: 'Comment' },
+    replies: [{ type: Schema.Types.ObjectId, ref: 'Comment', default: [] }],
   },
-  { timestamps: true }
+  {
+    timestamps: true,
+    toJSON: { virtuals: true },
+    toObject: { virtuals: true }
+  }
 );
 
 // Create indexes for faster queries
@@ -33,4 +39,9 @@
   return this.upvotes.length - this.downvotes.length;
 });
 
+// Virtual field for reply count
+CommentSchema.virtual('replyCount').get(function() {
+  return this.replies?.length || 0;
+});
+
 export default mongoose.models.Comment || mongoose.model<IComment>('Comment', CommentSchema);
Index: src/models/Message.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/models/Message.ts b/src/models/Message.ts
new file mode 100644
--- /dev/null	(date 1747009941360)
+++ b/src/models/Message.ts	(date 1747009941360)
@@ -0,0 +1,142 @@
+import mongoose, { Document, Schema, Types } from 'mongoose';
+
+export interface IReaction {
+    emoji: string;
+    users: Types.ObjectId[];
+}
+
+export interface IMessage extends Document {
+    content: string;
+    author: Types.ObjectId;
+    channel: Types.ObjectId;
+    community: Types.ObjectId;
+    attachments: string[];
+    mentions: Types.ObjectId[];
+    isPinned: boolean;
+    isEdited: boolean;
+    reactions: IReaction[];
+    createdAt: Date;
+    updatedAt: Date;
+
+    // Helpers
+    addReaction(emoji: string, userId: Types.ObjectId): Promise<void>;
+    removeReaction(emoji: string, userId: Types.ObjectId): Promise<void>;
+}
+
+const ReactionSchema = new Schema<IReaction>(
+    {
+        emoji: {
+            type: String,
+            required: true,
+            trim: true,
+            maxlength: 50,
+        },
+        users: [
+            {
+                type: Schema.Types.ObjectId,
+                ref: 'User',
+            },
+        ],
+    },
+    { _id: false }
+);
+
+const MessageSchema = new Schema<IMessage>(
+    {
+        content: {
+            type: String,
+            required: true,
+            trim: true,
+            maxlength: 4000,
+        },
+        author: {
+            type: Schema.Types.ObjectId,
+            ref: 'User',
+            required: true,
+        },
+        channel: {
+            type: Schema.Types.ObjectId,
+            ref: 'Channel',
+            required: true,
+        },
+        community: {
+            type: Schema.Types.ObjectId,
+            ref: 'Community',
+            required: true,
+        },
+        attachments: {
+            type: [String],
+            default: [],
+        },
+        mentions: {
+            type: [Schema.Types.ObjectId],
+            ref: 'User',
+            default: [],
+        },
+        isPinned: {
+            type: Boolean,
+            default: false,
+        },
+        isEdited: {
+            type: Boolean,
+            default: false,
+        },
+        reactions: {
+            type: [ReactionSchema],
+            default: [],
+        },
+    },
+    {
+        timestamps: true,
+    }
+);
+
+// Index for efficient querying
+MessageSchema.index({ channel: 1, createdAt: 1 });
+MessageSchema.index({ author: 1, createdAt: 1 });
+MessageSchema.index({ community: 1, createdAt: 1 });
+
+// Mark a message as edited if content changes
+MessageSchema.pre('findOneAndUpdate', function (next) {
+    const update = this.getUpdate() as any;
+    if (update.content) {
+        update.isEdited = true;
+    }
+    next();
+});
+
+// Instance method: add a reaction
+MessageSchema.methods.addReaction = async function (
+    this: IMessage,
+    emoji: string,
+    userId: Types.ObjectId
+) {
+    const reaction = this.reactions.find((r) => r.emoji === emoji);
+    if (reaction) {
+        if (!reaction.users.includes(userId)) {
+            reaction.users.push(userId);
+        }
+    } else {
+        this.reactions.push({ emoji, users: [userId] });
+    }
+    await this.save();
+};
+
+// Instance method: remove a reaction
+MessageSchema.methods.removeReaction = async function (
+    this: IMessage,
+    emoji: string,
+    userId: Types.ObjectId
+) {
+    const reaction = this.reactions.find((r) => r.emoji === emoji);
+    if (reaction) {
+        reaction.users = reaction.users.filter((u) => !u.equals(userId));
+        if (reaction.users.length === 0) {
+            this.reactions = this.reactions.filter((r) => r.emoji !== emoji);
+        }
+        await this.save();
+    }
+};
+
+export default mongoose.models.Message ||
+mongoose.model<IMessage>('Message', MessageSchema);
Index: src/app/api/upload/route.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/app/api/upload/route.ts b/src/app/api/upload/route.ts
new file mode 100644
--- /dev/null	(date 1747009941448)
+++ b/src/app/api/upload/route.ts	(date 1747009941448)
@@ -0,0 +1,131 @@
+import { NextRequest, NextResponse } from "next/server";
+import { auth } from "@clerk/nextjs/server";
+import { createClient, SupabaseClient } from "@supabase/supabase-js";
+import { UploadResponse } from "@/types/api";
+
+// Define types for Supabase responses
+interface SupabaseUploadResponse {
+  path?: string;
+}
+
+interface SupabaseError {
+  message: string;
+}
+
+// Validate environment variables
+const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
+const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;
+
+if (!supabaseUrl || !supabaseKey) {
+  throw new Error("Missing Supabase environment variables");
+}
+
+// Initialize Supabase client
+const supabase: SupabaseClient = createClient(supabaseUrl, supabaseKey);
+
+// Allowed file types
+const ALLOWED_FILE_TYPES = [
+  "image/jpeg",
+  "image/png",
+  "image/webp",
+  "image/gif",
+  "video/mp4",
+];
+
+// Maximum file size (10MB)
+const MAX_FILE_SIZE = 10 * 1024 * 1024; // 10MB
+
+export async function POST(req: NextRequest) {
+  try {
+    // Authentication
+    const authResult = await auth().catch((err) => {
+      console.error("[UPLOAD] Auth error:", err);
+      return null;
+    });
+
+    if (!authResult?.userId) {
+      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
+    }
+
+    const { userId } = authResult;
+
+    // Get form data
+    const formData = await req.formData();
+    const file = formData.get("file") as unknown as File;
+
+    if (!file) {
+      return NextResponse.json({ error: "No file provided" }, { status: 400 });
+    }
+
+    // Validate file
+    if (!ALLOWED_FILE_TYPES.includes(file.type)) {
+      return NextResponse.json(
+        { error: "Invalid file type. Allowed types: JPEG, PNG, WEBP, GIF, MP4" },
+        { status: 400 }
+      );
+    }
+
+    if (file.size > MAX_FILE_SIZE) {
+      return NextResponse.json(
+        { error: "File too large. Max 10MB allowed" },
+        { status: 400 }
+      );
+    }
+
+    // Generate a unique file name
+    const fileExtension = file.name.split(".").pop();
+    const generatedFileName = `${userId}_${Date.now()}.${fileExtension}`;
+    const uploadPath = `uploads/${generatedFileName}`;
+
+    // Upload to Supabase
+    const arrayBuffer = await file.arrayBuffer();
+    const buffer = new Uint8Array(arrayBuffer);
+
+    const { data: uploadData, error: uploadError } = await supabase.storage
+      .from("chattersphere")
+      .upload(uploadPath, buffer, {
+        contentType: file.type,
+        cacheControl: "3600",
+        upsert: false,
+      }) as { data: SupabaseUploadResponse | null; error: SupabaseError | null };
+
+    if (uploadError) {
+      console.error("[UPLOAD] Supabase Upload error:", uploadError.message);
+      return NextResponse.json({ error: "Failed to upload file" }, { status: 500 });
+    }
+
+    if (!uploadData?.path) {
+      console.error("[UPLOAD] Supabase returned empty path");
+      return NextResponse.json({ error: "Invalid upload response" }, { status: 500 });
+    }
+
+    // Get Public URL
+    const { data: publicUrlData, error: publicUrlError } = supabase.storage
+      .from("chattersphere")
+      .getPublicUrl(uploadPath) as { data: { publicUrl: string } | null; error: SupabaseError | null };
+
+    if (publicUrlError) {
+      console.error("[UPLOAD] Supabase Public URL error:", publicUrlError.message);
+      return NextResponse.json({ error: "Failed to get public URL" }, { status: 500 });
+    }
+
+    if (!publicUrlData?.publicUrl) {
+      console.error("[UPLOAD] Supabase returned empty public URL");
+      return NextResponse.json({ error: "Invalid public URL response" }, { status: 500 });
+    }
+
+    // Prepare the response
+    const response: UploadResponse = {
+      success: true,
+      url: publicUrlData.publicUrl,
+      fileType: file.type,
+      fileName: generatedFileName,
+    };
+
+    return NextResponse.json(response, { status: 200 });
+
+  } catch (err) {
+    console.error("[UPLOAD] Unexpected error:", err);
+    return NextResponse.json({ error: "Failed to process upload" }, { status: 500 });
+  }
+}
\ No newline at end of file
Index: src/models/Membership.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/models/Membership.ts b/src/models/Membership.ts
new file mode 100644
--- /dev/null	(date 1747009941482)
+++ b/src/models/Membership.ts	(date 1747009941482)
@@ -0,0 +1,120 @@
+import mongoose, { Document, Schema, Types } from 'mongoose';
+
+export interface IMembership extends Document {
+    user: Types.ObjectId;
+    community: Types.ObjectId;
+    roles: Types.ObjectId[];
+    joinedAt: Date;
+    lastActive: Date;
+
+    // Helpers
+    addRole(roleId: Types.ObjectId): Promise<void>;
+    removeRole(roleId: Types.ObjectId): Promise<void>;
+    touch(): Promise<void>;
+    isActive(thresholdMinutes?: number): boolean;
+    hasPermission(permission: string): Promise<boolean>;
+}
+
+const MembershipSchema = new Schema<IMembership>(
+    {
+        user: {
+            type: Schema.Types.ObjectId,
+            ref: 'User',
+            required: true,
+        },
+        community: {
+            type: Schema.Types.ObjectId,
+            ref: 'Community',
+            required: true,
+        },
+        roles: [
+            {
+                type: Schema.Types.ObjectId,
+                ref: 'Role',
+            },
+        ],
+        joinedAt: {
+            type: Date,
+            default: () => new Date(),
+            immutable: true,
+        },
+        lastActive: {
+            type: Date,
+            default: () => new Date(),
+        },
+    },
+    {
+        timestamps: false, // we manage our own dates
+        toJSON: { virtuals: true },
+        toObject: { virtuals: true },
+    }
+);
+
+// Ensure one membership per user-community pair
+MembershipSchema.index({ user: 1, community: 1 }, { unique: true });
+MembershipSchema.index({ community: 1, joinedAt: 1 });
+MembershipSchema.index({ user: 1, lastActive: 1 });
+
+// Virtual: determine if the member is “online” within a threshold (default 5 minutes)
+MembershipSchema.virtual('online').get(function (this: IMembership) {
+    const diffMs = Date.now() - this.lastActive.getTime();
+    return diffMs < (5 * 60 * 1000); // active within last 5 minutes
+});
+
+// Instance helper: add a role
+MembershipSchema.methods.addRole = async function (
+    this: IMembership,
+    roleId: Types.ObjectId
+) {
+    if (!this.roles.find((r) => r.equals(roleId))) {
+        this.roles.push(roleId);
+        await this.save();
+    }
+};
+
+// Instance helper: remove a role
+MembershipSchema.methods.removeRole = async function (
+    this: IMembership,
+    roleId: Types.ObjectId
+) {
+    this.roles = this.roles.filter((r) => !r.equals(roleId));
+    await this.save();
+};
+
+// Instance helper: update lastActive to now
+MembershipSchema.methods.touch = async function (this: IMembership) {
+    this.lastActive = new Date();
+    await this.save();
+};
+
+// Instance helper: check active status within threshold in minutes
+MembershipSchema.methods.isActive = function (
+    this: IMembership,
+    thresholdMinutes = 5
+) {
+    const diffMs = Date.now() - this.lastActive.getTime();
+    return diffMs <= thresholdMinutes * 60 * 1000;
+};
+
+// Instance helper: check if member has a specific permission
+MembershipSchema.methods.hasPermission = async function (
+    this: IMembership,
+    permission: string
+): Promise<boolean> {
+    // Populate roles if not already populated
+    if (!this.populated('roles')) {
+        await this.populate({
+            path: 'roles',
+            model: 'Role'
+        });
+    }
+
+    // Check if any of the member's roles has the requested permission
+    return this.roles.some((role) => {
+        const roleDoc = role as unknown as { permissions?: string[] };
+        return roleDoc.permissions && roleDoc.permissions.includes(permission);
+    });
+};
+
+export default mongoose.models.Membership ||
+mongoose.model<IMembership>('Membership', MembershipSchema);
Index: src/components/ui/separator.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/ui/separator.tsx b/src/components/ui/separator.tsx
new file mode 100644
--- /dev/null	(date 1747009941422)
+++ b/src/components/ui/separator.tsx	(date 1747009941422)
@@ -0,0 +1,31 @@
+"use client"
+
+import * as React from "react"
+import * as SeparatorPrimitive from "@radix-ui/react-separator"
+
+import { cn } from "@/lib/utils"
+
+const Separator = React.forwardRef<
+  React.ElementRef<typeof SeparatorPrimitive.Root>,
+  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
+>(
+  (
+    { className, orientation = "horizontal", decorative = true, ...props },
+    ref
+  ) => (
+    <SeparatorPrimitive.Root
+      ref={ref}
+      decorative={decorative}
+      orientation={orientation}
+      className={cn(
+        "shrink-0 bg-border",
+        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
+        className
+      )}
+      {...props}
+    />
+  )
+)
+Separator.displayName = SeparatorPrimitive.Root.displayName
+
+export { Separator }
